        
import os
import time
import re
import json
import asyncio
import shutil
import os
import sys
import random
import socket
import ast
import threading
import logging
from datetime import datetime, timezone
from collections import defaultdict
from telethon import TelegramClient, functions, types, events
from telethon.errors import RPCError
from asyncio import TimeoutError as ConnectionError
from telethon.errors import SessionPasswordNeededError, PasswordHashInvalidError, AuthRestartError
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import GetDialogFiltersRequest, UpdateDialogFilterRequest
from telethon.tl.types import DialogFilter, DialogFilterDefault
from telethon.errors import SessionPasswordNeededError, PasswordHashInvalidError, AuthRestartError, FilterIncludeEmptyError
from telethon.errors import RPCError
from asyncio import TimeoutError as ConnectionError
from datetime import datetime, timezone
from telethon import events
from pathlib import Path
from autosubscribe_module import subscribe_to_chats_from_saved, subscribe_to_chats_list

# Aiogram –∏–º–ø–æ—Ä—Ç—ã
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    Message, CallbackQuery,
    FSInputFile
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError, TelegramConflictError
from aiogram.filters import Command
from aiogram import F

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "7563674409:AAEW6uMHgZYn0b4GDFblAYSNaWn6ZQYb3yA"
KEYS_FILE = "key.json"
LICENSE_FILE = "license.json"
LICENSE_DURATION_DAYS = 30
MAX_ACCOUNTS_PER_USER = 10  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è pro/premium/basic)

def get_max_sessions_for_license(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –Ω–∞ –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    pro=15, premium=10, basic=5, trial=3, owner/admin=–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ).
    """
    license_type = user_states.get(f"{user_id}_license_type")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è owner –∏ admin - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not license_type:
        license_type = detect_license_type(user_id)
        if license_type in ["owner", "admin"]:
            user_states[f"{user_id}_license_type"] = license_type
    
    if license_type in ("owner", "admin"):
        return 10**9
    if license_type == "trial":
        return 3
    if license_type == "pro":
        return 15
    if license_type == "premium":
        return 10
    if license_type == "basic":
        return 5
    # –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º
    return 5
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
OWNER_DIR = os.path.join(PROJECT_ROOT, "owner")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Telethon –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def setup_telethon_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ª–æ–≥–æ–≤
    class TelethonLogFilter(logging.Filter):
        def filter(self, record):
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö auth_key
            if "auth_key failed" in str(record.msg):
                return False
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–ª—é—á–∞—Ö
            if "new auth_key" in str(record.msg):
                return False
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ nonce hash
            if "nonce hash" in str(record.msg):
                return False
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∞–≥–∏ Telethon v1.40.0
            msg_str = str(record.msg)
            if ("Should not be applying the difference" in msg_str or
                "Called end_get_diff on an entry" in msg_str or
                "Fatal error handling updates" in msg_str):
                print(f"üêõ –ü–æ–¥–∞–≤–ª–µ–Ω –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ Telethon v1.40.0: {msg_str[:100]}...")
                return False
            return True
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon
    telethon_logger = logging.getLogger('telethon')
    telethon_logger.setLevel(logging.WARNING)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    telethon_logger.addFilter(TelethonLogFilter())
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π Telethon
    for logger_name in ['telethon.network', 'telethon.crypto']:
        logger = logging.getLogger(logger_name)
        logger.setLevel(logging.ERROR)
        logger.addFilter(TelethonLogFilter())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_telethon_logging()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookies.json
async def get_all_dialogs_usernames(client):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ @username –¥–∏–∞–ª–æ–≥–æ–≤/—á–∞—Ç–æ–≤/–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –¥–ª—è cookies.json
    """
    try:
        #print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è cookies.json...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
        if not client.is_connected():
            print("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await client.is_user_authorized():
            print("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return None
        
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏...")
        all_dialogs = await client.get_dialogs(limit=10000)
        #print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(all_dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è cookies.json
        dialogs_data = {
            "personal_chats": [],      # –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã –∏ –¥–∏–∞–ª–æ–≥–∏
            "groups_channels": [],     # –ì—Ä—É–ø–ø—ã, –∫–∞–Ω–∞–ª—ã, –±–æ—Ç—ã
            "added_later": [],         # –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∂–µ
        }
        
        for dialog in all_dialogs:
            entity = dialog.entity
            username = getattr(entity, 'username', None)
            
            if username:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                entity_type = str(type(entity))
                
                if "User" in entity_type:
                    try:
                        if getattr(entity, 'bot', False):
                            # –ë–æ—Ç—ã
                            dialogs_data["groups_channels"].append(f"@{username}")
                        else:
                            # –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã
                            dialogs_data["personal_chats"].append(f"@{username}")
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±–æ—Ç —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ personal_chats
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {username}: {e}")
                        dialogs_data["personal_chats"].append(f"@{username}")
                elif "Chat" in entity_type:
                    # –ì—Ä—É–ø–ø—ã
                    dialogs_data["groups_channels"].append(f"@{username}")
                elif "Channel" in entity_type:
                    try:
                        if getattr(entity, 'megagroup', False):
                            # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                            dialogs_data["groups_channels"].append(f"@{username}")
                        elif getattr(entity, 'broadcast', False):
                            # –ö–∞–Ω–∞–ª—ã
                            dialogs_data["groups_channels"].append(f"@{username}")
                        else:
                            # –û–±—ã—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                            dialogs_data["groups_channels"].append(f"@{username}")
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞–Ω–∞–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ groups_channels
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –¥–ª—è {username}: {e}")
                        dialogs_data["groups_channels"].append(f"@{username}")
                
                # –°–ª–∏—à–∫–æ–º —à—É–º–Ω–æ: –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–∫–ª—é—á—ë–Ω
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: personal_chats={len(dialogs_data['personal_chats'])}, groups_channels={len(dialogs_data['groups_channels'])}")
        print(f"üìã –ü—Ä–∏–º–µ—Ä—ã personal_chats: {dialogs_data['personal_chats'][:5] if dialogs_data['personal_chats'] else '–Ω–µ—Ç'}")
        print(f"üìã –ü—Ä–∏–º–µ—Ä—ã groups_channels: {dialogs_data['groups_channels'][:5] if dialogs_data['groups_channels'] else '–Ω–µ—Ç'}")
        print(f"üÜï –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏: {len(dialogs_data['added_later'])}")
        return dialogs_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return None

def update_cookies_json(user_id, session_name, dialogs_data):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª cookies.json —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏–∞–ª–æ–≥–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        cookies_file = "cookies.json"
        print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–µ—Å—Å–∏—è {session_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        existing_data = {}
        if os.path.exists(cookies_file):
            try:
                with open(cookies_file, "r", encoding="utf-8") as f:
                    existing_data = json.load(f)
                print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π cookies.json —Å {len(existing_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            except (json.JSONDecodeError, FileNotFoundError):
                print("üìÇ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cookies.json")
                existing_data = {}
        else:
            print("üìÇ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cookies.json")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id_str = str(user_id)
        if user_id_str not in existing_data:
            existing_data[user_id_str] = {}
            print(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_str}")
        else:
            print(f"üë§ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        final_session_name = session_name
        counter = 1
        
        while final_session_name in existing_data[user_id_str]:
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            counter += 1
            final_session_name = f"{session_name} ({counter})"
            print(f"üîÑ –°–µ—Å—Å–∏—è {session_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ {final_session_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        from datetime import datetime
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        session_data = {
            "personal_chats": dialogs_data["personal_chats"],
            "groups_channels": dialogs_data["groups_channels"],
            "added_later": dialogs_data.get("added_later", []),
        }
        
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        existing_data[user_id_str][final_session_name] = session_data
        print(f"üì± –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è {final_session_name} —Å –¥–∞—Ç–æ–π {current_date}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(cookies_file, "w", encoding="utf-8") as f:
            json.dump(existing_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω cookies.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–µ—Å—Å–∏—è {final_session_name}")
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(existing_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(existing_data.get(user_id_str, {}))} —Å–µ—Å—Å–∏–π")
        print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: personal_chats (–ª–∏—á–Ω—ã–µ —á–∞—Ç—ã), groups_channels (–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies.json: {e}")
        import traceback
        traceback.print_exc()
        return False



# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# (–±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ—Ä–æ–≤
connection_monitor_task = None
reconnection_attempts = {}  # {client_id: attempt_count}
max_reconnection_delay = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
base_reconnection_delay = 5  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
internet_connection_status = True
last_internet_check = 0
disabled_clients = set()  # {(user_id, session_name)} –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞ (–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã/–Ω–µ—Ç .session)
disabled_session_names = set()  # {session_name} –≥–ª–æ–±–∞–ª—å–Ω–∞—è –º–µ—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏

# –§—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ—Ä–æ–≤
async def check_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    global internet_connection_status, last_internet_check
    
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    if current_time - last_internet_check > 30:
        internet_connection_status = is_internet_available()
        last_internet_check = current_time
    
    return internet_connection_status

async def ensure_client_connected(client, session_name, user_id=None, max_retries=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.
    
    Args:
        client: TelegramClient
        session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (None = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
    """
    client_id = f"{user_id}_{session_name}"
    attempt = 0
    
    while max_retries is None or attempt < max_retries:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if client.is_connected() and await client.is_user_authorized():
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if client_id in reconnection_attempts:
                    del reconnection_attempts[client_id]
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await check_internet_connection():
                delay = min(base_reconnection_delay * (2 ** min(attempt, 4)), max_reconnection_delay)
                # –û—Ç–∫–ª—é—á–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print(f"üåê –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay}—Å...")
                await asyncio.sleep(delay)
                attempt += 1
                continue
            
            # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {session_name} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})...")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω
            if client.is_connected():
                await client.disconnect()
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            if attempt > 0:
                # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                if attempt == 1:
                    delay = 1  # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –≤—Å–µ–≥–æ 1 —Å–µ–∫—É–Ω–¥–∞
                elif attempt == 2:
                    delay = 2  # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - 2 —Å–µ–∫—É–Ω–¥—ã  
                elif attempt == 3:
                    delay = 3  # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ - 3 —Å–µ–∫—É–Ω–¥—ã
                else:
                    delay = min(base_reconnection_delay * (2 ** min(attempt - 3, 4)), max_reconnection_delay)
                await asyncio.sleep(delay)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                await asyncio.wait_for(client.connect(), timeout=15.0)
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {session_name}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                is_auth = await asyncio.wait_for(client.is_user_authorized(), timeout=10.0)
            except asyncio.TimeoutError:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {session_name}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ")
                is_auth = False
            
            if is_auth:
                # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {session_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                if client_id in reconnection_attempts:
                    del reconnection_attempts[client_id]
                return True
            else:
                if user_id:
                    await log_to_telegram(user_id, f"‚ùå –ö–ª–∏–µ–Ω—Ç {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "connection_manager")
                else:
                    print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                
        except Exception as e:
            error_str = str(e)
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telethon v1.40.0
            if ("Should not be applying the difference" in error_str or 
                "Called end_get_diff on an entry" in error_str or
                "KeyError:" in error_str and "getting_diff_for" in error_str):
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–≥ Telethon v1.40.0 –¥–ª—è {session_name}, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                try:
                    await client.disconnect()
                    await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                    await client.connect()
                    if await client.is_user_authorized():
                        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è {session_name} –ø–æ—Å–ª–µ Telethon-–±–∞–≥–∞")
                        if client_id in reconnection_attempts:
                            del reconnection_attempts[client_id]
                        return True
                except Exception:
                    pass
            
            if user_id:
                await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}", "connection_manager")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {session_name}: {e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        reconnection_attempts[client_id] = attempt + 1
        attempt += 1
        
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏ –º—ã –µ–≥–æ –¥–æ—Å—Ç–∏–≥–ª–∏
        if max_retries is not None and attempt >= max_retries:
            if user_id:
                await log_to_telegram(user_id, f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {session_name}", "connection_manager")
            else:
                print(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {session_name}")
            return False
    
    return False

async def ensure_client_connected_simple(client, session_name, user_id=None):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return await ensure_client_connected(client, session_name, user_id, max_retries=3)

class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.monitor_tasks = {}  # {user_id: asyncio.Task}
        self.client_states = {}  # {user_id: {session_name: {"connected": bool, "last_check": float}}}
        self.reconnection_locks = {}  # {client_id: asyncio.Lock}
    
    async def start_monitoring(self, user_id):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.monitor_tasks or self.monitor_tasks[user_id].done():
            self.monitor_tasks[user_id] = asyncio.create_task(self._monitor_user_connections(user_id))
    
    async def stop_monitoring(self, user_id):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.monitor_tasks:
            self.monitor_tasks[user_id].cancel()
            try:
                await self.monitor_tasks[user_id]
            except asyncio.CancelledError:
                pass
            del self.monitor_tasks[user_id]
    
    async def _monitor_user_connections(self, user_id):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id in active_clients:
                    for session_name, client in active_clients[user_id].items():
                        client_id = f"{user_id}_{session_name}"
                        
                        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                        if client_id not in self.reconnection_locks:
                            self.reconnection_locks[client_id] = asyncio.Lock()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        asyncio.create_task(self._check_and_reconnect_client(user_id, session_name, client))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await asyncio.sleep(5)
    
    async def _check_and_reconnect_client(self, user_id, session_name, client):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        client_id = f"{user_id}_{session_name}"
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            async with self.reconnection_locks.get(client_id, asyncio.Lock()):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                is_connected = False
                is_authorized = False
                
                try:
                    is_connected = client.is_connected()
                    if is_connected:
                        is_authorized = await asyncio.wait_for(client.is_user_authorized(), timeout=5.0)
                except Exception:
                    is_connected = False
                    is_authorized = False
                
                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º
                if not is_connected or not is_authorized:
                    await ensure_client_connected(client, session_name, user_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ {session_name}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
connection_manager = ConnectionManager()

# ----------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫-—É—Å—Ç–æ–π—á–∏–≤–æ–µ)
# ----------------------

def get_autosub_state_path(user_id):
    try:
        license_type = user_states.get(f"{user_id}_license_type") or detect_license_type(user_id)
    except Exception:
        license_type = None
    try:
        user_dir = get_user_dir(user_id, license_type)
    except Exception:
        # –§–æ–ª–±—ç–∫ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
        user_dir = os.path.join(get_project_root(), "user")
    os.makedirs(user_dir, exist_ok=True)
    return os.path.join(user_dir, "autosubscribe_state.json")

def load_autosub_state(user_id):
    path = get_autosub_state_path(user_id)
    try:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f) or {}
                return data
    except Exception:
        pass
    return {}

def save_autosub_state(user_id, data):
    path = get_autosub_state_path(user_id)
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

# ---- Trial autosubscribe limit helpers ----
def get_autosub_trial_processed_total(user_id) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        state = load_autosub_state(user_id)
        total = 0
        for phone_key, acc in state.items():
            if not isinstance(acc, dict):
                continue
            processed = acc.get("processed", [])
            if isinstance(processed, list):
                total += len(processed)
        return int(total)
    except Exception:
        return 0

def get_autosub_trial_remaining(user_id, limit: int = 10) -> int:
    try:
        used = get_autosub_trial_processed_total(user_id)
        return max(0, int(limit) - int(used))
    except Exception:
        return 0

def normalize_autosub_list(raw_list):
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –≤ autosubscribe_module
    normalized = []
    seen = set()
    for item in raw_list:
        if not item:
            continue
        text = item.strip()
        links = re.findall(r"https://t\.me/\S+", text)
        usernames = re.findall(r"@([a-zA-Z0-9_]{5,})", text)
        for link in links:
            if link not in seen:
                seen.add(link)
                normalized.append(link)
        for name in usernames:
            handle = f"@{name}"
            if f"https://t.me/{name}" in seen:
                continue
            if handle not in seen:
                seen.add(handle)
                normalized.append(handle)
    return normalized

def autosub_progress_remove_item(user_id, phone, text_line):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–π @handle –∏–ª–∏ —Å—Å—ã–ª–∫—É https://t.me/...
        link_match = re.search(r"https://t\.me/\S+", text_line)
        user_match = re.search(r"@([a-zA-Z0-9_]{5,})", text_line)
        key = None
        if link_match:
            key = link_match.group(0)
        elif user_match:
            key = f"@{user_match.group(1)}"
        if not key:
            return
        state = load_autosub_state(user_id)
        acc = state.get(str(phone)) or {}
        remaining = acc.get("remaining", [])
        processed = acc.get("processed", [])
        if key in remaining:
            remaining.remove(key)
            processed.append(key)
            acc["remaining"] = remaining
            acc["processed"] = processed
            state[str(phone)] = acc
            save_autosub_state(user_id, state)
    except Exception:
        pass

def autosub_progress_clear_account(user_id, phone):
    try:
        state = load_autosub_state(user_id)
        phone_key = str(phone)
        if phone_key in state:
            del state[phone_key]
            save_autosub_state(user_id, state)
    except Exception:
        pass

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
def clean_state_for_serialization(state_data):
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (Event, TelegramClient, etc.)
    """
    if not isinstance(state_data, dict):
        return state_data
    
    cleaned_state = {}
    for key, value in state_data.items():
        try:
            if isinstance(value, dict):
                cleaned_state[key] = clean_state_for_serialization(value)
            elif isinstance(value, list):
                cleaned_state[key] = [
                    clean_state_for_serialization(item) if isinstance(item, dict) else item 
                    for item in value
                ]
            elif hasattr(value, '__class__') and 'Event' in str(type(value)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Event
                continue
            elif hasattr(value, '__class__') and 'TelegramClient' in str(type(value)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã TelegramClient
                continue
            elif hasattr(value, '__class__') and 'asyncio.Task' in str(type(value)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Task
                continue
            elif hasattr(value, '__class__') and 'threading.Event' in str(type(value)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã threading.Event
                continue
            elif hasattr(value, '__class__') and 'coroutine' in str(type(value)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—ã
                continue
            elif hasattr(value, '__class__') and 'function' in str(type(value)):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                continue
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
                try:
                    json.dumps(value)
                    cleaned_state[key] = value
                except (TypeError, ValueError):
                    # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                    continue
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ {key} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            continue
    
    return cleaned_state

def update_service_state(service_type, user_id, state_data):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ reconnect_state.json
    
    Args:
        service_type: "mailing_states", "autoresponder_states", "postman_states", –∏–ª–∏ "active_tasks_info"
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state_data: –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (None –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_state = load_user_reconnect_state_individual(user_id) or {
            "mailing_states": {},
            "autoresponder_states": {},
            "postman_states": {},
            "autosubscribe_states": {},
            "user_sessions": {},
            "active_tasks_info": {}
        }
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω—É–∂–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if service_type not in existing_state:
            existing_state[service_type] = {}
        
        user_id_str = str(user_id)
        
        if state_data is None:
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            existing_state[service_type].pop(user_id_str, None)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {service_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            cleaned_state_data = clean_state_for_serialization(state_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            existing_state[service_type][user_id_str] = cleaned_state_data
            print(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {service_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user_reconnect_state_individual(user_id, existing_state)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {service_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def save_reconnect_state():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        users_with_states = set()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        for user_id in mailing_states.keys():
            users_with_states.add(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        for user_id in autoresponder_states.keys():
            users_with_states.add(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ—á—Ç—ã
        for user_id in postman_states.keys():
            users_with_states.add(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        for user_id in user_sessions.keys():
            users_with_states.add(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        for user_id in users_with_states:
            try:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_state_data = {
                    "mailing_states": {},
                    "autoresponder_states": {},
                    "postman_states": {},
                    "autosubscribe_states": {},
                    "user_sessions": {},
                    "active_tasks_info": {}
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
                if user_id in mailing_states:
                    cleaned_mailing_state = clean_state_for_serialization(mailing_states[user_id])
                    ms_active = bool(cleaned_mailing_state.get("active", False))
                    ms_selected = cleaned_mailing_state.get("selected_accounts", []) or []
                    if ms_active or len(ms_selected) > 0:
                        user_state_data["mailing_states"][str(user_id)] = {
                            "selected_accounts": ms_selected,
                            "active": ms_active,
                            "minimized": cleaned_mailing_state.get("minimized", False),
                            "logging_enabled": cleaned_mailing_state.get("logging_enabled", True)
                        }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
                if user_id in autoresponder_states:
                    auto_state = autoresponder_states[user_id]
                    if auto_state.get("active", False):
                        cleaned_auto_state = clean_state_for_serialization(auto_state)
                        user_state_data["autoresponder_states"][str(user_id)] = {
                            "selected_accounts": cleaned_auto_state.get("selected_accounts", []),
                            "active": cleaned_auto_state.get("active", False),
                            "minimized": cleaned_auto_state.get("minimized", False)
                        }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á—Ç—ã
                if user_id in postman_states:
                    post_state = postman_states[user_id]
                    if post_state.get("active", False):
                        cleaned_post_state = clean_state_for_serialization(post_state)
                        user_state_data["postman_states"][str(user_id)] = {
                            "selected_accounts": cleaned_post_state.get("selected_accounts", []),
                            "selected_postman": cleaned_post_state.get("selected_postman"),
                            "notify_username": cleaned_post_state.get("notify_username"),
                            "active": cleaned_post_state.get("active", False),
                            "minimized": cleaned_post_state.get("minimized", False)
                        }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ phone per-user)
                try:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ autosubscribe:{phone} –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π remaining
                    autosub_states = {}
                    accounts = load_user_accounts(user_id)
                    for acc in (accounts or []):
                        phone = acc.get("phone")
                        if not phone:
                            continue
                        task_key = f"autosubscribe:{phone}"
                        is_running = user_id in active_tasks and task_key in active_tasks[user_id] and not active_tasks[user_id][task_key].done()
                        has_remaining = bool(load_autosub_state(user_id).get(str(phone), {}).get("remaining"))
                        if is_running or has_remaining:
                            autosub_states[phone] = {
                                "active": True,
                                "phone": phone,
                                "minimized": bool(user_states.get(f"{user_id}_autosub_minimized_{phone}"))
                            }
                    if autosub_states:
                        user_state_data["autosubscribe_states"][str(user_id)] = autosub_states
                except Exception:
                    pass

                # –î–æ–±–∞–≤–ª—è–µ–º user_sessions (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π autosubscribe, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ—á–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å)
                if user_id in user_sessions:
                    try:
                        session_copy = dict(user_sessions[user_id])
                    except Exception:
                        session_copy = user_sessions[user_id]
                    # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª autosubscribe –∏–∑ user_sessions, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ remaining –ø—É—Å—Ç–æ–π –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    try:
                        has_running_autosub = (
                            user_id in active_tasks and any(
                                (not task.done() and not task.cancelled()) and name.startswith("autosubscribe:")
                                for name, task in active_tasks[user_id].items()
                            )
                        )
                        has_remaining_autosub = False
                        try:
                            accounts = load_user_accounts(user_id)
                        except Exception:
                            accounts = []
                        for acc in (accounts or []):
                            ph = acc.get("phone")
                            if not ph:
                                continue
                            try:
                                if load_autosub_state(user_id).get(str(ph), {}).get("remaining"):
                                    has_remaining_autosub = True
                                    break
                            except Exception:
                                continue
                        if not has_running_autosub and not has_remaining_autosub:
                            if isinstance(session_copy, dict) and "autosubscribe" in session_copy:
                                session_copy.pop("autosubscribe", None)
                    except Exception:
                        pass
                    cleaned_user_session = clean_state_for_serialization(session_copy)
                    if cleaned_user_session:
                        user_state_data["user_sessions"][str(user_id)] = cleaned_user_session
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                if user_id in active_tasks:
                    active_task_names = []
                    for task_name, task in active_tasks[user_id].items():
                        if not task.done() and not task.cancelled():
                            active_task_names.append(task_name)
                    if active_task_names:
                        user_state_data["active_tasks_info"][str(user_id)] = active_task_names
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                save_user_reconnect_state_individual(user_id, user_state_data)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è reconnect_state.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
          
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

async def stop_all_auto_resume_tasks():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
    
    for user_id, tasks in auto_resume_tasks.items():
        for service_type, task in tasks.items():
            if not task.done():
                print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É {service_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ {service_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á
    auto_resume_tasks.clear()
    print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def load_reconnect_state():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –≤ –ø–∞–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        #print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        root = get_project_root()
        user_base_dir = os.path.join(root, "user")
        
        if os.path.exists(user_base_dir):
            for item in os.listdir(user_base_dir):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
                if item.isdigit():
                    user_id = int(item)
                    migrate_user_folder_if_needed(user_id)
        
        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        cleanup_orphaned_folders()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        state_data = {
            "mailing_states": {},
            "autoresponder_states": {},
            "postman_states": {},
            "user_sessions": {},
            "active_tasks_info": {}
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if os.path.exists(user_base_dir):
            for item in os.listdir(user_base_dir):
                if item.endswith(("_trial", "_pro", "_premium", "_basic", "_admin", "_owner")):
                    user_id = int(item.split("_")[0])
                    user_reconnect_data = load_user_reconnect_state_individual(user_id)
                    if user_reconnect_data:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        for key in ["mailing_states", "autoresponder_states", "postman_states", "autosubscribe_states", "user_sessions", "active_tasks_info"]:
                            if key in user_reconnect_data and user_id not in state_data.get(key, {}):
                                if key not in state_data:
                                    state_data[key] = {}
                                state_data[key][str(user_id)] = user_reconnect_data[key].get(str(user_id), {})
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ (–∏ –∞–≤—Ç–æ-—Ä–µ–∑—é–º –ø—Ä–∏ active=true)
        restored_autosub = 0
        for user_id_str, autosub_state in state_data.get("autosubscribe_states", {}).items():
            user_id = int(user_id_str)
            if not isinstance(autosub_state, dict):
                continue
            for phone, info in autosub_state.items():
                try:
                    if info.get("active"):
                        remaining = load_autosub_state(user_id).get(str(phone), {}).get("remaining", [])
                        if remaining:
                            user_states[f"{user_id}_autosub_phone"] = phone
                            minimized_at_resume = bool(info.get("minimized", False))
                            if minimized_at_resume:
                                user_states[f"{user_id}_autosub_minimized_{phone}"] = True
                            async def resume_autosub(user_id=user_id, phone=phone):
                                try:
                                    config = load_config(user_id)
                                    api_id = config.get("api_id")
                                    api_hash = config.get("api_hash")
                                    accounts = load_user_accounts(user_id)
                                    account = next((a for a in accounts if a.get("phone") == phone), None)
                                    if not account or not api_id or not api_hash:
                                        return
                                    session_name = account.get("name") or account.get("phone")
                                    license_type = user_states.get(f"{user_id}_license_type") or detect_license_type(user_id)
                                    client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                                    if not client:
                                        return
                                    rem = load_autosub_state(user_id).get(str(phone), {}).get("remaining", [])
                                    if not rem:
                                        return
                                    async def reporter_stub(text: str):
                                        # –ü—Ä–µ—Ñ–∏–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                                        acc_label = None
                                        try:
                                            for acc in accounts:
                                                if acc.get("phone") == phone:
                                                    acc_label = acc.get("username") or acc.get("name") or acc.get("phone")
                                                    break
                                        except Exception:
                                            pass
                                        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤/FloodWait –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                                        try:
                                            if text.startswith("–ü–µ—Ä–µ—Ä—ã–≤ ") and text.endswith(" –º–∏–Ω—É—Ç"):
                                                minutes_str = text.replace("–ü–µ—Ä–µ—Ä—ã–≤ ", "").replace(" –º–∏–Ω—É—Ç", "").strip()
                                                total_minutes = int(minutes_str)
                                                user_states[f"{user_id}_autosub_break_{phone}_started_ts"] = int(asyncio.get_event_loop().time())
                                                user_states[f"{user_id}_autosub_break_{phone}_total_sec"] = total_minutes * 60
                                            elif text.startswith("–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å ") and text.endswith(" –º–∏–Ω—É—Ç"):
                                                minutes_left = int(text.replace("–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å ", "").replace(" –º–∏–Ω—É—Ç", "").strip())
                                                user_states[f"{user_id}_autosub_break_{phone}_started_ts"] = int(asyncio.get_event_loop().time())
                                                user_states[f"{user_id}_autosub_break_{phone}_total_sec"] = minutes_left * 60
                                            elif text.startswith("Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å ") and text.endswith(" —Å–µ–∫—É–Ω–¥."):
                                                seconds_str = text.replace("Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å ", "").replace(" —Å–µ–∫—É–Ω–¥.", "").strip()
                                                total_seconds = int(seconds_str)
                                                user_states[f"{user_id}_autosub_flood_{phone}_started_ts"] = int(asyncio.get_event_loop().time())
                                                user_states[f"{user_id}_autosub_flood_{phone}_total_sec"] = total_seconds
                                            else:
                                                m_ok = re.match(r"^–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ (.+)$", text.strip())
                                                if m_ok:
                                                    autosub_progress_remove_item(user_id, phone, m_ok.group(1))
                                                if text.strip() == "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." or "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." in text:
                                                    user_states[f"{user_id}_autosub_last_done_{phone}"] = True
                                        except Exception:
                                            pass

                                        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞ ‚Äî –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ —á–∞—Ç, –Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
                                        try:
                                            if user_states.get(f"{user_id}_autosub_minimized_{phone}"):
                                                if text.strip() == "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." or "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." in text:
                                                    user_states[f"{user_id}_autosub_done_{phone}"] = True
                                                    if acc_label:
                                                        user_states[f"{user_id}_autosub_done_label_{phone}"] = acc_label
                                                    user_states[f"{user_id}_autosub_done_pending"] = {
                                                        "phone": phone,
                                                        "label": acc_label
                                                    }
                                                return
                                        except Exception:
                                            pass

                                        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —á–∞—Ç
                                        try:
                                            if user_states.get(f"{user_id}_autosub_minimized_{phone}"):
                                                return
                                        except Exception:
                                            pass

                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–æ)
                                        try:
                                            prefixed = f"{acc_label}: {text}" if acc_label else text
                                            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª —è–≤–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç ‚Äî –ø—Ä–∏–∫—Ä–µ–ø–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                                            if user_states.pop(f"{user_id}_autosub_unminimized_{phone}", None) or user_states.pop(f"{user_id}_autosub_attach_keyboard_{phone}", None):
                                                await bot.send_message(chat_id=user_id, text=prefixed, reply_markup=get_autosub_active_keyboard())
                                            else:
                                                await bot.send_message(chat_id=user_id, text=prefixed)
                                        except Exception:
                                            pass
                                    async def run_resume():
                                        try:
                                            # –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π guard –ø—Ä–∏ –∞–≤—Ç–æ-–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏
                                            if not is_license_valid(user_id):
                                                try:
                                                    await handle_access_expired(user_id)
                                                except Exception:
                                                    pass
                                                return
                                            # Guard-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–∑—é–º–∞
                                            async def _license_guard_resume() -> bool:
                                                try:
                                                    return bool(is_license_valid(user_id))
                                                except Exception:
                                                    return True

                                            await subscribe_to_chats_list(client, rem, reporter_stub, _license_guard_resume)
                                        except asyncio.CancelledError:
                                            return
                                        except Exception:
                                            pass
                                    await start_task(user_id, f"autosubscribe:{phone}", run_resume())
                                except asyncio.CancelledError:
                                    return
                                except Exception:
                                    pass
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–µ–µ—Å—Ç—Ä –∞–≤—Ç–æ-–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
                            # —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –µ—ë –æ—Ç–º–µ–Ω—è—Ç—å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                            resume_task = asyncio.create_task(resume_autosub())
                            if user_id not in auto_resume_tasks:
                                auto_resume_tasks[user_id] = {}
                            auto_resume_tasks[user_id][f"autosubscribe:{phone}"] = resume_task
                            restored_autosub += 1
                except Exception:
                    pass
        if restored_autosub:
            print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫: {restored_autosub}")

        #print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
        restored_mailing = 0
        for user_id_str, mailing_state in state_data.get("mailing_states", {}).items():
            user_id = int(user_id_str)
            mailing_states[user_id] = mailing_state
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            is_active = mailing_state.get("active", False)
            is_minimized = mailing_state.get("minimized", False)
            mailing_states[user_id]["active"] = is_active
            mailing_states[user_id]["minimized"] = is_minimized
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            # –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
            if is_active and not is_minimized:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                mailing_states[user_id]["_restored"] = True
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                monitoring_task = asyncio.create_task(connection_manager.start_monitoring(user_id))
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                mailing_task = asyncio.create_task(auto_resume_mailing(user_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if user_id not in auto_resume_tasks:
                    auto_resume_tasks[user_id] = {}
                auto_resume_tasks[user_id]["monitoring"] = monitoring_task
                auto_resume_tasks[user_id]["mailing"] = mailing_task
                
                restored_mailing += 1
            elif is_active and is_minimized:
                # –î–ª—è —Å–≤–µ—Ä–Ω—É—Ç—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                print(f"üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ —Ä–∞—Å—Å—ã–ª–∫—É)
                monitoring_task = asyncio.create_task(connection_manager.start_monitoring(user_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if user_id not in auto_resume_tasks:
                    auto_resume_tasks[user_id] = {}
                auto_resume_tasks[user_id]["monitoring"] = monitoring_task
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_sessions –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UI
                if user_id not in user_sessions:
                    user_sessions[user_id] = {}
                if "pushmux" not in user_sessions[user_id]:
                    user_sessions[user_id]["pushmux"] = {}
                user_sessions[user_id]["pushmux"]["minimized"] = True
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                mailing_task = asyncio.create_task(auto_resume_mailing(user_id))
                auto_resume_tasks[user_id]["mailing"] = mailing_task
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        restored_autoresponder = 0
        for user_id_str, auto_state in state_data.get("autoresponder_states", {}).items():
            user_id = int(user_id_str)
            autoresponder_states[user_id] = auto_state
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            is_active = auto_state.get("active", False)
            is_minimized = auto_state.get("minimized", False)
            autoresponder_states[user_id]["active"] = is_active
            autoresponder_states[user_id]["minimized"] = is_minimized
            
            if is_active and not is_minimized:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                autoresponder_states[user_id]["_restored"] = True
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                monitoring_task = asyncio.create_task(connection_manager.start_monitoring(user_id))
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
                autoresponder_task = asyncio.create_task(auto_resume_autoresponder(user_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if user_id not in auto_resume_tasks:
                    auto_resume_tasks[user_id] = {}
                if "monitoring" not in auto_resume_tasks[user_id]:
                    auto_resume_tasks[user_id]["monitoring"] = monitoring_task
                auto_resume_tasks[user_id]["autoresponder"] = autoresponder_task
                
                restored_autoresponder += 1
            elif is_active and is_minimized:
                # –î–ª—è —Å–≤–µ—Ä–Ω—É—Ç—ã—Ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                print(f"üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫)
                monitoring_task = asyncio.create_task(connection_manager.start_monitoring(user_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if user_id not in auto_resume_tasks:
                    auto_resume_tasks[user_id] = {}
                auto_resume_tasks[user_id]["monitoring"] = monitoring_task
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—á—Ç—ã
        restored_mailboxer = 0
        for user_id_str, post_state in state_data.get("postman_states", {}).items():
            user_id = int(user_id_str)
            postman_states[user_id] = post_state
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            is_active = post_state.get("active", False)
            is_minimized = post_state.get("minimized", False)
            postman_states[user_id]["active"] = is_active
            postman_states[user_id]["minimized"] = is_minimized
            
            if is_active and not is_minimized:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                postman_states[user_id]["_restored"] = True
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                monitoring_task = asyncio.create_task(connection_manager.start_monitoring(user_id))
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—á—Ç—É
                mailboxer_task = asyncio.create_task(auto_resume_mailboxer(user_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if user_id not in auto_resume_tasks:
                    auto_resume_tasks[user_id] = {}
                if "monitoring" not in auto_resume_tasks[user_id]:
                    auto_resume_tasks[user_id]["monitoring"] = monitoring_task
                auto_resume_tasks[user_id]["mailboxer"] = mailboxer_task
                
                restored_mailboxer += 1
            elif is_active and is_minimized:
                # –î–ª—è —Å–≤–µ—Ä–Ω—É—Ç–æ–π –ø–æ—á—Ç—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                print(f"üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ–π –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ –ø–æ—á—Ç—É)
                monitoring_task = asyncio.create_task(connection_manager.start_monitoring(user_id))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if user_id not in auto_resume_tasks:
                    auto_resume_tasks[user_id] = {}
                auto_resume_tasks[user_id]["monitoring"] = monitoring_task
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_sessions –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è UI
        restored_user_sessions = 0
        for user_id_str, user_session in state_data.get("user_sessions", {}).items():
            user_id = int(user_id_str)
            user_sessions[user_id] = user_session
            restored_user_sessions += 1
        
        if restored_mailing or restored_autoresponder or restored_mailboxer:
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —Ä–∞—Å—Å—ã–ª–∫–∞ ({restored_mailing}), –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ ({restored_autoresponder}), –ø–æ—á—Ç–∞ ({restored_mailboxer})")
        
        # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        # os.remove(state_file)
        
        # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        #print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        restored_from_individual = 0
        
        root = get_project_root()
        user_base_dir = os.path.join(root, "user")
        
        if os.path.exists(user_base_dir):
            for item in os.listdir(user_base_dir):
                if item.endswith(("_trial", "_pro", "_premium", "_basic", "_admin", "_owner")):
                    user_id = int(item.split("_")[0])
                    user_reconnect_file = os.path.join(user_base_dir, item, "reconnect_state.json")
                    
                    if os.path.exists(user_reconnect_file):
                        try:
                            with open(user_reconnect_file, "r", encoding="utf-8") as f:
                                user_state_data = json.load(f)
                            
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if user_id_str := str(user_id):
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
                                if user_state_data.get("mailing_states", {}).get(user_id_str, {}).get("active", False):
                                    mailing_states[user_id] = user_state_data["mailing_states"][user_id_str]
                                    restored_from_individual += 1
                                
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
                                if user_state_data.get("autoresponder_states", {}).get(user_id_str, {}).get("active", False):
                                    autoresponder_states[user_id] = user_state_data["autoresponder_states"][user_id_str]
                                    restored_from_individual += 1
                                
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—á—Ç—ã
                                if user_state_data.get("postman_states", {}).get(user_id_str, {}).get("active", False):
                                    postman_states[user_id] = user_state_data["postman_states"][user_id_str]
                                    restored_from_individual += 1
                                
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user_sessions
                                if user_state_data.get("user_sessions", {}).get(user_id_str):
                                    user_sessions[user_id] = user_state_data["user_sessions"][user_id_str]
                                
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {user_reconnect_file}: {e}")
        
        #if restored_from_individual > 0:
            #print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_from_individual} —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø—ã –ª–∏—Ü–µ–Ω–∑–∏–π –∏–∑ freetrial.json
        try:
            freetrial_data = load_freetrial()
            restored_licenses = 0
            for user_id_str in freetrial_data:
                if is_freetrial_valid(int(user_id_str)):
                    user_id = int(user_id_str)
                    user_states[f"{user_id}_license_type"] = "trial"
                    restored_licenses += 1
            if restored_licenses > 0:
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_licenses} —Ç–∏–ø–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π –∏–∑ freetrial.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
async def auto_resume_mailing(user_id):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        await asyncio.sleep(0.5)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        if user_id not in mailing_states or not mailing_states[user_id].get("active"):
            return
        
        state = mailing_states[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        selected_accounts = state.get("selected_accounts", [])
        
        if not selected_accounts:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞
        is_minimized = state.get("minimized", False)
        if is_minimized:
            print(f"üì± –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
            resume_state = load_resume_state(user_id=user_id)
            if resume_state and resume_state.get("accounts"):
                now = int(time.time())
                accounts_on_break = [
                    acc for acc in resume_state["accounts"] 
                    if acc.get("break_until_timestamp") and acc["break_until_timestamp"] > now
                ]
                
                if accounts_on_break:
                    print(f"üîÑ –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è {len(accounts_on_break)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ—Ä—ã–≤–æ–≤, –Ω–µ —Ä–∞—Å—Å—ã–ª–∫—É
                    break_tasks = []
                    for account in accounts_on_break:
                        # –ú–∏–≥—Ä–∏—Ä—É–µ–º username –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        config = load_config(user_id)
                        config_accounts = config.get("accounts", []) if config else []
                        account = migrate_account_username(account, config_accounts)
                        
                        display_name = get_display_name(account)
                        break_seconds_left = account['break_seconds_left']
                        break_started_ts = account.get('break_started_ts')
                        
                        print(f"üïê –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è {display_name}: {break_seconds_left} —Å–µ–∫—É–Ω–¥")
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è countdown_timer
                        task_name = f"break_timer_{account.get('phone', display_name)}"
                        task_coro = countdown_timer(
                            break_seconds_left, 
                            display_name, 
                            {},  # timers dict
                            selected_account=account,
                            user_id=user_id,
                            break_started_ts=break_started_ts
                        )
                        task = asyncio.create_task(task_coro)
                        
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
                        if user_id not in active_tasks:
                            active_tasks[user_id] = {}
                        active_tasks[user_id][task_name] = task
                        
                        break_tasks.append(task)
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
                    if break_tasks:
                        try:
                            await asyncio.gather(*break_tasks, return_exceptions=True)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–∞—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {e}")
                    
                    print(f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                    return
                else:
                    print(f"üîÑ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É")
                    # –î–ª—è —Å–≤–µ—Ä–Ω—É—Ç—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    config = load_config(user_id)
                    if config and "api_id" in config and "api_hash" in config:
                        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –∞ –Ω–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                        await execute_mailing(user_id, state, selected_accounts, config["api_id"], config["api_hash"])
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∑–¥–µ—Å—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        #if not is_minimized:
        #    await log_to_telegram(user_id, "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...", "mailing")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        license_type = detect_license_type(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        # –ò—â–µ–º –≤ resume_process.json –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        resume_file = get_user_dir(user_id, license_type) + "/resume_process.json"
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {resume_file}")
        if os.path.exists(resume_file):
            try:
                with open(resume_file, 'r', encoding='utf-8') as f:
                    resume_data = json.load(f)
                
                print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω resume_process.json: {resume_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                total_progress = 0
                total_messages = 0
                if "accounts" in resume_data:
                    for account_data in resume_data["accounts"]:
                        if isinstance(account_data, dict) and "message_count" in account_data:
                            total_progress += account_data["message_count"]
                            total_messages += 30  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
                            print(f"üìä –ê–∫–∫–∞—É–Ω—Ç {account_data.get('phone', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {account_data['message_count']}/30")
                
                print(f"üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_progress}/{total_messages}")
                
                if total_progress > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
                    accounts_on_break = []
                    accounts_completed = []
                    accounts_at_limit = []
                    
                    for account_data in resume_data["accounts"]:
                        if isinstance(account_data, dict):
                            phone = account_data.get('phone', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            nickname = account_data.get('nickname', phone)
                            message_count = account_data.get('message_count', 0)
                            break_seconds_left = account_data.get('break_seconds_left', 0)
                            
                            if message_count >= 30 and break_seconds_left > 0:
                                # –ê–∫–∫–∞—É–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
                                accounts_on_break.append({
                                    'phone': phone,
                                    'nickname': nickname,
                                    'break_seconds_left': break_seconds_left
                                })
                            elif message_count >= 30 and break_seconds_left <= 0:
                                # –ê–∫–∫–∞—É–Ω—Ç –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞, –Ω–æ –ø–µ—Ä–µ—Ä—ã–≤ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                                accounts_at_limit.append({
                                    'phone': phone,
                                    'nickname': nickname,
                                    'message_count': message_count
                                })
                            elif message_count < 30:
                                # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É
                                accounts_completed.append(account_data)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    status_message = "üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:\n"
                    for account_data in resume_data["accounts"]:
                        if isinstance(account_data, dict):
                            phone = account_data.get('phone', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            nickname = account_data.get('nickname', phone)
                            message_count = account_data.get('message_count', 0)
                            break_seconds_left = account_data.get('break_seconds_left', 0)
                            
                            if message_count >= 30 and break_seconds_left > 0:
                                hours = break_seconds_left // 3600
                                minutes = (break_seconds_left % 3600) // 60
                                seconds = break_seconds_left % 60
                                status_message += f"üìä –ê–∫–∫–∞—É–Ω—Ç {phone}: {message_count}/30 (–ø–µ—Ä–µ—Ä—ã–≤ {hours:02d}:{minutes:02d}:{seconds:02d}) üü°\n"
                            elif message_count >= 30:
                                status_message += f"üìä –ê–∫–∫–∞—É–Ω—Ç {phone}: {message_count}/30 (–ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç) üî¥\n"
                            else:
                                status_message += f"üìä –ê–∫–∫–∞—É–Ω—Ç {phone}: {message_count}/30 (–∞–∫—Ç–∏–≤–µ–Ω) üü¢\n"
                    
                    print(status_message.strip())
                    # –£–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                    # if not is_minimized:
                    #     await log_to_telegram(user_id, status_message.strip(), "mailing")
                    
                    if accounts_on_break and not accounts_completed and not accounts_at_limit:
                        # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ - –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
                        print(f"üîÑ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã...")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º countdown_timer –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
                        break_tasks = []
                        for account in accounts_on_break:
                            # –ú–∏–≥—Ä–∏—Ä—É–µ–º username –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                            config = load_config(user_id)
                            config_accounts = config.get("accounts", []) if config else []
                            account = migrate_account_username(account, config_accounts)
                            
                            display_name = get_display_name(account)
                            break_seconds_left = account['break_seconds_left']
                            break_started_ts = account.get('break_started_ts')
                            
                            print(f"üïê –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è {display_name}: {break_seconds_left} —Å–µ–∫—É–Ω–¥")
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è countdown_timer
                            task_name = f"break_timer_{account.get('phone', display_name)}"
                            task_coro = countdown_timer(
                                break_seconds_left, 
                                display_name, 
                                {},  # timers dict
                                selected_account=account,
                                user_id=user_id,
                                break_started_ts=break_started_ts
                            )
                            task = asyncio.create_task(task_coro)
                            
                            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
                            if user_id not in active_tasks:
                                active_tasks[user_id] = {}
                            active_tasks[user_id][task_name] = task
                            
                            break_tasks.append(task)
                        
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤
                        if break_tasks:
                            try:
                                await asyncio.gather(*break_tasks, return_exceptions=True)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–∞—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {e}")
                        
                        # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º - –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
                        
                    
                    elif accounts_at_limit and not accounts_completed and not accounts_on_break:
                        # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∏ –ø–µ—Ä–µ—Ä—ã–≤ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                        print(f"üîÑ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
                        if not is_minimized:
                            await log_to_telegram(user_id, f"üîÑ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...", "mailing")
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                        for account_data in resume_data["accounts"]:
                            if isinstance(account_data, dict):
                                account_data["message_count"] = 0
                                account_data["break_seconds_left"] = 0
                                account_data["break_until_timestamp"] = 0
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        save_resume_state(resume_data, user_id=user_id)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return
                    
                    elif total_progress < total_messages:
                        # –ï—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
                        print(f"üîÑ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {total_progress}/{total_messages}")
                        #if not is_minimized:
                        #    await log_to_telegram(user_id, f"üîÑ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {total_progress}/{total_messages}", "mailing")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å
                    if accounts_on_break:
                        break_status_message = "üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:\n"
                        for account in accounts_on_break:
                            # –ú–∏–≥—Ä–∏—Ä—É–µ–º username –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                            config = load_config(user_id)
                            config_accounts = config.get("accounts", []) if config else []
                            account = migrate_account_username(account, config_accounts)
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º break_until_timestamp –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                            break_until_timestamp = account.get('break_until_timestamp', 0)
                            
                            if break_until_timestamp > 0:
                                remaining_seconds = int(break_until_timestamp - time.time())
                                if remaining_seconds > 0:
                                    hours = remaining_seconds // 3600
                                    minutes = (remaining_seconds % 3600) // 60
                                    seconds = remaining_seconds % 60
                                    display_name = get_display_name(account)
                                    break_status_message += f"{display_name}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {hours:02d}:{minutes:02d}:{seconds:02d} üü°\n"
                                else:
                                    # Fallback –Ω–∞ break_seconds_left –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
                                    hours = account['break_seconds_left'] // 3600
                                    minutes = (account['break_seconds_left'] % 3600) // 60
                                    seconds = account['break_seconds_left'] % 60
                                    display_name = get_display_name(account)
                                    break_status_message += f"{display_name}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {hours:02d}:{minutes:02d}:{seconds:02d} üü°\n"
                            else:
                                # Fallback –Ω–∞ break_seconds_left –µ—Å–ª–∏ timestamp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                                hours = account['break_seconds_left'] // 3600
                                minutes = (account['break_seconds_left'] % 3600) // 60
                                seconds = account['break_seconds_left'] % 60
                                display_name = get_display_name(account)
                                break_status_message += f"{display_name}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {hours:02d}:{minutes:02d}:{seconds:02d} üü°\n"
                        
                        # –û—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    all_accounts = load_user_accounts(user_id)
                    print(f"üîç –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {[acc.get('phone') for acc in all_accounts]}")
                    print(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {selected_accounts}")
                    
                    selected_accounts_objects = [acc for acc in all_accounts if acc.get("phone") in selected_accounts]
                    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts_objects)}")
                    
                    if not selected_accounts_objects:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {selected_accounts}")
                        if not is_minimized:
                            await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "mailing")
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ fallback
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º API –¥–∞–Ω–Ω—ã–µ –∏–∑ config.json
                    config_path = get_user_dir(user_id, license_type) + "/config.json"
                    if not os.path.exists(config_path):
                        print(f"‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                        if not is_minimized:
                            await log_to_telegram(user_id, f"‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω", "mailing")
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return
                    
                    try:
                        with open(config_path, 'r', encoding='utf-8') as f:
                            config_data = json.load(f)
                        api_id = config_data.get("api_id")
                        api_hash = config_data.get("api_hash")
                        print(f"‚úÖ API –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: api_id={api_id}, api_hash={api_hash[:10]}...")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json: {e}")
                        if not is_minimized:
                            await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json", "mailing")
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return
                    
                    if not api_id or not api_hash:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –¥–∞–Ω–Ω—ã–µ –∏–∑ config.json")
                        if not is_minimized:
                            await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –¥–∞–Ω–Ω—ã–µ", "mailing")
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ fallback
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return
                    
                    #if not is_minimized:
                    #    await log_to_telegram(user_id, f"‚úÖ API –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...", "mailing")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    print(f"üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    mailing_params = load_mailing_parameters(user_id)
                    if not mailing_params:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        if not is_minimized:
                            await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏", "mailing")
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ fallback
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    template_list = mailing_params.get("templates", [])
                    template_index = mailing_params.get("template_index", 0)
                    selected_folder = mailing_params.get("selected_folder")
                    timers = mailing_params.get("timers", {})

                    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É—Å—Ç—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∏–∑ resume_process.json –∏ config.json
                    if not template_list or len(template_list) == 0:
                        print(f"üìã –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç –≤ mailing_parameters.json, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ config.json")
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ config.json –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        if selected_accounts_objects:
                            first_account = selected_accounts_objects[0]
                            template_list = get_templates_from_config(config_data, first_account.get('phone'))
                            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(template_list)} —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ config.json –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {first_account.get('phone')}")
                        else:
                            print(f"‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
                            if not is_minimized:
                                await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", "mailing")
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∫ fallback
                            await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                            return
                    
                    if not selected_folder:
                        print(f"üìã –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤ mailing_parameters.json, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ resume_process.json")
                        # –ë–µ—Ä–µ–º –ø–∞–ø–∫—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ resume_process.json
                        if "accounts" in resume_data and len(resume_data["accounts"]) > 0:
                            first_account = resume_data["accounts"][0]
                            if "folder" in first_account and first_account["folder"]:
                                selected_folder = first_account["folder"]
                                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–∞–ø–∫–∞ –∏–∑ resume_process.json: {selected_folder}")
                            else:
                                print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ resume_process.json")
                                if not is_minimized:
                                    await log_to_telegram(user_id, f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É", "mailing")
                                await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                                return
                        else:
                            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ resume_process.json")
                            if not is_minimized:
                                await log_to_telegram(user_id, f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É", "mailing")
                            await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                            return
                    
                    # –ï—Å–ª–∏ template_index –Ω–µ –∑–∞–¥–∞–Ω, –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ resume_process.json
                    if template_index is None:
                        print(f"üìã template_index –Ω–µ –∑–∞–¥–∞–Ω –≤ mailing_parameters.json, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ resume_process.json")
                        if "accounts" in resume_data and len(resume_data["accounts"]) > 0:
                            first_account = resume_data["accounts"][0]
                            if "template_index" in first_account:
                                template_index = first_account["template_index"]
                                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω template_index –∏–∑ resume_process.json: {template_index}")
                            else:
                                template_index = 0
                                print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω template_index –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0")
                        else:
                            template_index = 0
                            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω template_index –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0")
                    
                    if template_index >= len(template_list):
                        template_index = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ

                    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: —à–∞–±–ª–æ–Ω–æ–≤={len(template_list)}, –∏–Ω–¥–µ–∫—Å={template_index}, –ø–∞–ø–∫–∞={selected_folder}")
                    print(f"üìã –®–∞–±–ª–æ–Ω—ã: {template_list}")
                    print(f"üìã –ü–∞–ø–∫–∞: {selected_folder}")
                    #if not is_minimized:
                    #    await log_to_telegram(user_id, f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...", "mailing")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if user_id not in mailing_states:
                        mailing_states[user_id] = {}
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞
                    minimized = mailing_params.get("minimized", False)
                    
                    mailing_states[user_id].update({
                        "step": "running",
                        "selected_accounts": selected_accounts,
                        "template_mode": "resume",
                        "template_index": template_index,
                        "selected_folder": selected_folder,
                        "logging_enabled": not minimized,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞
                        "minimized": minimized,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
                        "alternate_templates": True,
                        "ignore_breaks": False,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                        "resume_state": resume_data
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º user_sessions –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                    if user_id not in user_sessions:
                        user_sessions[user_id] = {}
                    if "pushmux" not in user_sessions[user_id]:
                        user_sessions[user_id]["pushmux"] = {}
                    user_sessions[user_id]["pushmux"]["minimized"] = minimized
                    user_sessions[user_id]["pushmux"]["active"] = True
                    
                    print(f"üîß DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω user_sessions –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: minimized={minimized}, active=True")
                    print(f"üîß DEBUG: user_sessions[{user_id}] = {user_sessions[user_id]}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    save_reconnect_state()
                    
                    print(f"üîß DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ reconnect_state.json")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    #print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {len(selected_accounts_objects)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    #if not is_minimized:
                    #    await log_to_telegram(user_id, f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {len(selected_accounts_objects)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "mailing")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    tasks = []
                    for account in selected_accounts_objects:
                        try:
                            print(f"üîå –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')} ({account.get('name')})")
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            client = await get_or_create_client(user_id, account.get('name'), api_id, api_hash, license_type)
                            if not client:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}")
                                if not is_minimized:
                                    await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}", "mailing")
                                continue
                            
                            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}")
                            
                            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            account_templates = get_templates_from_config(config_data, account.get('phone'))
                            if not account_templates:
                                print(f"‚ùå –ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}")
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ resume_process.json
                            account_state = next((a for a in resume_data["accounts"] if a["phone"] == account.get("phone")), None)
                            if not account_state:
                                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}")
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            account_template_index = account_state.get("template_index", 0)
                            account_folder = account_state.get("folder")
                            account_message_count = account_state.get("message_count", 0)
                            account_chat_index = account_state.get("chat_index", 0)
                            
                            print(f"üìã –ê–∫–∫–∞—É–Ω—Ç {account.get('phone')}: —à–∞–±–ª–æ–Ω–æ–≤={len(account_templates)}, –∏–Ω–¥–µ–∫—Å={account_template_index}, –ø–∞–ø–∫–∞={account_folder}, —Å–æ–æ–±—â–µ–Ω–∏–π={account_message_count}, —á–∞—Ç_–∏–Ω–¥–µ–∫—Å={account_chat_index}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            if account_message_count >= 30:
                                print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.get('phone')} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ({account_message_count}/30), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
                            account_break_seconds_left = account_state.get("break_seconds_left", 0)
                            account_break_until_timestamp = account_state.get("break_until_timestamp", 0)
                            now = int(time.time())
                            
                            if account_break_until_timestamp and account_break_until_timestamp > now:
                                print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.get('phone')} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ –¥–æ {account_break_until_timestamp}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                            task = await start_task(
                                user_id,
                                f"mailing_{account.get('phone')}",
                                main_flow_resume(
                                    account,  # –ê–∫–∫–∞—É–Ω—Ç
                                    client,  # –ö–ª–∏–µ–Ω—Ç
                                    account_templates,  # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                    account_template_index,  # –ò–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                    account_folder,  # –ü–∞–ø–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                                    timers,  # –¢–∞–π–º–µ—Ä—ã
                                    account_chat_index,  # start_index - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ —á–∞—Ç–∞
                                    0,  # break_breaks
                                    not mailing_params.get("minimized", False),  # logging_enabled - –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
                                    True,  # alternate_templates_enabled
                                    user_id,
                                    False,  # ignore_breaks
                                    mailing_params.get("minimized", False)  # minimized - –ø–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
                                )
                            )
                            tasks.append(task)
                            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}")
                            
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}: {e}")
                            if not is_minimized:
                                await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('phone')}: {e}", "mailing")
                            continue
                    
                    if not tasks:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                        # –û—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –æ—Ç–∫–ª—é—á–∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
                        return
                    
                    #print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                    #if not is_minimized:
                    #    await log_to_telegram(user_id, f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏", "mailing")
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                    await asyncio.gather(*tasks, return_exceptions=True)
                    return
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ resume_process.json: {e}")
                if not is_minimized:
                    await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", "mailing")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        print("üîÑ –ù–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É")
        if not is_minimized:
            await log_to_telegram(user_id, "üîÑ –ù–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É", "mailing")
        # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ start_task –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
        return
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def auto_resume_autoresponder(user_id):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        await asyncio.sleep(0.5)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        if user_id not in autoresponder_states or not autoresponder_states[user_id].get("active"):
            return
        
        state = autoresponder_states[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å–≤–µ—Ä–Ω—É—Ç
        if state.get("minimized", False):
            print(f"üì± –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª —Å–≤–µ—Ä–Ω—É—Ç - –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
        
        selected_accounts = state.get("selected_accounts", [])
        
        # –ï—Å–ª–∏ selected_accounts –ø—É—Å—Ç—ã–µ, –Ω–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω - –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if not selected_accounts:
            print(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: selected_accounts –ø—É—Å—Ç—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å selected_accounts –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º postman_states - —Ç–∞–º –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ –∂–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if user_id in postman_states:
                postman_selected = postman_states[user_id].get("selected_accounts", [])
                if postman_selected:
                    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selected_accounts –∏–∑ postman_states: {postman_selected}")
                    selected_accounts = postman_selected
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                    autoresponder_states[user_id]["selected_accounts"] = selected_accounts
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
                    update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not selected_accounts:
                try:
                    all_accounts = load_user_accounts(user_id)
                    if all_accounts:
                        # –ë–µ—Ä–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                        all_phones = [acc.get("phone") for acc in all_accounts if acc.get("phone")]
                        if all_phones:
                            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selected_accounts –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {all_phones}")
                            selected_accounts = all_phones
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
                            autoresponder_states[user_id]["selected_accounts"] = selected_accounts
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
                            update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
        if not selected_accounts:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å selected_accounts –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫")
            autoresponder_states[user_id]["active"] = False
            update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
            return
        
        #await log_to_telegram(user_id, "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...", "autoresponder")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –º–æ–∂–µ—Ç —É–∂–µ –∏–º–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        stats = load_user_stats(user_id)
        if stats.get("autoresponder_messages", 0) > 0:
            print(f"üìä –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —É–∂–µ –∏–º–µ–µ—Ç {stats['autoresponder_messages']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
        await run_autoresponder(user_id, selected_accounts)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def auto_resume_mailboxer(user_id):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—á—Ç—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        await asyncio.sleep(0.3)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        if user_id not in postman_states or not postman_states[user_id].get("active"):
            return
        
        state = postman_states[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ—á—Ç–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞
        if state.get("minimized", False):
            print(f"üì± –ü–æ—á—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞ - –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
        
        selected_accounts = state.get("selected_accounts", [])
        selected_postman = state.get("selected_postman")
        notify_username = state.get("notify_username")
        
        if not selected_accounts or not selected_postman:
            return
        
        #await log_to_telegram(user_id, "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...", "mailboxer")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        license_type = detect_license_type(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        all_accounts = load_user_accounts(user_id)
        print(f"üîç –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {[acc.get('phone') for acc in all_accounts]}")
        print(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {selected_accounts}")
        
        selected_accounts_objects = [acc for acc in all_accounts if acc.get("phone") in selected_accounts]
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts_objects)}")
        
        postman_account = next((acc for acc in all_accounts if acc.get("phone") == selected_postman), None)
        
        if not postman_account:
            await log_to_telegram(user_id, f"‚ùå –ê–∫–∫–∞—É–Ω—Ç-–ø–æ—á—Ç–∞–ª—å–æ–Ω {selected_postman} –Ω–µ –Ω–∞–π–¥–µ–Ω", "mailboxer")
            print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç-–ø–æ—á—Ç–∞–ª—å–æ–Ω {selected_postman} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return
        
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç-–ø–æ—á—Ç–∞–ª—å–æ–Ω –Ω–∞–π–¥–µ–Ω: {postman_account.get('name')} ({postman_account.get('phone')})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ—á—Ç–∞ –º–æ–∂–µ—Ç —É–∂–µ –∏–º–µ—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        stats = load_user_stats(user_id)
        if stats.get("received_messages", 0) > 0:
            print(f"üìä –ü–æ—á—Ç–∞ —É–∂–µ –∏–º–µ–µ—Ç {stats['received_messages']} –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—á—Ç—É
        await run_mailboxer(user_id, license_type, selected_accounts_objects, postman_account, None, notify_username)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def auto_save_states():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    while True:
        try:
            await asyncio.sleep(1)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤–º–µ—Å—Ç–æ 30 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            for user_id in list(autoresponder_states.keys()):
                state = autoresponder_states[user_id]
                if state.get("active") and not state.get("selected_accounts"):
                    print(f"‚ö†Ô∏è –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ selected_accounts –ø—É—Å—Ç—ã–µ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                    state["active"] = False
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å selected_accounts –∏–∑ postman_states
                    if user_id in postman_states and postman_states[user_id].get("selected_accounts"):
                        state["selected_accounts"] = postman_states[user_id]["selected_accounts"]
                        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã selected_accounts –∏–∑ postman_states: {state['selected_accounts']}")
            
            save_reconnect_state()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            await asyncio.sleep(5)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 60












# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
user_sessions = {}
user_states = {}  # user_id -> state ("wait_license", "authorized")
user_languages = {}  # user_id -> "ru" or "en"
authorized_users = set()
licenses = {}
mailing_selected_accounts = {}
last_bot_message_id = {}  # user_id -> message_id
blacklisted_titles = ["FRESH", "TEST", "TEST1", "TEST2", "SEARCH", "SHORT", "HAND/SEARCH", "üîµ", "BAN-WORD", "HAND", "ESCROW", "BAN WORD"]

# –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
reconnection_delay = 5  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

# –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
active_tasks = {}  # {user_id: {task_name: asyncio.Task}}
active_clients = {}  # {user_id: {session_name: TelegramClient}}
task_status = {}  # {user_id: {task_name: "running"|"stopped"|"minimized"}}
log_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ª–æ–≥–æ–≤
mailing_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
postman_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—á—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
autoresponder_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
autoresponder_last_response = {}  # –ê–Ω—Ç–∏—Å–ø–∞–º: user_id -> {account_phone -> {chat_id: timestamp}}

# –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏
client_handlers = {}  # {user_id: {session_name: {handler_name: handler_func}}}
client_event_handlers = {}  # {user_id: {session_name: [handler_info]}}
client_lock = asyncio.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∏–µ–Ω—Ç–∞–º

# –ó–∞–¥–∞—á–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
auto_resume_tasks = {}  # {user_id: {service_type: asyncio.Task}}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è aiogram
class UserStates(StatesGroup):
    waiting_language = State()
    waiting_license = State()
    authorized = State()
    waiting_account_selection = State()
    waiting_template_selection = State()
    waiting_folder_selection = State()
    waiting_postman_selection = State()
    waiting_group_id = State()
    waiting_notify_username = State()
    waiting_ignore_folders_choice = State()
    waiting_ignore_folders_selection = State()
    waiting_ignore_chats_choice = State()
    waiting_ignore_chats_folder_selection = State()
    waiting_ignore_chats_selection = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
async def get_or_create_client(user_id, session_name, api_id, api_hash, license_type=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç TelegramClient –¥–ª—è —Å–µ—Å—Å–∏–∏ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
    async with client_lock:
        if user_id not in active_clients:
            active_clients[user_id] = {}
        
        if session_name not in active_clients[user_id]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if license_type is None:
                license_type = detect_license_type(user_id)
            
            session_path = get_session_path(user_id, "bot", session_name, license_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            if not os.path.exists(session_path):
                await log_to_telegram(user_id, f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {session_name}", "client_manager")
                return None
            
            client = TelegramClient(session_path, api_id, api_hash)
            
            try:
                await client.connect()
                if not await client.is_user_authorized():
                    await client.disconnect()
                    await log_to_telegram(user_id, f"–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {session_name}", "client_manager")
                    return None
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if user_id not in client_handlers:
                    client_handlers[user_id] = {}
                if user_id not in client_event_handlers:
                    client_event_handlers[user_id] = {}
                
                client_handlers[user_id][session_name] = {}
                client_event_handlers[user_id][session_name] = []
                
                active_clients[user_id][session_name] = client
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await connection_manager.start_monitoring(user_id)
                            
            except Exception as e:
                await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {session_name}: {e}", "client_manager")
                return None
        
        return active_clients[user_id][session_name]

async def add_event_handler(user_id, session_name, event_type, handler_func):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫ –∫–ª–∏–µ–Ω—Ç—É"""
    async with client_lock:
        if user_id not in active_clients or session_name not in active_clients[user_id]:
            return False
        
        client = active_clients[user_id][session_name]
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–ª–∏–µ–Ω—Ç—É
            client.add_event_handler(handler_func, event_type)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if user_id not in client_event_handlers:
                client_event_handlers[user_id] = {}
            if session_name not in client_event_handlers[user_id]:
                client_event_handlers[user_id][session_name] = []
            
            client_event_handlers[user_id][session_name].append({
                'event_type': event_type,
                'handler': handler_func
            })
            
            #await log_to_telegram(user_id, f"–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è {session_name}", "client_manager")
            return True
            
        except Exception as e:
            await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è {session_name}: {e}", "client_manager")
            return False

async def remove_event_handlers(user_id, session_name):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    async with client_lock:
        if user_id not in client_event_handlers or session_name not in client_event_handlers[user_id]:
            return
        
        if user_id not in active_clients or session_name not in active_clients[user_id]:
            return
        
        client = active_clients[user_id][session_name]
        
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            for handler_info in client_event_handlers[user_id][session_name]:
                client.remove_event_handler(handler_info['handler'], handler_info['event_type'])
            
            client_event_handlers[user_id][session_name].clear()
            #await log_to_telegram(user_id, f"–£–¥–∞–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è {session_name}", "client_manager")
            
        except Exception as e:
            await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è {session_name}: {e}", "client_manager")

async def disconnect_client(user_id, session_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    async with client_lock:
        if user_id not in active_clients or session_name not in active_clients[user_id]:
            return
        
        try:
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            await remove_event_handlers(user_id, session_name)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = active_clients[user_id][session_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
            if client.is_connected():
                await client.disconnect()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            del active_clients[user_id][session_name]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if user_id in client_handlers and session_name in client_handlers[user_id]:
                del client_handlers[user_id][session_name]
            if user_id in client_event_handlers and session_name in client_event_handlers[user_id]:
                del client_event_handlers[user_id][session_name]
            
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {session_name} –æ—Ç–∫–ª—é—á–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {session_name}: {e}")

async def disconnect_all_clients(user_id):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with client_lock:
        if user_id not in active_clients:
            return
        
        session_names = list(active_clients[user_id].keys())
        for session_name in session_names:
            await disconnect_client(user_id, session_name)

async def stop_all_mailing_tasks(user_id):
    """–ë—ã—Å—Ç—Ä–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in active_tasks:
        return
    
    mailing_tasks = [task_name for task_name in active_tasks[user_id].keys() if task_name.startswith("mailing_")]
    if not mailing_tasks:
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    tasks_to_cancel = []
    for task_name in mailing_tasks:
        task = active_tasks[user_id][task_name]
        tasks_to_cancel.append(task)
        del active_tasks[user_id][task_name]
        if task_name in task_status.get(user_id, {}):
            task_status[user_id][task_name] = "stopped"
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for task in tasks_to_cancel:
        task.cancel()

async def stop_task(user_id, task_name):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É"""
    if user_id in active_tasks and task_name in active_tasks[user_id]:
        task = active_tasks[user_id][task_name]
        task.cancel()
        # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º –∏ —É–¥–∞–ª—è–µ–º
        del active_tasks[user_id][task_name]
        if task_name in task_status.get(user_id, {}):
            task_status[user_id][task_name] = "stopped"

async def start_task(user_id, task_name, coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
    if user_id not in active_tasks:
        active_tasks[user_id] = {}
    if user_id not in task_status:
        task_status[user_id] = {}
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
    if task_name in active_tasks[user_id]:
        await stop_task(user_id, task_name)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(coro)
    active_tasks[user_id][task_name] = task
    task_status[user_id][task_name] = "running"
    
    return task

async def telegram_logger():
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    while True:
        try:
            log_entry = await log_queue.get()
            if log_entry is None:  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                break
            
            user_id, message, task_name = log_entry
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            try:
                await bot.send_message(chat_id=user_id, text=message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")
            
            log_queue.task_done()
            
        except asyncio.CancelledError:
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ telegram_logger: {e}")
            
async def log_to_telegram(user_id, message, task_name="general"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ª–æ–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è task_name="mailing")
    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "bug_notification") –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–ª–∞–≥–∞ —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏
    if task_name == "mailing":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if user_id in mailing_states:
            state = mailing_states[user_id]
            if state.get("minimized", False):
                # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        if user_id in user_sessions:
            session = user_sessions[user_id].get("pushmux", {})
            if session.get("minimized", False):
                # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                return
    
    await log_queue.put((user_id, message, task_name))

async def safe_message_answer(message: types.Message, text: str, reply_markup=None, max_retries: int = 5):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö."""
    delay_seconds = 1.0
    for attempt in range(max_retries):
        try:
            return await message.answer(text, reply_markup=reply_markup)
        except (TelegramNetworkError, ConnectionError, asyncio.TimeoutError) as e:
            # –°–µ—Ç–µ–≤—ã–µ —Å–±–æ–∏: –∂–¥—ë–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(delay_seconds)
            delay_seconds = min(delay_seconds * 2, 11)
        except TelegramAPIError as e:
            # –ù–µ–ø–æ–ø—Ä–∞–≤–∏–º–∞—è –æ—à–∏–±–∫–∞ Telegram API ‚Äî –≤—ã—Ö–æ–¥–∏–º
            raise
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ –¥–∞—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Ä—É–∂—É
    return await message.answer(text, reply_markup=reply_markup)

async def edit_text_or_safe_send(message: types.Message, text: str, reply_markup=None):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (caption) –º–µ–¥–∏–∞, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç.
    –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ/–º–µ–¥–∏–∞)
    try:
        return await message.edit_caption(text, reply_markup=reply_markup)
    except TelegramAPIError as e_cap:
        cap_err = str(e_cap).lower()
        if "message is not modified" in cap_err:
            return message
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        try:
            return await message.edit_text(text, reply_markup=reply_markup)
        except TelegramAPIError as e_txt:
            txt_err = str(e_txt).lower()
            if "message is not modified" in txt_err:
                return message
            # –í –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
            return await safe_message_answer(message, text, reply_markup=reply_markup)

async def delete_and_send_image(message: types.Message, image_filenames, caption: str, reply_markup=None, user_id=None):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ img —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    –ï—Å–ª–∏ —Ñ–∞–π–ª(—ã) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    image_filenames –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É).
    user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    import asyncio
    from aiogram.exceptions import TelegramAPIError, TelegramNetworkError
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É
    if isinstance(image_filenames, str):
        candidates = [image_filenames]
    else:
        candidates = list(image_filenames)

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞/—Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–æ–≤–æ–µ)
    try:
        await message.delete()
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for filename in candidates:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è
        image_path = get_image_path(filename, user_id)
        full_path = Path(__file__).parent / image_path
        
        if full_path.exists():
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                photo_file = FSInputFile(str(full_path))
                if user_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                    timestamp = int(time.time())
                    photo_file.filename = f"{user_id}_{timestamp}_{os.path.basename(full_path)}"
                
                # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        sent_message = await bot.send_photo(
                            chat_id=message.chat.id,
                            photo=photo_file,
                            caption=caption,
                            reply_markup=reply_markup
                        )
                        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return sent_message
                    except TelegramNetworkError as e:
                        print(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {filename} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")
                        if attempt < max_retries - 1:
                            await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        else:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {filename} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                            break
                    except TelegramAPIError as e:
                        print(f"üö´ Telegram API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {filename}: {e}")
                        break
                    except Exception as e:
                        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {filename}: {e}")
                        break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞ {filename}: {e}")
                continue

    # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        sent_message = await safe_message_answer(message, caption, reply_markup=reply_markup)
        print(f"üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–ª–±—ç–∫")
        return sent_message
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return None

async def try_send_image(message: types.Message, image_filenames, caption: str, reply_markup=None, user_id=None):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç."""
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É
    if isinstance(image_filenames, str):
        candidates = [image_filenames]
    else:
        candidates = list(image_filenames)

    for filename in candidates:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è
        image_path = get_image_path(filename, user_id)
        full_path = Path(__file__).parent / image_path
        
        if full_path.exists():
            try:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=FSInputFile(str(full_path)),
                    caption=caption,
                    reply_markup=reply_markup
                )
            except Exception:
                pass
            return

def get_mailing_active_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–æ–ø ‚≠ïÔ∏è"), KeyboardButton(text="–°–≤–µ—Ä–Ω—É—Ç—å ‚Ü™Ô∏è")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_autosub_active_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


def truncate_preview(text: str, max_length: int = 40) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ max_length, –æ–±—Ä–µ–∑–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–æ–µ—Ç–æ—á–∏–µ.
    –ü—É—Å—Ç—ã–µ/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ '...'.
    """
    try:
        if not isinstance(text, str):
            return "..."
        text_stripped = text.strip()
        if not text_stripped:
            return "..."
        if len(text_stripped) <= max_length:
            return text_stripped
        return text_stripped[: max_length - 3] + "..."
    except Exception:
        return "..."

def get_mailing_minimized_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤–µ—Ä–Ω—É—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.keyboard = [
        [KeyboardButton(text="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å üìã"), KeyboardButton(text="–°—Ç–æ–ø ‚≠ïÔ∏è")]
    ]
    return markup

async def async_mailing_flow(user_id, license_type):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ–Ω—é
        if not is_license_valid(user_id):
            await handle_access_expired(user_id)
            return
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        log_mailing_activity(user_id, "launch")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user_id not in mailing_states:
            await log_to_telegram(user_id, "–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", "mailing")
            return
        
        state = mailing_states[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = load_user_accounts(user_id)
        if not accounts:
            await log_to_telegram(user_id, "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", "mailing")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        if not api_id or not api_hash:
            await log_to_telegram(user_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω API_ID –∏–ª–∏ API_HASH.", "mailing")
            return
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "running", –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        if state["step"] == "running":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state["active"] = True
            await execute_mailing(user_id, state, accounts, api_id, api_hash)
            return
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
        await log_to_telegram(user_id, "–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏...", "mailing")
        
        # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ "running"
        while state["step"] != "running":
            if not is_license_valid(user_id):
                await handle_access_expired(user_id)
                return
            await asyncio.sleep(1)
            if user_id not in mailing_states:
                await log_to_telegram(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", "mailing")
                return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state["active"] = True
        await execute_mailing(user_id, state, accounts, api_id, api_hash)
        
    except asyncio.CancelledError:
        #await log_to_telegram(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", "mailing")
        raise
    except Exception as e:
        await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}", "mailing")

async def execute_mailing(user_id, state, accounts, api_id, api_hash):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    try:
        # –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –∏—Å—Ç—ë–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ/—Ç—Ä–∏–∞–ª–µ
        if not is_license_valid(user_id):
            await handle_access_expired(user_id)
            return
        selected_account_phones = state.get("selected_accounts", [])
        
        if not selected_account_phones:
            if not state.get("minimized", False):
                await log_to_telegram(user_id, "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", "mailing")
            return
        
        # –ï—Å–ª–∏ accounts - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if accounts and isinstance(accounts[0], str):
            config = load_config(user_id)
            if not config or "accounts" not in config:
                if not state.get("minimized", False):
                    await log_to_telegram(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", "mailing")
                return
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º
            selected_accounts = [acc for acc in config["accounts"] if acc.get('phone') in selected_account_phones]
        else:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º
            selected_accounts = [acc for acc in accounts if acc.get('phone') in selected_account_phones]
        
        if not selected_accounts:
            if not state.get("minimized", False):
                await log_to_telegram(user_id, "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", "mailing")
            return
        
        
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        mailing_tasks = []
        
        for account in selected_accounts:
            session_name = account.get('name') or account.get('phone')
            
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            task = asyncio.create_task(
                send_mailing_from_account(user_id, account, state, api_id, api_hash, selected_accounts)
            )
            mailing_tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏
        try:
            await asyncio.gather(*mailing_tasks, return_exceptions=True)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–∞
            if not state.get("minimized", False):
                await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", "mailing")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        state["step"] = "completed"
        state["active"] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–∞
        if not state.get("minimized", False):
            await log_to_telegram(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", "mailing")
        
    except asyncio.CancelledError:
        #await log_to_telegram(user_id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", "mailing")
        raise
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–∞
        if not state.get("minimized", False):
            await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", "mailing")

async def check_safety_guard_1(user_id, resume_state):
    """
    –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å: —Ä–µ—à–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä–µ–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é (–µ—Å—Ç—å, —á—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å)
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    return bool(resume_state and resume_state.get("accounts"))

async def show_safety_guard_1_menu(user_id, resume_state):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö
    """
    now = int(time.time())
    accounts = resume_state["accounts"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
    limits_list = [
        f"{acc['nickname']} - {acc.get('message_count', 0)}/30"
        for acc in accounts
        if (not acc.get("break_until_timestamp")) and acc.get("message_count", 0) < 30
    ]
    
    breaks_list = []
    for acc in accounts:
        if acc.get("break_until_timestamp") and acc["break_until_timestamp"] > now:
            remaining = acc['break_until_timestamp'] - now
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            seconds = remaining % 60
            breaks_list.append(f"{acc['nickname']} - {hours:02d}:{minutes:02d}:{seconds:02d}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üöß     üöß     üöß     üöß     üöß     üöß     üöß\n\n"
    
    if limits_list:
        message_text += "–õ–∏–º–∏—Ç—ã:\n"
        for line in limits_list:
            message_text += f"‚Ä¢ {line}\n"
        message_text += "\n"
    
    if breaks_list:
        message_text += "–ü–µ—Ä–µ—Ä—ã–≤—ã:\n"
        for line in breaks_list:
            message_text += f"‚Ä¢ {line}\n"
        message_text += "\n"
    
    message_text += "üöß     üöß     üöß     üöß     üöß     üöß     üöß"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≥ –ñ–¥–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data="safety_guard_wait")],
        [InlineKeyboardButton(text="üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="safety_guard_force")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã", callback_data="safety_guard_reset")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_summary_yes")]
    ])
    
    return message_text, markup

async def send_mailing_from_account(user_id, account, state, api_id, api_hash, selected_accounts=None):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É CLI-–≤–µ—Ä—Å–∏–∏"""
    session_name = account.get('name') or account.get('phone')
    try:
        if not is_license_valid(user_id):
            await handle_access_expired(user_id)
            return

        license_type = detect_license_type(user_id)
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        if not client:
            await log_to_telegram(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {session_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.", "mailing")
            return

        templates = get_templates_from_config(load_config(user_id), account.get('phone'))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ resume_process.json
        resume_state = load_resume_state(user_id=user_id)
        account_phone = account.get('phone')
        
        # üõ°Ô∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–ó resume_process.json
        # –ü—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –í–°–ï–ì–î–ê –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞, –Ω–∏–∫–∞–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π!
        resume_state = load_resume_state(user_id=user_id)
        message_count = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if resume_state and "accounts" in resume_state:
            acc_state = next((a for a in resume_state["accounts"] if a["phone"] == account_phone), None)
            if acc_state:
                template_index = acc_state.get("template_index", 0)
                selected_folder = acc_state.get("folder", {"id": 1, "title": "1"})
                start_index = acc_state.get("chat_index", 0)
                message_count = acc_state.get("message_count", 0)
                break_seconds_left = acc_state.get("break_seconds_left", 0)
                break_until_timestamp = acc_state.get("break_until_timestamp")
            else:
                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ resume_state, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                template_index = 0
                selected_folder = {"id": 1, "title": "1"}
                start_index = 0
                message_count = 0
                break_seconds_left = 0
                break_until_timestamp = 0
        else:
            # –ï—Å–ª–∏ resume_state –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            template_index = 0
            selected_folder = {"id": 1, "title": "1"}
            start_index = 0
            message_count = 0
            break_seconds_left = 0
            break_until_timestamp = 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º template_index –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –Ω–µ resume
        template_mode = state.get("template_mode")
        if template_mode is None:
            template_mode = "select"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º select
        if template_mode != "resume":
            if template_mode == "custom":
                # –í —Ä–µ–∂–∏–º–µ custom –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                account_templates = state.get("account_templates", {})
                template_choice = account_templates.get(account_phone)
                if isinstance(template_choice, str) and template_choice.startswith("IDX_"):
                    try:
                        template_index = int(template_choice.replace("IDX_", ""))
                    except Exception:
                        template_index = 0
                elif template_choice == "T1":
                    template_index = 0
                elif template_choice == "T2":
                    template_index = 1
                else:
                    template_index = 0
            elif template_mode == "select":
                # –í —Ä–µ–∂–∏–º–µ select –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
                if selected_accounts:
                    try:
                        account_index = selected_accounts.index(account)
                        template_type = state.get("template_type", "T1")
                        if template_type == "T1":
                            template_index = account_index % 2  # 0,1,0,1...
                        else:  # T2
                            template_index = (account_index + 1) % 2  # 1,0,1,0...
                    except ValueError:
                        template_index = 0
                else:
                    template_index = state.get("template_index", 0)
        
        if template_index is None:
            template_index = 0

        alternate_templates = state.get("alternate_templates", False)
        if alternate_templates and len(templates) > 1 and selected_accounts:
            try:
                account_index = selected_accounts.index(account)
                template_index = account_index % len(templates)
            except ValueError:
                template_index = 0

        if template_index >= len(templates):
            template_index = 0
        template_list = templates
        folders = await list_folders(client)
        if not folders:
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        ignore_settings = load_ignore_settings(user_id)
        ignore_folders = ignore_settings.get("ignore_folders", {})
        ignore_chats = ignore_settings.get("ignore_chats", {})
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö
        filtered_folders = filter_folders_by_ignore(folders, ignore_folders, account_phone)
        
        if not filtered_folders:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –Ω–µ resume
        if template_mode != "resume":
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—ë —Å–µ–π—á–∞—Å
            if selected_folder.get("folder_index") is not None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–∞–ø–∫–∏
                folder_keys = list(filtered_folders.keys())
                folder_index = selected_folder.get("folder_index", 0)
                if folder_index >= len(folder_keys):
                    folder_index = 0  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
                selected_folder = filtered_folders[folder_keys[folder_index]]
            elif selected_folder.get("id") == 1 and selected_folder.get("title") == "1":
                # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                folder_keys = list(filtered_folders.keys())
                if template_mode == "select" and selected_accounts:
                    try:
                        account_index = selected_accounts.index(account)
                        folder_set = state.get("folder_set", "F1")
                        folder_offset = int(folder_set[1]) - 1  # F1=0, F2=1, F3=2, F4=3, F5=4
                        folder_index = (account_index + folder_offset) % len(folder_keys)
                        selected_folder = filtered_folders[folder_keys[folder_index]]
                    except (ValueError, IndexError):
                        selected_folder = filtered_folders[folder_keys[0]]
                else:
                    selected_folder = filtered_folders[folder_keys[0]]
            folder_keys = list(filtered_folders.keys())
        else:
            # –í —Ä–µ–∂–∏–º–µ resume –∏—â–µ–º –ø–∞–ø–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ —Å–ø–∏—Å–∫–µ –ø–∞–ø–æ–∫
            folder_keys = list(filtered_folders.keys())
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–∞–ø–∫–∏ –∏–∑ resume_state
            folder_index = selected_folder.get('folder_index', 0)
            if folder_index >= len(folder_keys):
                folder_index = 0  # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
            selected_folder = filtered_folders[folder_keys[folder_index]]
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ resume_process.json
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º folder_index –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        folder_keys = list(filtered_folders.keys())
        folder_index = 0
        for idx, (key, folder_info) in enumerate(filtered_folders.items()):
            if folder_info['id'] == selected_folder['id']:
                folder_index = idx
                break
        
        folder_for_save = {"folder_index": folder_index, "title": selected_folder["title"]}
        update_account_resume_state(
            account_phone, 
            template_index=template_index, 
            folder=folder_for_save, 
            chat_index=start_index, 
            message_count=message_count,
            break_seconds_left=break_seconds_left,
            break_until_timestamp=break_until_timestamp,
            user_id=user_id
        )

        timers = {}
        logging_enabled = state.get("logging_enabled", True)
        alternate_templates_enabled = state.get("alternate_templates", True)

        # –î–æ–±–∞–≤–ª—è–µ–º nickname –≤ –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CLI-–≤–µ—Ä—Å–∏–µ–π
        account_with_nickname = account.copy()
        account_with_nickname['nickname'] = account.get('nickname', account.get('name', account.get('phone')))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É CLI-–≤–µ—Ä—Å–∏–∏
        if template_mode == "resume" and resume_state:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ ignore_breaks –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ)
            ignore_breaks = False  # –í—Å–µ–≥–¥–∞ False –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            minimized = state.get("minimized", False)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
            await main_flow_resume(
                account_with_nickname, client, template_list, template_index, selected_folder, timers,
                start_index, break_seconds_left, logging_enabled, alternate_templates_enabled, user_id, ignore_breaks, minimized
            )
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            minimized = state.get("minimized", False)  # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
            await main_flow(
                account_with_nickname, client, template_list, template_index, selected_folder, timers,
                logging_enabled, start_index, message_count, alternate_templates_enabled, user_id, minimized
            )

    except Exception as e:
        await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}: {e}", "mailing")


def get_accounts_menu(user_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    license_type = user_states.get(f"{user_id}_license_type")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è owner –∏ admin - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not license_type:
        license_type = detect_license_type(user_id)
        if license_type in ["owner", "admin"]:
            user_states[f"{user_id}_license_type"] = license_type
    
    sessions_count = get_sessions_count(user_id)
    
    if license_type in ["owner", "admin"]:
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üÜï", callback_data="add_account")])
    elif license_type == "trial":
        # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º–∞–∫—Å–∏–º—É–º 3 –∞–∫–∫–∞—É–Ω—Ç–∞
        max_allowed = get_max_sessions_for_license(user_id)
        markup.inline_keyboard.append([InlineKeyboardButton(text=f"               –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üÜï     ({sessions_count}/{max_allowed})", callback_data="add_account")])
    else:
        max_allowed = get_max_sessions_for_license(user_id)
        markup.inline_keyboard.append([InlineKeyboardButton(text=f"               –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üÜï     ({sessions_count}/{max_allowed})", callback_data="add_account")])
    
    markup.inline_keyboard.append([InlineKeyboardButton(text="–î–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üöÆ", callback_data="deauth_account")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")])
    return markup

def get_deauth_accounts_menu(user_id):
    accounts = load_user_accounts(user_id)
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    if not accounts:
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_accounts_menu")])
        return markup
    for acc in accounts:
        if acc.get("username"):
            label = f"@{acc['username']}"
        elif acc.get("name"):
            label = acc["name"]
        else:
            label = acc.get("phone")
        markup.inline_keyboard.append([InlineKeyboardButton(text=label, callback_data=f"deauth_{acc.get('phone')}")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_accounts_menu")])
    return markup

def get_accounts_manage_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    # 1. –í —Å–∞–º–æ–º –≤–µ—Ä—Ö—É –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–∫–∫–∞—É–Ω—Ç—ã üë•", callback_data="accounts_menu")])
    # 2. –ù–∏–∂–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üßë‚Äçüíª", callback_data="message_mailing"),
        InlineKeyboardButton(text="–ü–æ—á—Ç–∞ üì®", callback_data="postman")
    ])
    # 3. –ù–∏–∂–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ üìº", callback_data="autoresponder"),
        InlineKeyboardButton(text="–ú—É–ª—å—Ç–∏—Ç—É–ª ‚öíÔ∏è", callback_data="multitool")
    ])
    # 4. –ù–∏–∂–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–ü–∞—Ä—Å–∏–Ω–≥ üß≤", callback_data="parsing"),
        InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ üîç", callback_data="chat_search")
    ])
    # 5. –ù–∏–∂–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ üí¨", callback_data="autosubscribe"),
        InlineKeyboardButton(text="–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üìà ", callback_data="analytics")
    ])
    # 6. –í —Å–∞–º–æ–º –Ω–∏–∑—É –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_menu")])
    return markup

async def send_accounts_manage_menu_with_image(bot, chat_id, caption="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º manage.png"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = chat_id  # –í Telegram chat_id = user_id –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        stats_caption = get_user_stats_display(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        image_path = get_image_path("manage.png", user_id)
        full_path = Path(__file__).parent / image_path
        
        if full_path.exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –º–µ–Ω—é
            await bot.send_photo(
                chat_id=chat_id,
                photo=FSInputFile(str(full_path)),
                caption=stats_caption,
                reply_markup=get_accounts_manage_menu()
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=chat_id,
                text=stats_caption,
                reply_markup=get_accounts_manage_menu()
            )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=chat_id,
            text=caption,
            reply_markup=get_accounts_manage_menu()
        )

def get_main_inline_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ üïπÔ∏è", callback_data="manage_accounts")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ü§ù", callback_data="partner_program")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùì", callback_data="instructions")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Free NFT üéÅ", callback_data="free_nft")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ ü™™", callback_data="subscription")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–º–æ—â—å üÜò", url="https://t.me/crypto_andromeda")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í—ã–π—Ç–∏ ‚úñÔ∏è", callback_data="logout")])
    return markup

def get_logout_confirmation_menu():
    """–ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–î–∞", callback_data="logout_confirm"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="logout_cancel")
    ])
    return markup

def get_logout_confirmation_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="Yes", callback_data="logout_confirm"),
        InlineKeyboardButton(text="No", callback_data="logout_cancel")
    ])
    return markup

def get_accounts_for_templates_menu(user_id):
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")])
    return markup

def get_templates_list_menu(phone, templates):
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    for idx, _ in enumerate(templates, 1):
        markup.inline_keyboard.append([InlineKeyboardButton(text=f"–®–∞–±–ª–æ–Ω üìÑ #{idx}", callback_data=f"show_template|{phone}|{idx}")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω ‚ûï", callback_data=f"add_template|{phone}")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_templates_select_account")])
    return markup

def get_back_to_templates_select_account_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_templates_select_account")])
    return markup

back_menu_auth = InlineKeyboardMarkup(inline_keyboard=[])
back_menu_auth.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_accounts_menu")])

back_menu = InlineKeyboardMarkup(inline_keyboard=[])
back_menu.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_menu")])

def get_back_only_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")])
    return markup

def get_settings_menu():
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–°—Ç–∏–ª—å üé®", callback_data="change_style")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–Ø–∑—ã–∫ üá∫üá∏üá∑üá∫", callback_data="change_language")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üñºÔ∏è", callback_data="toggle_images")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_menu")])
    return markup

def get_settings_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Style üé®", callback_data="change_style")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Language üá∫üá∏üá∑üá∫", callback_data="change_language")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Images üñºÔ∏è", callback_data="toggle_images")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_menu")])
    return markup

def get_style_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Robo ü§ñ", callback_data="style_robo")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Fallout ‚ò¢Ô∏è", callback_data="style_fallout")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_settings")])
    return markup

def get_style_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Robo ü§ñ", callback_data="style_robo")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Fallout ‚ò¢Ô∏è", callback_data="style_fallout")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_settings")])
    return markup

def get_instructions_menu():
    """–ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="instruction_statistics")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üßë‚Äçüíª", callback_data="instruction_mailing")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ—á—Ç–∞ üì®", callback_data="instruction_postman")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ üìº", callback_data="instruction_autoresponder")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ú—É–ª—å—Ç–∏—Ç—É–ª ‚öíÔ∏è", callback_data="instruction_multitool")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–∞—Ä—Å–∏–Ω–≥ üß≤", callback_data="instruction_parsing")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ üîç", callback_data="instruction_chat_search")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ üí¨", callback_data="instruction_autosubscribe")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üìà ", callback_data="instruction_analytics")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_menu")])
    return markup

def mailing_message_menu(user_id=None):
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ "–†–∞—Å—Å—ã–ª–∫–∞"
    if user_id is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ mailing_states
        mailing_state = mailing_states.get(user_id, {})
        is_active = mailing_state.get("active", False)
        is_minimized = mailing_state.get("minimized", False)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ user_sessions –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        session_minimized = user_sessions.get(user_id, {}).get("pushmux", {}).get("minimized", False)
        
        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Å–≤–µ—Ä–Ω—É—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
        if is_active and (is_minimized or session_minimized):
            markup.inline_keyboard.append([InlineKeyboardButton(text="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å ‚Ü©Ô∏è", callback_data="mailing_expand")])
        else:
            # –ï—Å–ª–∏ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–°—Ç–∞—Ä—Ç ‚ñ∂Ô∏è"
            markup.inline_keyboard.append([InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç ‚ñ∂Ô∏è", callback_data="mailing_start")])
    else:
        # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–°—Ç–∞—Ä—Ç ‚ñ∂Ô∏è" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        markup.inline_keyboard.append([InlineKeyboardButton(text="–°—Ç–∞—Ä—Ç ‚ñ∂Ô∏è", callback_data="mailing_start")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–®–∞–±–ª–æ–Ω—ã üìù", callback_data="mailing_templates")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")])
    return markup

# --- 1. –ù–æ–≤—ã–π get_postman_menu ---
def get_postman_menu(user_id=None):
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    mailboxer_active = False
    if user_id is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á—Ç—ã –≤ postman_states
        postman_state = postman_states.get(user_id, {})
        mailboxer_active = postman_state.get("active", False)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ mailboxer –∞–∫—Ç–∏–≤–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏,
        # —Ç–æ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º (—ç—Ç–æ —Å–ª—É—á–∞–π –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
        if not mailboxer_active:
            session = user_sessions.get(user_id, {})
            mailboxer_active = "mailboxer" in session
    
    if mailboxer_active:
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚≠ïÔ∏è", callback_data="postman_stop")
        ])
    else:
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚úîÔ∏è", callback_data="postman_activate")
        ])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")
    ])
    return markup

def get_autoresponder_menu(user_id=None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º autoresponder_states –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if user_id and user_id not in autoresponder_states:
        autoresponder_states[user_id] = {"active": False, "selected_accounts": []}
        update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∏
    is_active = autoresponder_states.get(user_id, {}).get("active", False)
    selected_accounts = autoresponder_states.get(user_id, {}).get("selected_accounts", [])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ selected_accounts –ø—É—Å—Ç—ã–µ,
    # —Ç–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if is_active and not selected_accounts:
        print(f"‚ö†Ô∏è –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π, –Ω–æ selected_accounts –ø—É—Å—Ç—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
        if user_id in autoresponder_states:
            autoresponder_states[user_id]["active"] = False
            update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ autoresponder_states, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å active = False
            autoresponder_states[user_id] = {"active": False, "selected_accounts": []}
            update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
        is_active = False
    
    if is_active:
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚≠ïÔ∏è", callback_data="autoresponder_stop")
        ])
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã
        if user_id and has_autoresponder_templates(user_id):
            markup.inline_keyboard.append([
                InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚úîÔ∏è", callback_data="autoresponder_activate")
            ])
        else:
            markup.inline_keyboard.append([
                InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚úîÔ∏è", callback_data="autoresponder_no_templates")
            ])
    
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–®–∞–±–ª–æ–Ω—ã üìÑ", callback_data="autoresponder_templates")
    ])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")
    ])
    return markup

def get_autoresponder_accounts_menu(user_id, action="activate"):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    accounts = get_active_accounts_by_sessions(user_id)
    
    if action == "activate":
        selected_accounts = autoresponder_states.get(user_id, {}).get("selected_accounts", [])
        
        for acc in accounts:
            phone = acc.get("phone")
            if acc.get("username"):
                label = f"@{acc['username']}"
            elif acc.get("name"):
                label = acc["name"]
            else:
                label = phone
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤—ã–±—Ä–∞–Ω
            if phone in selected_accounts:
                label += " ‚úÖ"
                
            markup.inline_keyboard.append([
                InlineKeyboardButton(text=label, callback_data=f"autoresponder_toggle_account|{phone}")
            ])
        
        if accounts:
            markup.inline_keyboard.append([
                InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="autoresponder_select_all")
            ])
            markup.inline_keyboard.append([
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="autoresponder_confirm")
            ])
    else:  # templates
        for acc in accounts:
            phone = acc.get("phone")
            if acc.get("username"):
                label = f"@{acc['username']}"
            elif acc.get("name"):
                label = acc["name"]
            else:
                label = phone
                
            markup.inline_keyboard.append([
                InlineKeyboardButton(text=label, callback_data=f"autoresponder_account_templates|{phone}")
            ])
    
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="autoresponder")
    ])
    return markup
def get_autoresponder_account_template_menu(user_id, account_phone):
    """–ú–µ–Ω—é —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    
    template = get_autoresponder_template(user_id, account_phone)
    if template:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —à–∞–±–ª–æ–Ω–æ–º
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üóë", callback_data=f"autoresponder_delete_template|{account_phone}"),
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è", callback_data=f"autoresponder_edit_template|{account_phone}")
        ])
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ 
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="autoresponder_account_templates")
    ])
    return markup
    
def get_autoresponder_template_actions_menu(account_phone):
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —à–∞–±–ª–æ–Ω–æ–º"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üóë", callback_data=f"autoresponder_delete_template|{account_phone}"),
        InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è", callback_data=f"autoresponder_edit_template|{account_phone}")
    ])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="autoresponder_account_templates")])
    return markup

def get_language_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="RU üá∑üá∫", callback_data="language_ru"),
        InlineKeyboardButton(text="ENG üá∫üá∏", callback_data="language_en")
    ])
    return markup

def get_style_menu(language="ru", user_id=None):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_style = get_user_style(user_id) if user_id else None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∏–ª—è
    if current_style == "robo":
        style_text = "ü§ñ Robo"
    elif current_style == "fallout":
        style_text = "‚ò¢Ô∏è Fallout"
    else:
        style_text = "–ù–µ –≤—ã–±—Ä–∞–Ω"
    
    if language == "ru":
        title = f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo"),
            InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout")
        ])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_language")])
    else:
        title = f"Choose interface style:"
        markup.inline_keyboard.append([
            InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo"),
            InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout")
        ])
        markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_language")])
    
    return markup, title

def get_start_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í—Ö–æ–¥ üö™ ", callback_data="start_auth")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 24—á üß®", callback_data="free_trial")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ ‚òéÔ∏è", url="https://t.me/luxurydynasty")])
    return markup

def get_start_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Login üö™ ", callback_data="start_auth")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Free Trial 24h üß®", callback_data="free_trial")])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Contact Us ‚òéÔ∏è", url="https://t.me/luxurydynasty")])
    return markup


def get_back_to_start_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_start")])
    return markup

def get_back_to_start_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_start")])
    return markup

def get_back_to_referral_menu():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ("–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥?")"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_referral")])
    return markup

def get_back_to_referral_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —ç–∫—Ä–∞–Ω—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_referral")])
    return markup

def ensure_event_loop():
    import asyncio
    try:
        asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

def is_log_line(line):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
    return line.startswith("/ –£—Å–ø–µ—à–Ω–æ üü¢") or line.startswith("/ –ù–µ—É–¥–∞—á–Ω–æ üî¥")

def load_keys():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ key.json –∫–∞–∫ –µ—Å—Ç—å (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)."""
    if not os.path.exists(KEYS_FILE):
        return {}
    try:
        with open(KEYS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def load_key_groups():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º: owner, admin, pro, premium, basic, trial.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∫–ª—é—á–∞–º–∏-–≥—Ä—É–ø–ø–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏ —Å—Ç—Ä–æ–∫-–∫–ª—é—á–µ–π.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - –µ—Å–ª–∏ –≤ key.json –ª–µ–∂–∏—Ç —Å–ø–∏—Å–æ–∫, —Ç—Ä–∞–∫—Ç—É–µ–º –µ–≥–æ –∫–∞–∫ basic
    - –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≥—Ä—É–ø–ø–∞ 'user', —Å—á–∏—Ç–∞–µ–º –µ—ë basic
    """
    raw = load_keys()
    groups = {
        "owner": [],
        "admin": [],
        "pro": [],
        "premium": [],
        "basic": [],
        "trial": [],
    }
    try:
        if isinstance(raw, dict):
            for k in ["owner", "admin", "pro", "premium", "basic", "trial"]:
                if k in raw and isinstance(raw[k], list):
                    groups[k] = [str(x) for x in raw[k]]
            # –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è 'user'
            if "user" in raw and isinstance(raw["user"], list):
                groups["basic"] = list({*groups["basic"], *[str(x) for x in raw["user"]]})
        elif isinstance(raw, list):
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äì —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ basic
            groups["basic"] = [str(x) for x in raw]
    except Exception:
        pass
    return groups

def load_licenses():
    if not os.path.exists(LICENSE_FILE):
        return {}
    try:
        with open(LICENSE_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return {}
            licenses = json.loads(content)
            return licenses
    except Exception as e:
        return {}

def load_freetrial():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not os.path.exists("freetrial.json"):
        return {}
    try:
        with open("freetrial.json", "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return {}
            return json.loads(content)
    except Exception as e:
        return {}

def load_referrals():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã"""
    if not os.path.exists("referrals.json"):
        return {"referrals": []}
    try:
        with open("referrals.json", "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return {"referrals": []}
            return json.loads(content)
    except Exception as e:
        return {"referrals": []}

def save_referrals(referrals_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã"""
    try:
        with open("referrals.json", "w", encoding="utf-8") as f:
            json.dump(referrals_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è referrals.json: {e}")

def load_invites():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not os.path.exists("invites.json"):
        return {}
    try:
        with open("invites.json", "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return {}
            return json.loads(content)
    except Exception as e:
        return {}

def save_invites(invites_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open("invites.json", "w", encoding="utf-8") as f:
            json.dump(invites_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è invites.json: {e}")

def is_valid_referral_code(code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º"""
    referrals_data = load_referrals()
    return code in referrals_data.get("referrals", [])

def has_user_used_referral(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Ä–∞–Ω–µ–µ (–ø–æ –ª—é–±–æ–º—É –∫–æ–¥—É)"""
    try:
        invites_data = load_invites()
        user_id_str = str(user_id)
        for code, users in invites_data.items():
            if isinstance(users, dict) and user_id_str in users:
                return True
        return False
    except Exception:
        return False

def get_referral_bonus_seconds(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–Ω—É—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return 259200 if has_user_used_referral(user_id) else 0

def add_invite(referral_code, invited_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É"""
    invites_data = load_invites()
    invited_id_str = str(invited_id)
    current_time = int(time.time())
    
    if referral_code not in invites_data:
        invites_data[referral_code] = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ö—Ä–∞–Ω–∏–º –∏ unix, –∏ —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É —Å TZ
    invites_data[referral_code][invited_id_str] = {
        "activated_at": current_time,
        "date": _format_now_with_gmt()
    }
    save_invites(invites_data)

def find_referrer_by_code(code):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É"""
    # –¢–µ–ø–µ—Ä—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ –∫–æ–¥–∞ —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–∏ –∫–æ–¥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    return None

def get_referral_stats_by_code(code):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É"""
    invites_data = load_invites()
    if code in invites_data:
        return {
            "total_invited": len(invites_data[code]),
            "invited_users": invites_data[code],
            "referral_code": code
        }
    return None

def get_user_referral_expiry(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    invites_data = load_invites()
    current_time = int(time.time())
    
    for code, users in invites_data.items():
        if str(user_id) in users:
            activation_time = users[str(user_id)]
            # 72 —á–∞—Å–∞ = 259200 —Å–µ–∫—É–Ω–¥
            expiry_time = activation_time + 259200
            time_left = expiry_time - current_time
            
            if time_left > 0:
                return {
                    "referral_code": code,
                    "activation_time": activation_time,
                    "expiry_time": expiry_time,
                    "time_left": time_left,
                    "is_expired": False
                }
            else:
                return {
                    "referral_code": code,
                    "activation_time": activation_time,
                    "expiry_time": expiry_time,
                    "time_left": 0,
                    "is_expired": True
                }
    
    return None

def is_referral_expired(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    expiry_info = get_user_referral_expiry(user_id)
    if expiry_info:
        return expiry_info["is_expired"]
    return True  # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏—Å—Ç–µ–∫

def get_referral_time_left_formatted(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    expiry_info = get_user_referral_expiry(user_id)
    if not expiry_info or expiry_info["is_expired"]:
        return "–ò—Å—Ç–µ–∫"
    
    time_left = expiry_info["time_left"]
    hours = time_left // 3600
    minutes = (time_left % 3600) // 60
    seconds = time_left % 60
    
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

def get_user_style(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–µ–∫—É—â–∏–º license_type
    settings = load_user_settings(user_id)
    style = settings.get("style")
    
    # –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
    if not style:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
            license_type = detect_license_type(user_id)
            if license_type:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                user_states[f"{user_id}_license_type"] = license_type
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
                user_dir = get_user_dir(user_id, license_type, create_dir=False)
                settings_file = os.path.join(user_dir, "settings.json")
                if os.path.exists(settings_file):
                    with open(settings_file, "r", encoding="utf-8") as f:
                        settings = json.load(f)
                        style = settings.get("style")
                        if style:
                            return style
        except Exception:
            pass

        # –ï—Å–ª–∏ —Å—Ç–∏–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            user_dir = get_user_dir(user_id, None, create_dir=False)
            settings_file = os.path.join(user_dir, "settings.json")
            if os.path.exists(settings_file):
                with open(settings_file, "r", encoding="utf-8") as f:
                    settings = json.load(f)
                    style = settings.get("style")
        except Exception:
            pass
    
    return style

def set_user_style(user_id, style):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if style not in ["robo", "fallout"]:
        return False
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    settings = load_user_settings(user_id)
    settings["style"] = style
    success = update_user_settings(user_id, settings)
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
    if not success:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
            license_type = detect_license_type(user_id)
            if license_type:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                user_states[f"{user_id}_license_type"] = license_type
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
                user_dir = get_user_dir(user_id, license_type, create_dir=True)
                settings_file = os.path.join(user_dir, "settings.json")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                current_settings = {}
                if os.path.exists(settings_file):
                    try:
                        with open(settings_file, "r", encoding="utf-8") as f:
                            current_settings = json.load(f) or {}
                    except Exception:
                        current_settings = {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
                current_settings["style"] = style
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                with open(settings_file, "w", encoding="utf-8") as f:
                    json.dump(current_settings, f, ensure_ascii=False, indent=2)
                success = True
                print(f"–°—Ç–∏–ª—å {style} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É —Å —Ç–∏–ø–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ {license_type}")
            else:
                # –ï—Å–ª–∏ —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
                user_dir = get_user_dir(user_id, None, create_dir=True)
                settings_file = os.path.join(user_dir, "settings.json")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                current_settings = {}
                if os.path.exists(settings_file):
                    try:
                        with open(settings_file, "r", encoding="utf-8") as f:
                            current_settings = json.load(f) or {}
                    except Exception:
                        current_settings = {}
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
                current_settings["style"] = style
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                with open(settings_file, "w", encoding="utf-8") as f:
                    json.dump(current_settings, f, ensure_ascii=False, indent=2)
                success = True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            success = False
    
    return success

def get_image_path(image_name, user_id=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id is None:
        # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –±–µ–∑ —Å—Ç–∏–ª—è
        return f"img/{image_name}"
    
    style = get_user_style(user_id)
    
    # –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –±–µ–∑ —Å—Ç–∏–ª—è
    if not style:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Å—Ç–∏–ª—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (robo, fallout)
        for fallback_style in ["robo", "fallout"]:
            fallback_path = f"img/{fallback_style}/{image_name}"
            if os.path.exists(fallback_path):
                return fallback_path
        return f"img/{image_name}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫–µ —Å—Ç–∏–ª—è
    style_path = f"img/{style}/{image_name}"
    if os.path.exists(style_path):
        return style_path
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ —Å—Ç–∏–ª—è, –ø—Ä–æ–±—É–µ–º —Å—Ç–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for fallback_style in ["robo", "fallout"]:
        fallback_path = f"img/{fallback_style}/{image_name}"
        if os.path.exists(fallback_path):
            return fallback_path
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ ‚Äî –ø—É—Ç—å –±–µ–∑ —Å—Ç–∏–ª—è
    return f"img/{image_name}"

def format_referral_stats_for_display(user_id):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    stats = get_user_referral_stats(user_id)
    expiry_info = get_user_referral_expiry(user_id)
    
    if not stats["used_referral_codes"]:
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤"
    
    result = f"üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    
    for code_info in stats["used_referral_codes"]:
        code = code_info["code"]
        activation_time = code_info["activation_time"]
        expiry_time = code_info["expiry_time"]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        activation_date = time.strftime("%d.%m.%Y %H:%M", time.localtime(activation_time))
        expiry_date = time.strftime("%d.%m.%Y %H:%M", time.localtime(expiry_time))
        
        result += f"üîë –ö–æ–¥: {code}\n"
        result += f"üìÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {activation_date}\n"
        result += f"‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expiry_date}\n"
        
        if expiry_info and not expiry_info["is_expired"]:
            time_left = get_referral_time_left_formatted(user_id)
            result += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n"
        else:
            result += f"‚ùå –ò—Å—Ç–µ–∫\n"
        
        result += "\n"
    
    return result

def generate_referral_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"""
    import random
    import string
    
    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ 16 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=16))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
        if not is_valid_referral_code(code):
            return code

def add_referral_code_to_user(user_id, code):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã —Ç–µ–ø–µ—Ä—å –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
    pass

def get_user_referral_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É - –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ invites
    invites_data = load_invites()
    user_id_str = str(user_id)
    
    # –ò—â–µ–º, –∫–∞–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    used_codes = []
    total_invited = 0
    
    for code, users in invites_data.items():
        if user_id_str in users:
            entry = users[user_id_str]
            if isinstance(entry, dict):
                activation_time = entry.get("activated_at", 0)
            else:
                activation_time = int(entry) if isinstance(entry, int) else 0
            used_codes.append({
                "code": code,
                "activation_time": activation_time,
                "expiry_time": activation_time + 259200  # 72 —á–∞—Å–∞
            })
            total_invited += 1
    
    return {
        "used_referral_codes": used_codes,
        "total_invited": total_invited
    }

def get_referral_menu():
    """–ú–µ–Ω—é –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data="enter_referral"),
        InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_referral")
    ])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_start")
    ])
    return markup

def get_referral_menu_en():
    """–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω—é –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="Enter referral code", callback_data="enter_referral"),
        InlineKeyboardButton(text="Skip", callback_data="skip_referral")
    ])
    markup.inline_keyboard.append([
        InlineKeyboardButton(text="Back üîô", callback_data="back_to_start")
    ])
    return markup

def load_user_languages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ settings.json.

    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: –µ—Å–ª–∏ –µ—Å—Ç—å legacy language.json –∏ –Ω–µ—Ç settings.json,
    —á–∏—Ç–∞–µ–º —è–∑—ã–∫ –∏–∑ language.json.
    """
    all_languages = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    root = get_project_root()
    user_base_dir = os.path.join(root, "user")
    
    if os.path.exists(user_base_dir):
        for item in os.listdir(user_base_dir):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∫ –∏–∑ –ø–∞–ø–æ–∫ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
            if item.endswith(("_trial", "_pro", "_premium", "_basic", "_admin", "_owner")) or item.isdigit():
                user_id = item.split("_")[0] if "_" in item else item
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                settings_file = os.path.join(user_base_dir, item, "settings.json")
                # Legacy —Ñ–æ—Ä–º–∞—Ç
                language_file = os.path.join(user_base_dir, item, "language.json")
                try:
                    if os.path.exists(settings_file):
                        with open(settings_file, "r", encoding="utf-8") as f:
                            content = f.read().strip()
                            if content:
                                data = json.loads(content)
                                all_languages[user_id] = data.get("language", "ru")
                    elif os.path.exists(language_file):
                        with open(language_file, "r", encoding="utf-8") as f:
                            content = f.read().strip()
                            if content:
                                data = json.loads(content)
                                all_languages[user_id] = data.get("language", "ru")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ {item}: {e}")
    
    return all_languages

def save_user_languages():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ settings.json –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –£–±–∏—Ä–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª - —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        # with open("user_languages.json", "w", encoding="utf-8") as f:
        #     json.dump(user_languages, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, language in user_languages.items():
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É—Ñ—Ñ–∏–∫—Å–Ω—É—é –ø–∞–ø–∫—É, –∏–Ω–∞—á–µ –≤ plain
                root = get_project_root()
                user_base_dir = os.path.join(root, "user")
                target_dir = None
                for suf in ("_owner", "_admin", "_pro", "_premium", "_basic", "_trial"):
                    candidate = os.path.join(user_base_dir, f"{user_id}{suf}")
                    if os.path.isdir(candidate):
                        target_dir = candidate
                        break
                if target_dir is None:
                    target_dir = os.path.join(user_base_dir, str(user_id))
                    os.makedirs(target_dir, exist_ok=True)

                settings_file = os.path.join(target_dir, "settings.json")
                settings = {"language": language}
                with open(settings_file, "w", encoding="utf-8") as f:
                    json.dump(settings, f, ensure_ascii=False, indent=2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è settings.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def get_user_language(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ settings.json. –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    settings = load_user_settings(user_id)
    return settings.get("language", user_languages.get(user_id, "ru"))

def set_user_language(user_id, language):
    """–°—Ç–∞–≤–∏—Ç language –≤ settings.json. –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    ok = update_user_settings(user_id, {"language": language})
    if ok:
        user_languages[user_id] = language
    return ok

def save_single_user_language(user_id, language):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç language —á–µ—Ä–µ–∑ update_user_settings –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥–∏. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏."""
    ok = update_user_settings(user_id, {"language": language})
    if ok:
        user_languages[user_id] = language
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –ª–æ–≥–∞—Ö
        update_user_main_info(user_id, language=language)
    return ok

async def send_bug_message_to_all():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–∞—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        users_to_notify = list(user_languages.keys())
        
        if not users_to_notify:
            print("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö")
            return
        
        print(f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        for user_id in users_to_notify:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_lang = user_languages.get(user_id, "ru")
                
                if user_lang == "ru":
                    message_text = "‚ùóÔ∏è –ó–∞–º–µ—Ç–∏–ª–∏ –±–∞–≥ –ª–∏–±–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–æ–≥–∏–∫–∏ –≤ –∫–∞–∫–∏—Ö-—Ç–æ –∫–Ω–æ–ø–∫–∞—Ö, –≤—ã–±–æ—Ä–∫–∞—Ö –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö ? –°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º: @crypto_andromeda"
                else:
                    message_text = "‚ùóÔ∏è Found a bug or missing logic in some buttons, selections or functions? Let us know: @crypto_andromeda"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ log_to_telegram
                # task_name="bug_notification" - —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–∞–≤–∏–ª–∞ —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                # –°–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–ª–∞–≥–∞ minimized
                await log_to_telegram(user_id, message_text, "bug_notification")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–≥–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö: {e}")

async def bug_message_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö –∫–∞–∂–¥—ã–µ 24-72 —á–∞—Å–∞"""
    print("üîî –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö...")
    
    while True:
        try:
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 24 –¥–æ 72 —á–∞—Å–æ–≤
            import random
            hours = random.uniform(24, 72)
            seconds = int(hours * 3600)
            
            print(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–≥–∞—Ö —á–µ—Ä–µ–∑ {hours:.1f} —á–∞—Å–æ–≤ ({seconds} —Å–µ–∫—É–Ω–¥)")
            await asyncio.sleep(seconds)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await send_bug_message_to_all()
            
        except asyncio.CancelledError:
            print("üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö: {e}")
            await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

def save_freetrial(freetrial_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open("freetrial.json", "w", encoding="utf-8") as f:
            json.dump(freetrial_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è freetrial.json: {e}")

def reconcile_freetrial_sessions(user_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ sessions –≤ freetrial.json —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏–∑ user/<id>_trial/config.json"""
    try:
        # –ü—Ä–∏–º–µ–Ω–∏–º–æ —Ç–æ–ª—å–∫–æ –¥–ª—è trial
        if user_states.get(f"{user_id}_license_type") != "trial":
            return
        ft = load_freetrial()
        user_key = str(user_id)
        if user_key not in ft:
            return
        accounts = load_user_accounts(user_id)
        expected_names = set()
        for acc in accounts:
            name_or_phone = acc.get("name") or acc.get("phone")
            if name_or_phone:
                expected_names.add(name_or_phone)
        sessions = ft[user_key].get("sessions", [])
        new_sessions = [s for s in sessions if s in expected_names]
        if new_sessions != sessions:
            ft[user_key]["sessions"] = new_sessions
            save_freetrial(ft)
            print(f"‚úÖ [SYNC] freetrial.json –æ—á–∏—â–µ–Ω: {sessions} -> {new_sessions}")
    except Exception as e:
        print(f"‚ö†Ô∏è [SYNC] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ freetrial.json: {e}")

def update_freetrial(user_id):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
    licenses = load_licenses()
    if str(user_id) in licenses:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—è, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é, –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è")
        return None
    
    freetrial_data = load_freetrial()
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º activated_at (–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    if str(user_id) not in freetrial_data:
        now = int(time.time())
        freetrial_data[str(user_id)] = {
            "activated_at": now,
            "date": _format_now_with_gmt(),
            "sessions": [],
            "authorized": True
        }
        save_freetrial(freetrial_data)
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ —Å unix timestamp –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        update_user_main_info(user_id, freetrial=now)
        
        # –°–æ–∑–¥–∞–µ–º config.json —Å API_ID –∏ API_HASH –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        try:
            user_dir = get_user_dir(user_id, "trial", create_dir=True)
            config_path = os.path.join(user_dir, "config.json")
            if not os.path.exists(config_path):
                config = {
                    "api_id": 22133941,
                    "api_hash": "c226d2309461ee258c2aefc4dd19b743",
                    "accounts": []
                }
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è config.json –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    save_freetrial(freetrial_data)
    
    return freetrial_data[str(user_id)]

def is_freetrial_valid(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è
    licenses = load_licenses()
    if str(user_id) in licenses:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—è, –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        return False
    
    freetrial_data = load_freetrial()
    user_data = freetrial_data.get(str(user_id))
    if not user_data:
        return False
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω authorized=false ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–æ–π–¥–µ—Ç —Å–Ω–æ–≤–∞
    if user_data.get("authorized") is False:
        return False
    
    now = int(time.time())
    activated_at = user_data.get("activated_at", 0)
    # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª–∏—Ç—Å—è 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
    return (now - activated_at) < 86400

def get_freetrial_time_left(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    freetrial_data = load_freetrial()
    user_data = freetrial_data.get(str(user_id))
    if not user_data:
        return 0
    
    now = int(time.time())
    activated_at = user_data.get("activated_at", 0)
    time_left = 86400 - (now - activated_at)
    return max(0, time_left)

def save_licenses(licenses):
    try:
        with open(LICENSE_FILE, "w", encoding="utf-8") as f:
            json.dump(licenses, f, ensure_ascii=False, indent=2)
        
    except Exception as e:
        print(f"empty")

def update_license(user_id, license_code):
    licenses = load_licenses()
    now = int(time.time())

    # –ù–∞–π–¥—ë–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    earliest_ts = None
    for _uid, _data in licenses.items():
        try:
            if isinstance(_data, dict) and _data.get("license_code") == license_code:
                ts = int(_data.get("activated_at", 0) or 0)
                if ts > 0 and (earliest_ts is None or ts < earliest_ts):
                    earliest_ts = ts
        except Exception:
            pass
    if earliest_ts is None:
        earliest_ts = now

    # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    record = licenses.get(str(user_id)) or {}
    record["license_code"] = license_code
    record["activated_at"] = int(earliest_ts)
    record["date"] = _format_ts_with_gmt(int(earliest_ts))
    if "sessions" not in record or not isinstance(record.get("sessions"), list):
        record["sessions"] = []
    # –§–ª–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤–≤–æ–¥–µ –∫–ª—é—á–∞
    record["authorized"] = True
    licenses[str(user_id)] = record

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –∂–µ –∫–æ–¥–æ–º –∫ earliest_ts
    for _uid, _data in list(licenses.items()):
        try:
            if isinstance(_data, dict) and _data.get("license_code") == license_code:
                if int(_data.get("activated_at", 0) or 0) != int(earliest_ts):
                    _data["activated_at"] = int(earliest_ts)
                    _data["date"] = _format_ts_with_gmt(int(earliest_ts))
        except Exception:
            pass

    save_licenses(licenses)

# --- Mailing parameters persistent store ---
def get_mailing_parameters_path(user_id, license_type=None):
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        # if not license_type:
        #     license_type = detect_license_type(user_id)
        #     if license_type:
        #         user_states[f"{user_id}_license_type"] = license_type
    
    user_dir = get_user_dir(user_id, license_type, create_dir=False)
    return os.path.join(user_dir, "mailing_parameters.json")
    
def load_mailing_parameters(user_id):
    """Load persistent mailing parameters for a user. Returns dict or default structure."""
    license_type = user_states.get(f"{user_id}_license_type")
    # –§–æ–ª–±—ç–∫-–¥–µ—Ç–µ–∫—Ü–∏—è —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–∞–∂–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤)
    if not license_type:
        try:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
        except Exception:
            license_type = None
    
    path = get_mailing_parameters_path(user_id, license_type)
    if not os.path.exists(path):
        # Provide default structure as in user's attached example
        return {
            "user_id": str(user_id),
            "license_type": detect_license_type(user_id),
            "mailing_parameters": {
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": False,
                "account_templates": {},
                "ignore_folders": {},
                "ignore_chats": {},
            "last_updated": datetime.now(timezone.utc).isoformat()
            }
        }
    try:
        with open(path, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return {
                    "user_id": str(user_id),
                    "license_type": detect_license_type(user_id),
                    "mailing_parameters": {
                        "selected_accounts": [],
                        "template_mode": None,
                        "template_index": None,
                        "selected_folder": None,
                        "logging_enabled": True,
                        "alternate_templates": False,
                        "account_templates": {},
                        "ignore_folders": {},
                        "ignore_chats": {},
                        "last_updated": datetime.now(timezone.utc).isoformat()
                    }
                }
            return json.loads(content)
    except Exception:
        return {
            "user_id": str(user_id),
            "license_type": detect_license_type(user_id),
            "mailing_parameters": {
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": False,
                "account_templates": {},
                "ignore_folders": {},
                "ignore_chats": {},
                "last_updated": datetime.now(timezone.utc).isoformat()
            }
        }

def save_mailing_parameters(user_id):
    """Persist current in-memory mailing_states[user_id] to mailing_parameters.json"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –§–æ–ª–±—ç–∫-–¥–µ—Ç–µ–∫—Ü–∏—è —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not license_type:
        try:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
        except Exception:
            license_type = None
    
    state = mailing_states.get(user_id)
    if state is None:
        return
    path = get_mailing_parameters_path(user_id, license_type)
    os.makedirs(os.path.dirname(path), exist_ok=True)
    data = load_mailing_parameters(user_id)
    mp = data.setdefault("mailing_parameters", {})
    # Map in-memory state to persisted fields
    mp.update({
        "selected_accounts": state.get("selected_accounts", []),
        "template_mode": state.get("template_mode"),
        "template_index": state.get("template_index"),
        "selected_folder": state.get("selected_folder"),
        "logging_enabled": state.get("logging_enabled", True),
        "alternate_templates": state.get("alternate_templates", False),
        "account_templates": state.get("account_templates", {}),
        "ignore_folders": state.get("ignore_folders", {}),
        "ignore_chats": state.get("ignore_chats", {}),
        "folder_set": state.get("folder_set"),
        "template_type": state.get("template_type"),
        "account_folders": state.get("account_folders", {}),
        "step": state.get("step"),
        "last_updated": datetime.now(timezone.utc).isoformat(),
    })
    # Also store optional flags used in flows
    for key in ["summary_enabled", "minimized", "ignore_breaks"]:
        if key in state:
            mp[key] = state.get(key)
    payload = {
        "user_id": str(user_id),
        "license_type": detect_license_type(user_id),
        "mailing_parameters": mp,
    }
    with open(path, "w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)

async def ensure_mailing_state(user_id):
    """Ensure mailing_states[user_id] exists; try restoring from mailing_parameters.json.
    Returns True if state exists or restored, False otherwise.
    """
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    if user_id in mailing_states:
        return True
    data = load_mailing_parameters(user_id)
    mp = data.get("mailing_parameters", {}) if isinstance(data, dict) else {}
    if not mp:
        return False
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–∞–≥–∞ "select_alternate_templates"
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    step = mp.get("step", "select_accounts")
    original_step = step  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
    
    # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å template_mode –∏ alternate_templates, 
    # –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    if step is None and mp.get("template_mode") is not None and "alternate_templates" in mp:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤, –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
        template_mode = mp.get("template_mode")
        if template_mode == "select":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
            step = "select_template_type"
        elif template_mode == "custom":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            step = "select_logging"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            step = "select_logging"
    elif step == "select_alternate_templates":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        # –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç template_mode
        template_mode = mp.get("template_mode")
        if template_mode == "select":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
            step = "select_template_type"
        elif template_mode == "custom":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            step = "select_logging"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            step = "select_logging"
    
    # Restore subset of state
    mailing_states[user_id] = {
        "step": step,
        "original_step": original_step,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        "selected_accounts": mp.get("selected_accounts", []),
        "template_mode": mp.get("template_mode"),
        "template_index": mp.get("template_index"),
        "selected_folder": mp.get("selected_folder"),
        "logging_enabled": mp.get("logging_enabled", True),
        "alternate_templates": mp.get("alternate_templates", False),
        "account_templates": mp.get("account_templates", {}),
        "ignore_folders": mp.get("ignore_folders", {}),
        "ignore_chats": mp.get("ignore_chats", {}),
        "folder_set": mp.get("folder_set"),
        "template_type": mp.get("template_type"),
        "account_folders": mp.get("account_folders", {}),
        "summary_enabled": mp.get("summary_enabled", False),
        "minimized": mp.get("minimized", False),
        "ignore_breaks": mp.get("ignore_breaks", False),
        "resume_state": None,
    }
    
    # –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —à–∞–≥–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é,
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞
    if step in ["select_template_type", "select_logging"]:
        mailing_states[user_id]["needs_menu_display"] = True
    
    return True

def clear_mailing_parameters_file(user_id):
    """Clear the mailing parameters file when mailing is fully stopped/reset."""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    path = get_mailing_parameters_path(user_id, license_type)
    try:
        if os.path.exists(path):
            with open(path, "w", encoding="utf-8") as f:
                json.dump({
                    "user_id": str(user_id),
                    "license_type": detect_license_type(user_id),
                    "mailing_parameters": {
                        "selected_accounts": [],
                        "template_mode": None,
                        "template_index": None,
                        "selected_folder": None,
                        "logging_enabled": True,
                        "alternate_templates": False,
                        "account_templates": {},
                        "ignore_folders": {},
                        "ignore_chats": {},
                        "last_updated": datetime.now(timezone.utc).isoformat()
                    }
                }, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def add_session_to_license(user_id, session_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ license.json –∏–ª–∏ freetrial.json –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    license_type = user_states.get(f"{user_id}_license_type")
    
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    if license_type == "trial":
        # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ freetrial.json
        freetrial_data = load_freetrial()
        if str(user_id) in freetrial_data:
            if "sessions" not in freetrial_data[str(user_id)]:
                freetrial_data[str(user_id)]["sessions"] = []
            
            if session_name not in freetrial_data[str(user_id)]["sessions"]:
                freetrial_data[str(user_id)]["sessions"].append(session_name)
                save_freetrial(freetrial_data)
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π
    licenses = load_licenses()
    if str(user_id) in licenses:
        sessions = licenses[str(user_id)].setdefault("sessions", [])
        if session_name not in sessions:
            sessions.append(session_name)
        save_licenses(licenses)

def remove_session_from_license(user_id, session_name):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ license.json –∏–ª–∏ freetrial.json –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    license_type = user_states.get(f"{user_id}_license_type")
    
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    if license_type == "trial":
        # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ freetrial.json
        freetrial_data = load_freetrial()
        if str(user_id) in freetrial_data:
            sessions = freetrial_data[str(user_id)].get("sessions", [])
            if session_name in sessions:
                sessions.remove(session_name)
                save_freetrial(freetrial_data)
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π
    licenses = load_licenses()
    if str(user_id) in licenses:
        sessions = licenses[str(user_id)].get("sessions", [])
        if session_name in sessions:
            sessions.remove(session_name)
        save_licenses(licenses)
        
def can_add_session(user_id):
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    # –î–ª—è owner –∏ admin –∫–ª—é—á–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ—Ç, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    if license_type in ["owner", "admin"]:
        return True, ""
    
    # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if license_type == "trial":
        if not is_freetrial_valid(user_id):
            return False, "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫."
        
        # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –º–∞–∫—Å–∏–º—É–º 3 —Å–µ—Å—Å–∏–∏
        freetrial_data = load_freetrial()
        user_data = freetrial_data.get(str(user_id), {})
        sessions = user_data.get("sessions", [])
        if len(sessions) >= get_max_sessions_for_license(user_id):
            return False, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (3)."
        
        return True, ""
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    licenses = load_licenses()
    lic = licenses.get(str(user_id))
    if not lic:
        return False, "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    license_code = lic["license_code"]
    # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É
    total_sessions = 0
    for l in licenses.values():
        if l.get("license_code") == license_code:
            total_sessions += len(l.get("sessions", []))
    max_allowed = get_max_sessions_for_license(user_id)
    if total_sessions >= max_allowed:
        return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ ({max_allowed})."
    
    now = int(time.time())
    base_end_ts = lic.get("activated_at", 0) + LICENSE_DURATION_DAYS * 86400
    effective_end_ts = base_end_ts + get_referral_bonus_seconds(user_id)
    if now > effective_end_ts:
        return False, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç—ë–∫."
    
    return True, ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
def get_autoresponder_templates_path(user_id, license_type=None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–æ–≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        # if not license_type:
        #     license_type = detect_license_type(user_id)
        #     if license_type:
        #         user_states[f"{user_id}_license_type"] = license_type
    
    user_dir = get_user_dir(user_id, license_type, create_dir=False)
    return os.path.join(user_dir, "autoresponder_templates.json")

def load_autoresponder_templates(user_id):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    templates_path = get_autoresponder_templates_path(user_id, license_type)
    try:
        if os.path.exists(templates_path):
            with open(templates_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception:
        return {}

def save_autoresponder_templates(user_id, templates):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    templates_path = get_autoresponder_templates_path(user_id, license_type)
    try:
        with open(templates_path, 'w', encoding='utf-8') as f:
            json.dump(templates, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def get_autoresponder_template(user_id, account_phone):
    """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    templates = load_autoresponder_templates(user_id)
    return templates.get(account_phone, "")

def set_autoresponder_template(user_id, account_phone, template_text):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    templates = load_autoresponder_templates(user_id)
    templates[account_phone] = template_text
    save_autoresponder_templates(user_id, templates)

def delete_autoresponder_template(user_id, account_phone):
    """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    templates = load_autoresponder_templates(user_id)
    if account_phone in templates:
        del templates[account_phone]
        save_autoresponder_templates(user_id, templates)

def has_autoresponder_templates(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —à–∞–±–ª–æ–Ω—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    templates = load_autoresponder_templates(user_id)
    return bool(templates)

def get_active_accounts_by_sessions(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (dict), –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å .session —Ñ–∞–π–ª"""
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "bot" –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø–∞–ø–∫—É sessions
    sessions_dir = os.path.join(get_user_subdir(user_id, "", license_type, create_dir=False), "sessions")
    session_names = set()
    if os.path.exists(sessions_dir):
        for fname in os.listdir(sessions_dir):
            if fname.endswith(".session"):
                session_names.add(fname[:-8])
    
    # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ config.json, —É –∫–æ—Ç–æ—Ä—ã—Ö name —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å .session
    accounts = load_user_accounts(user_id)
    active_accounts = []
    for acc in accounts:
        name = acc.get("name")
        if name and name in session_names:
            active_accounts.append(acc)
    return active_accounts

def get_active_sessions(user_id):
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    #         if license_type:
    #             user_states[f"{user_id}_license_type"] = license_type
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "bot" –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –ø–∞–ø–∫—É sessions
    sessions_dir = os.path.join(get_user_subdir(user_id, "", license_type, create_dir=False), "sessions")
    result = []
    if os.path.exists(sessions_dir):
        for fname in os.listdir(sessions_dir):
            if fname.endswith(".session"):
                name = fname[:-8]  # —É–±–∏—Ä–∞–µ–º .session
                result.append(name)
    return result

def get_sessions_count(user_id):
    license_type = user_states.get(f"{user_id}_license_type")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è owner –∏ admin - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if not license_type:
        license_type = detect_license_type(user_id)
        if license_type in ["owner", "admin"]:
            user_states[f"{user_id}_license_type"] = license_type
    
    if license_type in ["owner", "admin"]:
        return len(load_user_accounts(user_id))
    
    # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å—á–∏—Ç–∞–µ–º –ø–æ freetrial.json
    if license_type == "trial":
        # –ü–µ—Ä–µ–¥ –ø–æ–¥—Å—á—ë—Ç–æ–º –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ freetrial –≤ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            reconcile_freetrial_sessions(user_id)
        except Exception:
            pass
        freetrial_data = load_freetrial()
        user_data = freetrial_data.get(str(user_id), {})
        return len(user_data.get("sessions", []))
    
    # –î–ª—è pro/premium/basic —Å—á–∏—Ç–∞–µ–º –ø–æ license.json –ø–æ –∫–ª—é—á—É
    licenses = load_licenses()
    lic = licenses.get(str(user_id))
    if not lic:
        return 0
    license_code = lic.get("license_code")
    total_sessions = 0
    for l in licenses.values():
        if l.get("license_code") == license_code:
            total_sessions += len(l.get("sessions", []))
    return total_sessions

def load_user_accounts(user_id):
    license_type = user_states.get(f"{user_id}_license_type")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not license_type:
        license_type = detect_license_type(user_id)
        if license_type:
            user_states[f"{user_id}_license_type"] = license_type
    
    user_dir = get_user_dir(user_id, license_type, create_dir=False)
    config_path = os.path.join(user_dir, "config.json")
    if not os.path.exists(config_path):
        #print(f"üîç [LOAD_USER_ACCOUNTS] –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return []
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        accounts = config.get("accounts", [])
        #print(f"üîç [LOAD_USER_ACCOUNTS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ config.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã!
        filtered_accounts = [acc for acc in accounts if acc and acc.get("phone")]
        #print(f"üîç [LOAD_USER_ACCOUNTS] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        return filtered_accounts
    except Exception as e:
        #print(f"üîç [LOAD_USER_ACCOUNTS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return []

def save_user_accounts(user_id, accounts):
    license_type = user_states.get(f"{user_id}_license_type")
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    # if not license_type:
    #     license_type = detect_license_type(user_id)
    #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    #     if license_type:
    #         user_states[f"{user_id}_license_type"] = license_type
    
    user_dir = get_user_dir(user_id, license_type, create_dir=True)
    config_path = os.path.join(user_dir, "config.json")
    config = {}
    if os.path.exists(config_path):
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
        except Exception:
            config = {}
    config["accounts"] = accounts
    # --- –¥–æ–±–∞–≤–ª–µ–Ω–æ ---
    if accounts and "api_id" in accounts[0] and "api_hash" in accounts[0]:
        config["api_id"] = accounts[0]["api_id"]
        config["api_hash"] = accounts[0]["api_hash"]
    # --- –∫–æ–Ω–µ—Ü ---
    with open(config_path, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –≤ –ª–æ–≥–∞—Ö
    update_user_accounts_info(user_id)

def load_user_stats(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ count.json"""
    try:
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type, create_dir=True)
        stats_path = os.path.join(user_dir, "count.json")
        
        if os.path.exists(stats_path):
            with open(stats_path, "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            initial_stats = {
                "sent_messages": 0,  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
                "received_messages": 0,  # –ü–æ–ª—É—á–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–æ—á—Ç—ã
                "autoresponder_messages": 0,  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º
                "last_updated": int(time.time())
            }
            save_user_stats(user_id, initial_stats)
            return initial_stats
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {
            "sent_messages": 0,
            "received_messages": 0,
            "autoresponder_messages": 0,
            "last_updated": int(time.time())
        }

def save_user_stats(user_id, stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ count.json"""
    try:
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type, create_dir=True)
        stats_path = os.path.join(user_dir, "count.json")
        
        stats["last_updated"] = int(time.time())
        
        with open(stats_path, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def increment_user_stat(user_id, stat_type, increment=1):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        stats = load_user_stats(user_id)
        old_value = stats.get(stat_type, 0)
        
        if stat_type == "sent_messages":
            stats["sent_messages"] += increment
        elif stat_type == "received_messages":
            stats["received_messages"] += increment
        elif stat_type == "autoresponder_messages":
            stats["autoresponder_messages"] += increment
        
        save_user_stats(user_id, stats)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {stat_type} {old_value} ‚Üí {stats[stat_type]} (user_id: {user_id})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {stat_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def calculate_saved_time_and_money(user_id):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats = load_user_stats(user_id)
        accounts = load_user_accounts(user_id)
        num_accounts = len(accounts) if accounts else 1
        
        # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 10 —Å–µ–∫—É–Ω–¥
        total_messages = stats["sent_messages"]
        time_per_message = 10  # —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ—Å—Ç–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π √ó 10 —Å–µ–∫—É–Ω–¥
        total_time_seconds = total_messages * time_per_message
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        total_hours = total_time_seconds // 3600
        total_minutes = (total_time_seconds % 3600) // 60
        
        # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –¥–µ–Ω–µ–≥: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ = $0.02
        cost_per_message = 0.02
        total_money = total_messages * cost_per_message
        
        return {
            "saved_time_hours": total_hours,
            "saved_time_minutes": total_minutes,
            "saved_money": round(total_money, 1)
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {
            "saved_time_hours": 0,
            "saved_time_minutes": 0,
            "saved_money": 0.0
        }

def get_user_stats_display(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        stats = load_user_stats(user_id)
        savings = calculate_saved_time_and_money(user_id)
        
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['sent_messages']}

‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['received_messages']}

‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['autoresponder_messages']}

‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {savings['saved_time_hours']} —á {savings['saved_time_minutes']} –º–∏–Ω

‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –¥–µ–Ω–µ–≥: {savings['saved_money']}$"""
        
        return stats_text
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ====================

def load_logs_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ logs.json"""
    try:
        logs_path = os.path.join(PROJECT_ROOT, "logs.json")
        if os.path.exists(logs_path):
            with open(logs_path, "r", encoding="utf-8") as f:
                return json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            initial_logs = {}
            save_logs_data(initial_logs)
            return initial_logs
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ logs.json: {e}")
        return {}

def save_logs_data(logs_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ logs.json"""
    try:
        logs_path = os.path.join(PROJECT_ROOT, "logs.json")
        with open(logs_path, "w", encoding="utf-8") as f:
            json.dump(logs_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è logs.json: {e}")

def _format_now_without_tz() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY, HH:MM' (–±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)."""
    try:
        return datetime.now().strftime("%d.%m.%Y, %H:%M")
    except Exception:
        return datetime.now().strftime("%d.%m.%Y, %H:%M")

def _format_now_with_gmt() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY, HH:MM GMT+X'."""
    try:
        local_dt = datetime.now().astimezone()
        tz_offset = local_dt.utcoffset() or None
        hours = int(tz_offset.total_seconds() // 3600) if tz_offset else 0
        gmt_part = f"GMT{hours:+d}"
        return f"{local_dt.strftime('%d.%m.%Y, %H:%M')} {gmt_part}"
    except Exception:
        # –§–æ–ª–±—ç–∫ –±–µ–∑ TZ
        return datetime.now().strftime("%d.%m.%Y, %H:%M")

def _format_ts_with_gmt(timestamp: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É/–≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ timestamp –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY, HH:MM GMT+X'."""
    try:
        local_dt = datetime.fromtimestamp(int(timestamp)).astimezone()
        tz_offset = local_dt.utcoffset() or None
        hours = int(tz_offset.total_seconds() // 3600) if tz_offset else 0
        gmt_part = f"GMT{hours:+d}"
        return f"{local_dt.strftime('%d.%m.%Y, %H:%M')} {gmt_part}"
    except Exception:
        return _format_now_with_gmt()

def get_or_create_user_logs(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logs_data = load_logs_data()
    user_id_str = str(user_id)
    
    if user_id_str not in logs_data:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logs_data[user_id_str] = {
            "MAIN_INFO": {
                "registration": _format_now_without_tz(),
                "language": "",
                "freetrial": 0,
                "referral": "",
                "license_type": "",
                "license_key": "",
                "accounts_id": [],
                "accounts_usernames": [],
                "accounts_phone_numbers": []
            },
            "MAILING_INFO": {
                "mailing_launched_times": 0,
                "messages_sent_total": 0
            },
            "MAILBOX_INFO": {
                "mailbox_launched_times": 0,
                "messages_received_total": 0
            },
            "AUTORESPONDER_INFO": {
                "autoresponder_launched_times": 0,
                "messages_total_responded": 0
            },
            "CLICKED": {}
        }
        save_logs_data(logs_data)
    
    return logs_data[user_id_str]

def update_user_main_info(user_id, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∞—Ö"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            get_or_create_user_logs(user_id)
        
        for key, value in kwargs.items():
            if key in logs_data[user_id_str]["MAIN_INFO"]:
                logs_data[user_id_str]["MAIN_INFO"][key] = value
        
        save_logs_data(logs_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def log_button_click(user_id, button_name):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            get_or_create_user_logs(user_id)
        
        if "CLICKED" not in logs_data[user_id_str]:
            logs_data[user_id_str]["CLICKED"] = {}
        
        if button_name not in logs_data[user_id_str]["CLICKED"]:
            logs_data[user_id_str]["CLICKED"][button_name] = 0
        
        logs_data[user_id_str]["CLICKED"][button_name] += 1
        save_logs_data(logs_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ {button_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def log_mailing_activity(user_id, action_type, **kwargs):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            get_or_create_user_logs(user_id)
        
        if action_type == "launch":
            logs_data[user_id_str]["MAILING_INFO"]["mailing_launched_times"] += 1
        elif action_type == "message_sent":
            increment = kwargs.get("increment", 1)
            logs_data[user_id_str]["MAILING_INFO"]["messages_sent_total"] += increment
        elif action_type == "add_chat":
            chat = kwargs.get("chat")
            if chat and chat not in logs_data[user_id_str]["MAILING_INFO"]["chats"]:
                logs_data[user_id_str]["MAILING_INFO"]["chats"].append(chat)

        
        save_logs_data(logs_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def log_mailbox_activity(user_id, action_type, **kwargs):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            get_or_create_user_logs(user_id)
        
        if action_type == "launch":
            logs_data[user_id_str]["MAILBOX_INFO"]["mailbox_launched_times"] += 1
        elif action_type == "message_received":
            increment = kwargs.get("increment", 1)
            logs_data[user_id_str]["MAILBOX_INFO"]["messages_received_total"] += increment
        
        save_logs_data(logs_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def log_autoresponder_activity(user_id, action_type, **kwargs):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            get_or_create_user_logs(user_id)
        
        if action_type == "launch":
            logs_data[user_id_str]["AUTORESPONDER_INFO"]["autoresponder_launched_times"] += 1
        elif action_type == "message_responded":
            increment = kwargs.get("increment", 1)
            logs_data[user_id_str]["AUTORESPONDER_INFO"]["messages_total_responded"] += increment

        
        save_logs_data(logs_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def update_user_accounts_info(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∞—Ö"""
    try:
        accounts = load_user_accounts(user_id)
        print(f"üîç [UPDATE_ACCOUNTS_INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts) if accounts else 0} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not accounts:
            print(f"üîç [UPDATE_ACCOUNTS_INFO] –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return
        
        accounts_id = []
        accounts_usernames = []
        accounts_phone_numbers = []
        
        for account in accounts:
            if account.get("phone"):
                accounts_phone_numbers.append(account["phone"])
            if account.get("user_id"):
                accounts_id.append(str(account["user_id"]))
            if account.get("username"):
                accounts_usernames.append(f"@{account['username']}")
        
        print(f"üîç [UPDATE_ACCOUNTS_INFO] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è logs.json: {len(accounts_id)} ID, {len(accounts_usernames)} username, {len(accounts_phone_numbers)} phone")
        
        update_user_main_info(
            user_id,
            accounts_id=accounts_id,
            accounts_usernames=accounts_usernames,
            accounts_phone_numbers=accounts_phone_numbers
        )
        
        print(f"üîç [UPDATE_ACCOUNTS_INFO] –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ logs.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def update_user_account_info_in_logs(user_id, name, phone, username, user_id_telegram):
    """–°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤ logs.json"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logs_data[user_id_str] = {
                "MAIN_INFO": {
                    "registration": _format_now_without_tz(),
                    "language": "",
                    "freetrial": 0,
                    "referral": "",
                    "license_type": "",
                    "license_key": "",
                    "accounts_id": [],
                    "accounts_usernames": [],
                    "accounts_phone_numbers": []
                },
                "MAILING_INFO": {
                    "mailing_launched_times": 0,
                    "messages_sent_total": 0
                },
                "MAILBOX_INFO": {
                    "mailbox_launched_times": 0,
                    "messages_received_total": 0
                },
                "AUTORESPONDER_INFO": {
                    "autoresponder_launched_times": 0,
                    "messages_total_responded": 0
                },
                "CLICKED": {}
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
        if user_id_telegram:
            logs_data[user_id_str]["MAIN_INFO"]["accounts_id"].append(str(user_id_telegram))
        if username:
            logs_data[user_id_str]["MAIN_INFO"]["accounts_usernames"].append(f"@{username}")
        if phone:
            logs_data[user_id_str]["MAIN_INFO"]["accounts_phone_numbers"].append(phone)
        
        save_logs_data(logs_data)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {name} ({phone})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def get_user_analytics(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤"""
    try:
        logs_data = load_logs_data()
        user_id_str = str(user_id)
        
        if user_id_str not in logs_data:
            return None
        
        user_logs = logs_data[user_id_str]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        total_clicks = sum(user_logs.get("CLICKED", {}).values())
        most_clicked_button = max(user_logs.get("CLICKED", {}).items(), key=lambda x: x[1]) if user_logs.get("CLICKED") else None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        mailing_launches = user_logs.get("MAILING_INFO", {}).get("mailing_launched_times", 0)
        messages_sent = user_logs.get("MAILING_INFO", {}).get("messages_sent_total", 0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á—Ç—É
        mailbox_launches = user_logs.get("MAILBOX_INFO", {}).get("mailbox_launched_times", 0)
        messages_received = user_logs.get("MAILBOX_INFO", {}).get("messages_received_total", 0)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
        autoresponder_launches = user_logs.get("AUTORESPONDER_INFO", {}).get("autoresponder_launched_times", 0)
        messages_responded = user_logs.get("AUTORESPONDER_INFO", {}).get("messages_total_responded", 0)
        
        return {
            "total_clicks": total_clicks,
            "most_clicked_button": most_clicked_button,
            "mailing_activity": {
                "launches": mailing_launches,
                "messages_sent": messages_sent,
                "avg_messages_per_launch": messages_sent / mailing_launches if mailing_launches > 0 else 0
            },
            "mailbox_activity": {
                "launches": mailbox_launches,
                "messages_received": messages_received,
                "avg_messages_per_launch": messages_received / mailbox_launches if mailbox_launches > 0 else 0
            },
            "autoresponder_activity": {
                "launches": autoresponder_launches,
                "messages_responded": messages_responded,
                "avg_messages_per_launch": messages_responded / autoresponder_launches if autoresponder_launches > 0 else 0
            }
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def get_project_root():
    return os.path.dirname(os.path.abspath(__file__))

def get_user_dir(user_id, license_type=None, create_dir=False):
    if user_id is None:
        raise ValueError("user_id –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None!")
    
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not license_type and user_states.get(user_id) == "authorized":
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    root = get_project_root()
    if license_type == "owner":
        candidate = os.path.join(root, "owner")
    elif license_type == "trial":
        base_dir = os.path.join(root, "user")
        candidate = os.path.join(base_dir, f"{user_id}_trial")
    elif license_type == "admin":
        base_dir = os.path.join(root, "user")
        candidate = os.path.join(base_dir, f"{user_id}_admin")
    elif license_type == "pro":
        base_dir = os.path.join(root, "user")
        candidate = os.path.join(base_dir, f"{user_id}_pro")
    elif license_type == "premium":
        base_dir = os.path.join(root, "user")
        candidate = os.path.join(base_dir, f"{user_id}_premium")
    elif license_type == "basic":
        base_dir = os.path.join(root, "user")
        candidate = os.path.join(base_dir, f"{user_id}_basic")
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (None), –Ω–µ —Å–æ–∑–¥–∞–µ–º plain, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å–Ω–∞—è –ø–∞–ø–∫–∞
        base_dir = os.path.join(root, "user")
        if os.path.isdir(os.path.join(base_dir, f"{user_id}_owner")):
            candidate = os.path.join(base_dir, f"{user_id}_owner")
        elif os.path.isdir(os.path.join(base_dir, f"{user_id}_admin")):
            candidate = os.path.join(base_dir, f"{user_id}_admin")
        elif os.path.isdir(os.path.join(base_dir, f"{user_id}_pro")):
            candidate = os.path.join(base_dir, f"{user_id}_pro")
        elif os.path.isdir(os.path.join(base_dir, f"{user_id}_premium")):
            candidate = os.path.join(base_dir, f"{user_id}_premium")
        elif os.path.isdir(os.path.join(base_dir, f"{user_id}_basic")):
            candidate = os.path.join(base_dir, f"{user_id}_basic")
        elif os.path.isdir(os.path.join(base_dir, f"{user_id}_trial")):
            candidate = os.path.join(base_dir, f"{user_id}_trial")
        else:
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—É—Ñ—Ñ–∏–∫—Å–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º plain
            candidate = os.path.join(base_dir, str(user_id))
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ _user –Ω–∞ _basic
    try:
        if license_type == "basic":
            legacy_dir = os.path.join(base_dir, f"{user_id}_user")
            if os.path.exists(legacy_dir) and not os.path.exists(candidate):
                os.rename(legacy_dir, candidate)
    except Exception as _:
        pass
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    # –í–ê–ñ–ù–û: –Ω–µ—Å—Å—É—Ñ—Ñ–∏–∫—Å–Ω—ã–µ –ø–∞–ø–∫–∏ (license_type is None) —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º —Ñ–ª–∞–≥–µ force
    allow_plain_create = bool(user_states.get(f"{user_id}_force_plain_create"))
    if (create_dir or user_states.get(user_id) == "authorized"):
        if license_type is None and not allow_plain_create:
            # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å—Å—É—Ñ—Ñ–∏–∫—Å–Ω—É—é –ø–∞–ø–∫—É –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
            pass
        else:
            os.makedirs(candidate, exist_ok=True)
    
    return candidate

def get_user_subdir(user_id, subdir, license_type=None, create_dir=False):

    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not license_type and user_states.get(user_id) == "authorized":
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type

    user_dir = get_user_dir(user_id, license_type, create_dir)
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "bot" –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É –ø–∞–ø–∫—É "sessions"
    if subdir == "bot":
        path = user_dir  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        path = os.path.join(user_dir, subdir)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if create_dir or user_states.get(user_id) == "authorized":
        os.makedirs(os.path.join(path, "sessions"), exist_ok=True)
    
    return path

def get_session_path(user_id, subdir, session_name, license_type=None):
    """–ü—É—Ç—å –∫ .session —Ñ–∞–π–ª—É –≤ –ø–æ–¥–ø–∞–ø–∫–µ"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not license_type and user_states.get(user_id) == "authorized":
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "bot" –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ä–∞–∑—É –ø–∞–ø–∫—É "sessions"
    if subdir == "bot":
        return os.path.join(get_user_subdir(user_id, "", license_type, create_dir=False), "sessions", f"{session_name}.session")
    else:
        return os.path.join(get_user_subdir(user_id, subdir, license_type, create_dir=False), "sessions", f"{session_name}.session")

def remove_session_from_all_subdirs(user_id, session_name, license_type=None):
    """–£–¥–∞–ª—è–µ—Ç .session —Ñ–∞–π–ª –∏ .session-journal —Ñ–∞–π–ª –∏–∑ sessions"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not license_type and user_states.get(user_id) == "authorized":
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    # –£–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É "bot" –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ sessions
    session_path = get_session_path(user_id, "bot", session_name, license_type)
    journal_path = session_path.replace('.session', '.session-journal')
    wal_path = session_path + "-wal"
    shm_path = session_path + "-shm"
    
    # –£–¥–∞–ª—è–µ–º .session —Ñ–∞–π–ª
    if os.path.exists(session_path):
        try:
            os.remove(session_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω .session —Ñ–∞–π–ª: {session_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {session_path}: {e}")
    
    # –£–¥–∞–ª—è–µ–º .session-journal —Ñ–∞–π–ª (–≤–∞–∂–Ω–æ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ SQLite)
    if os.path.exists(journal_path):
        try:
            os.remove(journal_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω .session-journal —Ñ–∞–π–ª: {journal_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {journal_path}: {e}")
    # –£–¥–∞–ª—è–µ–º SQLite –¥–æ–ø. —Ñ–∞–π–ª—ã
    for extra in (wal_path, shm_path):
        if os.path.exists(extra):
            try:
                os.remove(extra)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {extra}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {extra}: {e}")
    
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ (license.json –∏–ª–∏ freetrial.json)
    remove_session_from_license(user_id, session_name)

def ensure_session_permissions(session_path: str):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ .session, –µ–≥–æ –∂—É—Ä–Ω–∞–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    try:
        if not session_path:
            return
        sessions_dir = os.path.dirname(session_path)
        try:
            if sessions_dir and os.path.exists(sessions_dir):
                os.chmod(sessions_dir, 0o700)
        except Exception:
            pass
        targets = [
            session_path,
            session_path.replace('.session', '.session-journal'),
            session_path + '-wal',
            session_path + '-shm',
        ]
        for path in targets:
            try:
                if path and os.path.exists(path):
                    os.chmod(path, 0o600)
            except Exception:
                pass
    except Exception:
        pass

def detect_license_type(user_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ –∫–ª—é—á—É –≤ license.json."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
    saved_license_type = user_states.get(f"{user_id}_license_type")
    if saved_license_type:
        # –ï—Å–ª–∏ —ç—Ç–æ trial, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if saved_license_type == "trial" and not is_freetrial_valid(user_id):
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π trial ‚Äî –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–ø
            pass
        else:
            return saved_license_type
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º owner —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ user_id == "owner" –∏–ª–∏ 0
    if str(user_id) in ["owner", "0"]:
        root = get_project_root()
        if os.path.exists(os.path.join(root, "owner")):
            return "owner"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏
    root = get_project_root()
    user_base_dir = os.path.join(root, "user")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
    if os.path.exists(os.path.join(user_base_dir, f"{user_id}_owner")):
        return "owner"
    if os.path.exists(os.path.join(user_base_dir, f"{user_id}_admin")):
        return "admin"
    if os.path.exists(os.path.join(user_base_dir, f"{user_id}_pro")):
        return "pro"
    if os.path.exists(os.path.join(user_base_dir, f"{user_id}_premium")):
        return "premium"
    if os.path.exists(os.path.join(user_base_dir, f"{user_id}_basic")):
        return "basic"
    if os.path.exists(os.path.join(user_base_dir, f"{user_id}_trial")):
        return "trial"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º license.json –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ –∫–ª—é—á—É –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    licenses = load_licenses()
    lic = licenses.get(str(user_id))
    if lic:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ç–∏–ø –∏–∑ license.json
        if lic.get("authorized") is False:
            pass
        else:
            license_code = lic.get("license_code")
            groups = load_key_groups()
            if license_code == "andromedasysmode" or license_code in groups.get("owner", []):
                return "owner"
            if license_code == "andromedamodeadmin" or license_code in groups.get("admin", []):
                return "admin"
            if license_code in groups.get("pro", []):
                return "pro"
            if license_code in groups.get("premium", []):
                return "premium"
            if license_code in groups.get("basic", []):
                return "basic"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏
    if is_freetrial_valid(user_id):
        return "trial"
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None - –ø–∞–ø–∫–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    return None

def migrate_user_folder_if_needed(user_id):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –≤ –ø–∞–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    root = get_project_root()
    user_base_dir = os.path.join(root, "user")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
    old_folder = os.path.join(user_base_dir, str(user_id))
    if not os.path.exists(old_folder):
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
    license_type = detect_license_type(user_id)
    if not license_type:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞–ø–∫–∞
    new_folder = os.path.join(user_base_dir, f"{user_id}_{license_type}")
    if os.path.exists(new_folder):
        # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é
        try:
            shutil.rmtree(old_folder)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ {old_folder} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {new_folder})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ {old_folder}: {e}")
        return
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
    try:
        os.rename(old_folder, new_folder)
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {old_folder} -> {new_folder}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def cleanup_orphaned_folders():
    """–û—á–∏—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    root = get_project_root()
    user_base_dir = os.path.join(root, "user")
    
    if not os.path.exists(user_base_dir):
        return
    
    cleaned_count = 0
    for item in os.listdir(user_base_dir):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        if item.isdigit():
            folder_path = os.path.join(user_base_dir, item)
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –ø–∞–ø–∫–∞
                if os.path.isdir(folder_path) and not os.listdir(folder_path):
                    os.rmdir(folder_path)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {folder_path}")
                    cleaned_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –ø–∞–ø–∫–∏ {folder_path}: {e}")
    
    if cleaned_count > 0:
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫")


def safe_rmtree(path: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –ø–æ–ø—ã—Ç–∫–æ–π –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ."""
    try:
        if not path or not os.path.exists(path):
            return
        def _on_rm_error(func, p, exc_info):
            try:
                if os.path.isdir(p):
                    os.chmod(p, 0o700)
                else:
                    os.chmod(p, 0o600)
                func(p)
            except Exception:
                pass
        shutil.rmtree(path, onerror=_on_rm_error)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ {path}: {e}")

def delete_all_user_dirs(user_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –∏ c —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (_trial, _basic, _premium, _pro, _admin, _user)."""
    try:
        root = get_project_root()
        user_base_dir = os.path.join(root, "user")
        candidates = [
            str(user_id),
            f"{user_id}_trial",
            f"{user_id}_basic",
            f"{user_id}_premium",
            f"{user_id}_pro",
            f"{user_id}_admin",
            f"{user_id}_user",
        ]
        deleted = []
        for name in candidates:
            path = os.path.join(user_base_dir, name)
            if os.path.exists(path):
                safe_rmtree(path)
                deleted.append(path)
        if deleted:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {deleted}")
        else:
            print(f"‚ÑπÔ∏è –ü–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")



def is_license_valid(user_id):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
    license_type = user_states.get(f"{user_id}_license_type")
    if license_type in ["owner", "admin"]:
        return True
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ
    if not license_type:
        license_type = detect_license_type(user_id)
        if license_type in ["owner", "admin"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏
            user_states[f"{user_id}_license_type"] = license_type
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    # –ï—Å–ª–∏ trial –∞–∫—Ç–∏–≤–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    if is_freetrial_valid(user_id):
        return True
    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω trial, –Ω–æ –æ–Ω —É–∂–µ –∏—Å—Ç—ë–∫ ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω
    if license_type == "trial":
        return False
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π (pro/premium/basic) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    licenses = load_licenses()
    lic = licenses.get(str(user_id))
    if not lic:
        return False
    # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω authorized=false ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if lic.get("authorized") is False:
        return False
    
    groups = load_key_groups()
    license_code = lic.get("license_code")
    # –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ pro/premium/basic
    if license_code not in set(groups.get("pro", []) + groups.get("premium", []) + groups.get("basic", [])):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    now = int(time.time())
    base_end_ts = lic.get("activated_at", 0) + LICENSE_DURATION_DAYS * 86400
    effective_end_ts = base_end_ts + get_referral_bonus_seconds(user_id)
    if now > effective_end_ts:
        return False
    
    return True


# ==================== –î–û–ë–ê–í–õ–ï–ù–û: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ ====================
async def handle_access_expired(user_id: int, reason: str | None = None):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.

    reason: "trial" –∏–ª–∏ "license" –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ï—Å–ª–∏ None, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if reason is None:
            try:
                licenses = load_licenses()
            except Exception:
                licenses = {}
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in licenses and not is_license_valid(user_id):
                reason = "license"
            elif str(user_id) in ft and not is_freetrial_valid(user_id):
                reason = "trial"
            else:
                reason = "license"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if reason == "trial":
            notify_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        else:
            notify_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."

        # 1) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if user_id in active_tasks:
                for task_name in list(active_tasks[user_id].keys()):
                    try:
                        await stop_task(user_id, task_name)
                    except Exception:
                        pass
        except Exception:
            pass

        # 2) –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mailboxer (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
        try:
            mailboxer = user_sessions.get(user_id, {}).get("mailboxer")
            if mailboxer:
                if "stop_event" in mailboxer and mailboxer["stop_event"]:
                    try:
                        mailboxer["stop_event"].set()
                    except Exception:
                        pass
        except Exception:
            pass

        # 3) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
        try:
            if user_id in mailing_states:
                try:
                    mailing_states[user_id]["active"] = False
                except Exception:
                    pass
                update_service_state("mailing_states", user_id, mailing_states.get(user_id))
        except Exception:
            pass
        try:
            if user_id in postman_states:
                try:
                    postman_states[user_id]["active"] = False
                except Exception:
                    pass
                update_service_state("postman_states", user_id, None)
        except Exception:
            pass
        try:
            if user_id in autoresponder_states:
                try:
                    autoresponder_states[user_id]["active"] = False
                except Exception:
                    pass
                update_service_state("autoresponder_states", user_id, autoresponder_states.get(user_id))
        except Exception:
            pass

        # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        try:
            await bot.send_message(chat_id=user_id, text=notify_text)
        except Exception:
            pass

        try:
            # –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫
            lang = user_languages.get(user_id, "ru")
            markup = get_start_menu() if lang == "ru" else get_start_menu_en()
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
            image_path = get_image_path("start_menu.png", user_id)
            full_path = Path(__file__).parent / image_path
            if full_path.exists():
                await bot.send_photo(
                    chat_id=user_id,
                    photo=FSInputFile(str(full_path)),
                    caption=("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "Choose an action:"),
                    reply_markup=markup
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "Choose an action:"),
                    reply_markup=markup
                )
        except Exception:
            pass

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
        try:
            user_states[user_id] = "wait_license"
        except Exception:
            pass
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ handle_access_expired –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        except Exception:
            pass


async def periodic_access_guard():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ª–∏—Ü–µ–Ω–∑–∏–π/—Ç—Ä–∏–∞–ª–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    while True:
        try:
            await asyncio.sleep(1800)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            # –ë–µ—Ä—ë–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = list(authorized_users)
            for uid in users:
                try:
                    if not is_license_valid(uid):
                        await handle_access_expired(uid)
                except Exception:
                    continue
        except asyncio.CancelledError:
            break
        except Exception as e:
            try:
                print(f"‚ö†Ô∏è periodic_access_guard –æ—à–∏–±–∫–∞: {e}")
            except Exception:
                pass

#@dp.message(Command("check_dialogs"))
#async def check_dialogs_command(message: Message):
#    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
#    user_id = message.from_user.id
#    
#    try:
#        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#        if user_id not in authorized_users:
#            await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
#            return
#        
#        await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
#        
#        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#        if user_id in active_clients:
#            for session_name in active_clients[user_id]:
#                try:
#                    await check_new_dialogs_for_client(user_id, session_name)
#                except Exception as e:
#                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {session_name}: {e}")
#            
#            await message.answer("‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
#        else:
#            await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
#            
#    except Exception as e:
#        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

@dp.message(Command("start"))
async def handle_start(message: Message):
    user_id = message.from_user.id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
    log_button_click(user_id, "–°—Ç–∞—Ä—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–∑—ã–∫
    if user_id not in user_languages:
        user_states[user_id] = "waiting_language"
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",
            reply_markup=get_language_menu()
        )
        return
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —è–∑—ã–∫–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫)
    if user_id not in user_languages:
        user_languages[user_id] = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        save_user_languages()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    license_type = user_states.get(f"{user_id}_license_type")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ
    # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if license_type:
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        is_authorized = False
        if os.path.exists(config_path):
            try:
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                if config.get("api_id") and config.get("api_hash"):
                    is_authorized = True
            except Exception:
                pass
        if is_authorized:
            user_states[user_id] = "authorized"
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                image_path = get_image_path("start_menu.png", user_id)
                full_path = Path(__file__).parent / image_path
                caption = "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." if user_languages[user_id] == "ru" else "You are already authorized."
                if full_path.exists():
                    await bot.send_photo(
                        chat_id=message.chat.id,
                        photo=FSInputFile(str(full_path)),
                        caption=caption,
                        reply_markup=get_main_inline_menu()
                    )
                else:
                    await message.answer(
                        caption,
                        reply_markup=get_main_inline_menu()
                    )
            except Exception:
                await message.answer(
                    "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." if user_languages[user_id] == "ru" else "You are already authorized.",
                    reply_markup=get_main_inline_menu()
                )
            return
    
    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É!
    user_states[user_id] = None
    await delete_and_send_image(
        message,
        "start_menu.png",
        "üîë –ü–æ–¥–ø–∏—Å–∫–∞:\n Basic 15$ | Premium 20$ | PRO 25$\n\nüß© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:\n 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞\n\n\n" if user_languages.get(user_id, "ru") == "ru" else "üîë Subscription:\n Basic 15$ | Premium 20$ | PRO 25$\n\nüß© Accounts:\n Basic x5 | Premium x10 | PRO x15\n\n‚è≥ Duration:\n 30 days from key activation\n\n\n",
        reply_markup=get_start_menu(),
        user_id=user_id
    )



@dp.message(F.text == "–°—Ç–æ–ø ‚≠ïÔ∏è")
async def handle_mailing_stop(message: types.Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    user_phones = []
    try:
        user_accounts = load_user_accounts(user_id)
        if user_accounts:
            user_phones = [acc.get("phone") for acc in user_accounts if acc.get("phone")]
    except Exception:
        pass
    
    # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï –ê–ö–¢–ò–í–ù–´–ï –¢–ê–ô–ú–ï–†–´ –ò –ó–ê–î–ê–ß–ò –†–ê–°–°–´–õ–ö–ò
    if user_id in active_tasks:
        for task_name in list(active_tasks[user_id].keys()):
            should_stop = (
                task_name.startswith("mailing") or 
                task_name.startswith("break_timer_") or 
                "timer" in task_name.lower() or 
                "countdown" in task_name.lower()
            )
            # –¢–∞–∫–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not should_stop and user_phones:
                should_stop = any(phone in task_name for phone in user_phones)
            
            if should_stop:
                print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É: {task_name}")
                await stop_task(user_id, task_name)
    
    # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–î–ê–ß–ò –ê–í–¢–û–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø
    if user_id in auto_resume_tasks:
        for service_type in list(auto_resume_tasks[user_id].keys()):
            if service_type in ["mailing", "monitoring"]:
                task = auto_resume_tasks[user_id][service_type]
                if not task.done():
                    print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {service_type}")
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
                del auto_resume_tasks[user_id][service_type]
    
    # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
    try:
        await connection_manager.stop_monitoring(user_id)
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    if user_id in active_tasks and "mailing" in active_tasks[user_id]:
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Resume process ---
        from copy import deepcopy
        resume_state = load_resume_state(user_id=user_id)
        if resume_state and "accounts" in resume_state:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–∑—ã–≤–∞–µ–º update_account_resume_state —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            for acc in resume_state["accounts"]:
                phone = acc["phone"]
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ acc
                chat_index = acc.get("chat_index", 0)
                message_count = acc.get("message_count", 0)
                update_account_resume_state(phone, chat_index=chat_index, message_count=message_count, user_id=user_id)
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
        await stop_task(user_id, "mailing")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if user_id in mailing_states:
        # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        mailing_states[user_id]["active"] = False
        mailing_states[user_id]["step"] = "stopped"
        print(f"üõë –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –ó–∞—Ç–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del mailing_states[user_id]
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
        update_service_state("mailing_states", user_id, None)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
    clear_fn = globals().get("clear_mailing_parameters_file")
    if callable(clear_fn):
        try:
            clear_fn(user_id)
        except Exception:
            pass
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        resume_state = load_resume_state(user_id=user_id)
        if resume_state and "accounts" in resume_state:
            for acc in resume_state["accounts"]:
                phone = acc["phone"]
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏
                update_account_resume_state(
                    phone, 
                    break_seconds_left=0, 
                    break_until_timestamp=0, 
                    break_started_ts=0,
                    user_id=user_id
                )
                print(f"üßπ –û—á–∏—â–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions and "pushmux" in user_sessions[user_id]:
        del user_sessions[user_id]["pushmux"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    save_reconnect_state()
    
    await safe_message_answer(
        message,
        "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await send_accounts_manage_menu_with_image(bot, message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

async def handle_autosub_minimize_alias(message: types.Message):
    user_id = message.from_user.id
    # –î–∞–∂–µ –µ—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞),
    # –ø–æ–∑–≤–æ–ª—è–µ–º –∫–Ω–æ–ø–∫–µ ¬´–ù–∞–∑–∞–¥¬ª –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è –Ω–µ–≥–æ
    phone = user_states.get(f"{user_id}_autosub_phone") or user_states.get(f"{user_id}_autosub_running_phone")
    if phone:
        user_states[f"{user_id}_autosub_minimized_{phone}"] = True
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.send_chat_action(message.chat.id, "typing")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
    except Exception:
        pass
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await safe_message_answer(
            message,
            "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —Å–≤—ë—Ä–Ω—É—Ç–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ ‚Ü™Ô∏è",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception:
        pass
    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏
    accounts = load_user_accounts(user_id)
    if not accounts:
        await send_accounts_manage_menu_with_image(bot, message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        return
    markup = InlineKeyboardMarkup(inline_keyboard=[])
    selected_phone = user_states.get(f"{user_id}_autosub_phone")
    for acc in accounts:
        label = acc.get("username") or acc.get("name") or acc.get("phone")
        label_fixed = f"{label: <5}"
        markup.inline_keyboard.append([
            InlineKeyboardButton(text=f"{label_fixed}", callback_data=f"autosub_acc_{acc.get('phone')}")
        ])
    markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")])
    try:
        await delete_and_send_image(
            message,
            "accounts.png",
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=markup,
            user_id=user_id
        )
    except TelegramAPIError as e:
        if "message is not modified" not in str(e):
            # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç
            await safe_message_answer(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=markup)

@dp.message(F.text.in_(["–ù–∞–∑–∞–¥"]))
async def handle_autosub_back(message: types.Message):
    # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ ¬´–°–≤–µ—Ä–Ω—É—Ç—å¬ª –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏: —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await handle_autosub_minimize_alias(message)

@dp.message(F.text.in_(["–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å üìã", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å üìã", "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å"]))
async def handle_autosub_unminimize(message: types.Message):
    user_id = message.from_user.id
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    try:
        phone = user_states.get(f"{user_id}_autosub_running_phone") or user_states.get(f"{user_id}_autosub_phone")
        if phone:
            user_states.pop(f"{user_id}_autosub_minimized_{phone}", None)
    except Exception:
        pass
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ,
    # —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞
    try:
        await safe_message_answer(message, "\u2063", reply_markup=get_autosub_active_keyboard())
    except Exception:
        pass
    # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω —Å–ø–∏—Å–æ–∫ ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏
    try:
        phone = user_states.get(f"{user_id}_autosub_running_phone") or user_states.get(f"{user_id}_autosub_phone")
        if phone:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—à–ª—É—é —Å–µ—Å—Å–∏—é ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if user_states.get(f"{user_id}_autosub_finished_{phone}"):
                user_states.pop(f"{user_id}_autosub_finished_{phone}", None)
                return
            done_flag = user_states.pop(f"{user_id}_autosub_done_{phone}", None)
            pending = user_states.pop(f"{user_id}_autosub_done_pending", None)
            if done_flag or (isinstance(pending, dict) and (pending.get("phone") == phone or not pending.get("phone"))):
                # –û–ø—Ä–µ–¥–µ–ª–∏–º –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                acc_label = None
                try:
                    if isinstance(pending, dict) and pending.get("label"):
                        acc_label = pending.get("label")
                    else:
                        accounts = load_user_accounts(user_id)
                        for acc in accounts:
                            if acc.get("phone") == phone:
                                acc_label = acc.get("username") or acc.get("name") or acc.get("phone")
                                break
                except Exception:
                    pass
                done_text = "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                prefixed_text = f"{acc_label}: {done_text}" if acc_label else done_text
                await safe_message_answer(message, prefixed_text)
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω FloodWait ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
            try:
                f_started_key = f"{user_id}_autosub_flood_{phone}_started_ts"
                f_total_key = f"{user_id}_autosub_flood_{phone}_total_sec"
                f_started_ts = user_states.get(f_started_key)
                f_total_sec = user_states.get(f_total_key)
                if isinstance(f_started_ts, int) and isinstance(f_total_sec, int) and f_total_sec > 0:
                    now_ts = int(asyncio.get_event_loop().time())
                    elapsed = max(0, now_ts - f_started_ts)
                    remaining = max(0, f_total_sec - elapsed)
                    if remaining > 0:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                        acc_label2 = None
                        try:
                            accounts = load_user_accounts(user_id)
                            for acc in accounts:
                                if acc.get("phone") == phone:
                                    acc_label2 = acc.get("username") or acc.get("name") or acc.get("phone")
                                    break
                        except Exception:
                            pass
                        prefix2 = f"{acc_label2}: " if acc_label2 else ""
                        await safe_message_answer(
                            message,
                            f"{prefix2}Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å {remaining} —Å–µ–∫—É–Ω–¥.",
                            reply_markup=get_autosub_active_keyboard()
                        )
                        # –ù–µ –æ—á–∏—â–∞–µ–º –∫–ª—é—á–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
            except Exception:
                pass
            else:
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                replay_flag = user_states.get(f"{user_id}_autosub_last_done_{phone}")
                replay_label = user_states.get(f"{user_id}_autosub_last_done_label_{phone}")
                if replay_flag:
                    acc_label = replay_label
                    if not acc_label:
                        try:
                            accounts = load_user_accounts(user_id)
                            for acc in accounts:
                                if acc.get("phone") == phone:
                                    acc_label = acc.get("username") or acc.get("name") or acc.get("phone")
                                    break
                        except Exception:
                            pass
                    done_text = "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                    prefixed_text = f"{acc_label}: {done_text}" if acc_label else done_text
                    await safe_message_answer(message, prefixed_text)
    except Exception:
        pass

@dp.message(F.text.in_(["–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
async def handle_autosub_finish(message: types.Message):
    user_id = message.from_user.id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
    phone = user_states.get(f"{user_id}_autosub_running_phone") or user_states.get(f"{user_id}_autosub_phone")
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –º–µ–Ω—é –ø—Ä–∏—à–ª–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
    try:
        if phone and user_id in active_tasks:
            task_key = f"autosubscribe:{phone}"
            if task_key in active_tasks[user_id]:
                asyncio.create_task(stop_task(user_id, task_key))
    except Exception:
        pass
    # –û–±–Ω–æ–≤–ª—è–µ–º reconnect_state: —Å–Ω–∏–º–∞–µ–º active –¥–ª—è —ç—Ç–æ–≥–æ phone
    try:
        existing = load_user_reconnect_state_individual(user_id) or {}
        autos = existing.get("autosubscribe_states", {})
        uid = str(user_id)
        if uid in autos and phone and str(phone) in autos[uid]:
            autos[uid][str(phone)]["active"] = False
            save_user_reconnect_state_individual(user_id, existing)
    except Exception:
        pass
    # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏
    try:
        await safe_message_answer(message, "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        accounts = load_user_accounts(user_id)
        if not accounts:
            await send_accounts_manage_menu_with_image(bot, message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        else:
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            for acc in accounts:
                label = acc.get("username") or acc.get("name") or acc.get("phone")
                label_fixed = f"{label: <5}"
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=f"{label_fixed}", callback_data=f"autosub_acc_{acc.get('phone')}")
                ])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")])
            await delete_and_send_image(
                message,
                "accounts.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=markup,
                user_id=user_id
            )
    except Exception:
        pass
    # –ß–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–æ—Å–ª–µ UI)
    try:
        if f"{user_id}_autosub_phone" in user_states:
            del user_states[f"{user_id}_autosub_phone"]
        if f"{user_id}_autosub_input_message_id" in user_states:
            del user_states[f"{user_id}_autosub_input_message_id"]
        if phone:
            user_states[f"{user_id}_autosub_finished_{phone}"] = True
            user_states.pop(f"{user_id}_autosub_done_{phone}", None)
            user_states.pop(f"{user_id}_autosub_done_label_{phone}", None)
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            autosub_progress_clear_account(user_id, phone)
        user_states.pop(f"{user_id}_autosub_done_pending", None)
        user_states.pop(f"{user_id}_autosub_running_phone", None)
    except Exception:
        pass
@dp.message(F.text.in_(["–°–≤–µ—Ä–Ω—É—Ç—å ‚Ü™Ô∏è", "—Å–≤–µ—Ä–Ω—É—Ç—å ‚Ü™Ô∏è", "–°–≤–µ—Ä–Ω—É—Ç—å", "—Å–≤–µ—Ä–Ω—É—Ç—å"]))
async def handle_mailing_minimize(message: types.Message):
    user_id = message.from_user.id
    print(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°–≤–µ—Ä–Ω—É—Ç—å –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id: {user_id}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id in mailing_states:
        mailing_states[user_id]["logging_enabled"] = False
        mailing_states[user_id]["minimized"] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: logging_enabled = False –¥–ª—è user_id: {user_id}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass

    if user_id not in user_sessions:
        user_sessions[user_id] = {}
    if "pushmux" not in user_sessions[user_id]:
        user_sessions[user_id]["pushmux"] = {}
    user_sessions[user_id]["pushmux"]["minimized"] = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    save_reconnect_state()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await safe_message_answer(
        message,
        "–†–∞—Å—Å—ã–ª–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º)
    await send_accounts_manage_menu_with_image(bot, message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    
@dp.callback_query()
async def handle_callback(call: CallbackQuery):
    user_id = call.from_user.id
    data = call.data
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    log_button_click(user_id, data)

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ---
    def _requires_mailing_state(callback_data: str) -> bool:
        # –¢—Ä–µ–±—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —à–∞–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∏–≥–Ω–æ—Ä-–º–µ–Ω—é.
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è: –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if callback_data in {"message_mailing", "mailing_start", "mailing_templates", "mailing_continue_no_templates", "mailing_cancel_no_templates"}:
            return False
        prefixes = (
            "mailing_",            # –≤—Å–µ —à–∞–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            "ignore_folders",      # –º–µ–Ω—é –∏–≥–Ω–æ—Ä–∞ –ø–∞–ø–æ–∫
            "ignore_chats",        # –º–µ–Ω—é –∏–≥–Ω–æ—Ä–∞ —á–∞—Ç–æ–≤
            "custom_folder_",      # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
            "select_folder_",      # –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫
            "select_chat_",        # –≤—ã–±–æ—Ä —á–∞—Ç–æ–≤
        )
        return callback_data.startswith(prefixes)

    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±–µ–∫, —Ç—Ä–µ–±—É—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞
    if _requires_mailing_state(data):
        try:
            # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –ø—É—Å—Ç–æ
            if user_id not in mailing_states:
                # –í–ê–ñ–ù–û: —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã –Ω–∏–∂–µ; –∏–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º forward-lookup —á–µ—Ä–µ–∑ globals
                ensure_fn = globals().get("ensure_mailing_state")
                if callable(ensure_fn):
                    restored = await ensure_fn(user_id)
                    if not restored and user_id not in mailing_states:
                        await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                        return
        except Exception:
            # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –≤–µ–¥—ë–º —Å–µ–±—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            if user_id not in mailing_states:
                await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if data == "language_ru":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_single_user_language(user_id, "ru")
        user_states[user_id] = None
        
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        is_authorized = False
        license_type = user_states.get(f"{user_id}_license_type")
        
        # –ï—Å–ª–∏ —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        migrate_user_folder_if_needed(user_id)
        
        if license_type:
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            if os.path.exists(config_path):
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                    if config.get("api_id") and config.get("api_hash"):
                        is_authorized = True
                except Exception:
                    pass
        
        if is_authorized:
            user_states[user_id] = "authorized"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                image_path = get_image_path("start_menu.png", user_id)
                full_path = Path(__file__).parent / image_path
                if full_path.exists():
                    await bot.send_photo(
                        chat_id=call.message.chat.id,
                        photo=FSInputFile(str(full_path)),
                        caption="–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
                        reply_markup=get_main_inline_menu()
                    )
                else:
                    await edit_text_or_safe_send(
                        call.message,
                        "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
                        reply_markup=get_main_inline_menu()
                    )
            except Exception:
                await edit_text_or_safe_send(
                    call.message,
                    "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
                    reply_markup=get_main_inline_menu()
                )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
            style_markup, style_title = get_style_menu("ru", user_id)
            await edit_text_or_safe_send(
                call.message,
                style_title,
                reply_markup=style_markup
            )
        return
    
    elif data == "language_en":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_single_user_language(user_id, "en")
        user_states[user_id] = None
        
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        is_authorized = False
        license_type = user_states.get(f"{user_id}_license_type")
        
        # –ï—Å–ª–∏ —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        migrate_user_folder_if_needed(user_id)
        
        if license_type:
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            if os.path.exists(config_path):
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                    if config.get("api_id") and config.get("api_hash"):
                        is_authorized = True
                except Exception:
                    pass
        
        if is_authorized:
            user_states[user_id] = "authorized"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                image_path = get_image_path("start_menu.png", user_id)
                full_path = Path(__file__).parent / image_path
                if full_path.exists():
                    await bot.send_photo(
                        chat_id=call.message.chat.id,
                        photo=FSInputFile(str(full_path)),
                        caption="You are already authorized.",
                        reply_markup=get_main_inline_menu()
                    )
                else:
                    await edit_text_or_safe_send(
                        call.message,
                        "You are already authorized.",
                        reply_markup=get_main_inline_menu()
                    )
            except Exception:
                await edit_text_or_safe_send(
                    call.message,
                    "You are already authorized.",
                    reply_markup=get_main_inline_menu()
                )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
            style_markup, style_title = get_style_menu("en", user_id)
            await edit_text_or_safe_send(
                call.message,
                style_title,
                reply_markup=style_markup
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    elif data == "style_robo":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å Robo
        set_user_style(user_id, "robo")
        user_states[user_id] = None
        
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_authorized = False
        license_type = user_states.get(f"{user_id}_license_type")
        
        if license_type:
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            if os.path.exists(config_path):
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                    if config.get("api_id") and config.get("api_hash"):
                        is_authorized = True
                except Exception:
                    pass
        
        if is_authorized:
            user_states[user_id] = "authorized"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            try:
                 await delete_and_send_image(
                    call.message,
                    "start_menu.png",
                    "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." if user_languages.get(user_id, "ru") == "ru" else "You are already authorized.",
                    reply_markup=get_main_inline_menu(),
                    user_id=user_id
                )
            except Exception:
                await edit_text_or_safe_send(
                    call.message,
                    "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." if user_languages.get(user_id, "ru") == "ru" else "You are already authorized.",
                    reply_markup=get_main_inline_menu()
                )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–º –º–µ–Ω—é
            language = user_languages.get(user_id, "ru")
            if language == "ru":
                caption = "üîë –ü–æ–¥–ø–∏—Å–∫–∞:\nBasic 15$ | Premium 20$ | PRO 25$\n\nüß© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:\n30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞\n\n\n"
                markup = get_start_menu()
            else:
                caption = "üîë Subscription:\nBasic 15$ | Premium 20$ | PRO 25$\n\nüß© Accounts:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ Duration:\n30 days from key activation\n\n\n"
                markup = get_start_menu_en()
            
            await delete_and_send_image(
                call.message,
                "start_menu.png",
                caption,
                reply_markup=markup,
                user_id=user_id
            )
        return

    elif data == "style_fallout":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å Fallout
        set_user_style(user_id, "fallout")
        user_states[user_id] = None
        
        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∑–¥–µ—Å—å - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        is_authorized = False
        license_type = user_states.get(f"{user_id}_license_type")
        
        if license_type:
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            if os.path.exists(config_path):
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                    if config.get("api_id") and config.get("api_hash"):
                        is_authorized = True
                except Exception:
                    pass
        
        if is_authorized:
            user_states[user_id] = "authorized"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            try:
                await delete_and_send_image(
                    call.message,
                    "start_menu.png",
                    "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." if user_languages.get(user_id, "ru") == "ru" else "You are already authorized.",
                    reply_markup=get_main_inline_menu(),
                    user_id=user_id
                )
            except Exception:
                await edit_text_or_safe_send(
                    call.message,
                    "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã." if user_languages.get(user_id, "ru") == "ru" else "You are already authorized.",
                    reply_markup=get_main_inline_menu()
                )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–º –º–µ–Ω—é
            language = user_languages.get(user_id, "ru")
            if language == "ru":
                caption = "üîë –ü–æ–¥–ø–∏—Å–∫–∞:\nBasic 15$ | Premium 20$ | PRO 25$\n\nüß© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:\n30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞\n\n\n"
                markup = get_start_menu()
            else:
                caption = "üîë Subscription:\nBasic 15$ | Premium 20$ | PRO 25$\n\nüß© Accounts:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ Duration:\n30 days from key activation\n\n\n"
                markup = get_start_menu_en()
            
            await delete_and_send_image(
                call.message,
                "start_menu.png",
                caption,
                reply_markup=markup,
                user_id=user_id
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    elif data == "free_trial":
        try:
            freetrial_data = load_freetrial()
            user_key = str(user_id)
            now = int(time.time())

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if user_key in freetrial_data:
                activated_at = int(freetrial_data[user_key].get("activated_at", 0))
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (24 —á–∞—Å–∞)
                if now - activated_at >= 86400:
                    await call.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏—Å—Ç—ë–∫.", show_alert=True)
                    return
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –Ω–æ authorized=false (–ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞) ‚Äî —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –≥–æ—Ç–æ–≤–∏–º –ø–∞–ø–∫–∏
                if freetrial_data[user_key].get("authorized") is False:
                    try:
                        # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ freetrial.json
                        freetrial_data[user_key]["authorized"] = True
                        save_freetrial(freetrial_data)
                    except Exception:
                        pass

                    user_states[f"{user_id}_license_type"] = "trial"
                    user_states[user_id] = "authorized"

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ trial
                    root = get_project_root()
                    user_base_dir = os.path.join(root, "user")
                    old_dir = os.path.join(user_base_dir, str(user_id))
                    new_dir = os.path.join(user_base_dir, f"{user_id}_trial")

                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ plain
                    old_settings_data = {}
                    old_settings_file = os.path.join(old_dir, "settings.json")
                    if os.path.exists(old_settings_file):
                        try:
                            with open(old_settings_file, "r", encoding="utf-8") as f:
                                old_settings_data = json.load(f) or {}
                        except Exception:
                            pass

                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å plain -> _trial, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ü–µ–ª–µ–≤—É—é
                    try:
                        if os.path.exists(old_dir):
                            if os.path.exists(new_dir):
                                shutil.rmtree(new_dir, ignore_errors=True)
                            os.rename(old_dir, new_dir)
                        else:
                            os.makedirs(new_dir, exist_ok=True)
                    except Exception:
                        try:
                            if os.path.exists(new_dir):
                                shutil.rmtree(new_dir, ignore_errors=True)
                            if os.path.exists(old_dir):
                                shutil.copytree(old_dir, new_dir)
                                shutil.rmtree(old_dir, ignore_errors=True)
                            else:
                                os.makedirs(new_dir, exist_ok=True)
                        except Exception:
                            os.makedirs(new_dir, exist_ok=True)

                    # –°–æ–∑–¥–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å config.json –¥–ª—è trial
                    try:
                        config_path = os.path.join(new_dir, "config.json")
                        config_data = {"api_id": 22133941, "api_hash": "c226d2309461ee258c2aefc4dd19b743", "accounts": []}
                        with open(config_path, "w", encoding="utf-8") as f:
                            json.dump(config_data, f, ensure_ascii=False, indent=2)
                    except Exception:
                        pass

                    # –û–±–Ω–æ–≤–∏—Ç—å settings.json —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è/—è–∑—ã–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º autosubscribe_limit
                    try:
                        settings_file = os.path.join(new_dir, "settings.json")
                        settings_data = {"language": user_languages.get(user_id, "ru")}
                        if "style" in old_settings_data:
                            settings_data["style"] = old_settings_data["style"]
                        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∏–∑ freetrial.json, –µ—Å–ª–∏ –µ—Å—Ç—å
                        try:
                            ft_tmp = load_freetrial()
                            rec_tmp = ft_tmp.get(user_key) or {}
                            if isinstance(rec_tmp.get("autosubscribe_limit"), int):
                                settings_data["autosubscribe_limit"] = rec_tmp["autosubscribe_limit"]
                        except Exception:
                            pass
                        with open(settings_file, "w", encoding="utf-8") as f:
                            json.dump(settings_data, f, ensure_ascii=False, indent=2)
                    except Exception:
                        pass

                    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–µ—Ä–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è plain, –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        if os.path.exists(old_dir) and os.path.isdir(old_dir):
                            shutil.rmtree(old_dir, ignore_errors=True)
                    except Exception:
                        pass

                    try:
                        await delete_and_send_image(
                            call.message,
                            "start_menu.png",
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if user_languages.get(user_id, "ru") == "ru" else "Select action:",
                            reply_markup=get_main_inline_menu(),
                            user_id=user_id
                        )
                    except TelegramAPIError as e:
                        if "message is not modified" not in str(e):
                            raise
                    return

                # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–ø—É—Å–∫–∞–µ–º –≤ –∫–∞–±–∏–Ω–µ—Ç
                user_states[f"{user_id}_license_type"] = "trial"
                user_states[user_id] = "authorized"
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º autosubscribe_limit –∏–∑ freetrial.json –≤ settings.json (–Ω–µ –∑–∞—Ç–∏—Ä–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ)
                try:
                    ft_sync = load_freetrial()
                    rec_sync = ft_sync.get(user_key) or {}
                    if isinstance(rec_sync.get("autosubscribe_limit"), int):
                        settings_now = load_user_settings(user_id, "trial") or {}
                        if not isinstance(settings_now.get("autosubscribe_limit"), int):
                            update_user_settings(user_id, {"autosubscribe_limit": rec_sync["autosubscribe_limit"]}, "trial")
                except Exception:
                    pass
                await delete_and_send_image(
                    call.message,
                    "start_menu.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if user_languages.get(user_id, "ru") == "ru" else "Select action:",
                    reply_markup=get_main_inline_menu(),
                    user_id=user_id
                )
                return

            # –ò–Ω–∞—á–µ –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
            update_freetrial(user_id)
            # –Ø–≤–Ω–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ authorized=true
            try:
                ft2 = load_freetrial()
                rec = ft2.get(user_key) or {}
                rec["authorized"] = True
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ autosubscribe_limit –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
                if not isinstance(rec.get("autosubscribe_limit"), int):
                    rec["autosubscribe_limit"] = 0
                ft2[user_key] = rec
                save_freetrial(ft2)
            except Exception:
                pass
            user_states[f"{user_id}_license_type"] = "trial"
            user_states[user_id] = "authorized"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∞—Ö
            update_user_main_info(
                user_id,
                license_type="trial"
            )

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤ –¥–ª—è trial (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_dir = os.path.join(user_base_dir, str(user_id))  # –ü–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            new_dir = os.path.join(user_base_dir, f"{user_id}_trial")  # –ü–∞–ø–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –î–û –µ—ë —É–¥–∞–ª–µ–Ω–∏—è
            old_settings_data = {}
            old_settings_file = os.path.join(old_dir, "settings.json")
            if os.path.exists(old_settings_file):
                try:
                    with open(old_settings_file, "r", encoding="utf-8") as f:
                        old_settings_data = json.load(f) or {}
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ ‚Äî –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ —Å—É—Ñ—Ñ–∏–∫—Å–Ω—É—é
            if os.path.exists(old_dir):
                try:
                    # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è —É–∂–µ –µ—Å—Ç—å, —É–¥–∞–ª–∏–º –µ—ë –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º
                    if os.path.exists(new_dir):
                        shutil.rmtree(new_dir)
                    os.rename(old_dir, new_dir)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                    try:
                        # –§–æ–ª–ª–±—ç–∫: –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é
                        if os.path.exists(new_dir):
                            shutil.rmtree(new_dir)
                        shutil.copytree(old_dir, new_dir)
                        shutil.rmtree(old_dir)
                    except Exception as ee:
                        print(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ñ–æ–ª–ª–±—ç–∫–µ: {ee}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç—É—é —Ü–µ–ª–µ–≤—É—é
                        os.makedirs(new_dir, exist_ok=True)
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                os.makedirs(new_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º config.json —Å API –¥–∞–Ω–Ω—ã–º–∏
            config_path = os.path.join(new_dir, "config.json")
            
            # API –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ —É –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            config_data = {
                "api_id": 22133941,
                "api_hash": "c226d2309461ee258c2aefc4dd19b743",
                "accounts": []
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º config.json
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump(config_data, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º settings.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
            settings_file = os.path.join(new_dir, "settings.json")
            settings_data = {"language": user_languages.get(user_id, "ru")}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if "style" in old_settings_data:
                settings_data["style"] = old_settings_data["style"]
                #print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {old_settings_data['style']}")
            
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings_data, f, ensure_ascii=False, indent=2)
            
            message = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ωüí•" if user_languages.get(user_id, "ru") == "ru" else "Free trial activatedüí•"
            await call.answer(message, show_alert=True)
            
            # –ó–∞—â–∏—Ç–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ plain-–ø–∞–ø–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ trial
            try:
                if os.path.exists(old_dir) and os.path.isdir(old_dir):
                    shutil.rmtree(old_dir, ignore_errors=True)
            except Exception:
                pass
            try:
                await delete_and_send_image(
                    call.message,
                    "start_menu.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if user_languages.get(user_id, "ru") == "ru" else "Select action:",
                    reply_markup=get_main_inline_menu(),
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
            await call.answer("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)
        return

    if data == "start_auth":
        try:
            markup = get_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_referral_menu_en()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "password.png",
                "–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ ? –ü–æ–ª—É—á–∏—Ç–µ 72 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ !" if user_languages.get(user_id, "ru") == "ru" else "Have a referral code? Get 72 hours free!",
                reply_markup=markup,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_referral_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "wait_referral_choice"
        return

    elif data == "enter_referral":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Ä–∞–Ω–µ–µ, –Ω–µ –¥–∞–µ–º –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ —Å–Ω–æ–≤–∞
        if has_user_used_referral(user_id):
            await call.answer("–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.", show_alert=True)
            return
        try:
            markup = get_back_to_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_back_to_referral_menu_en()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "password.png",
                "üì© –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:" if user_languages.get(user_id, "ru") == "ru" else "Enter referral code:",
                reply_markup=markup,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_referral_input_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "wait_referral_code"
        return

    elif data == "skip_referral":
        try:
            markup = get_back_to_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_back_to_referral_menu_en()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "password.png",
                "ü™™ –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:" if user_languages.get(user_id, "ru") == "ru" else "Enter license code:",
                reply_markup=markup,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_password_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "wait_license"
        return

    elif data == "back_to_language":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        user_states[user_id] = "waiting_language"
        try:
            await edit_text_or_safe_send(
                call.message,
                "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",
                reply_markup=get_language_menu()
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "back_to_start":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        if user_id not in user_languages:
            user_languages[user_id] = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
            save_user_languages()
        try:
            markup = get_start_menu() if user_languages.get(user_id, "ru") == "ru" else get_start_menu_en()
            await delete_and_send_image(
                call.message,
                "start_menu.png",
                "üîë –ü–æ–¥–ø–∏—Å–∫–∞:\n Basic 15$ | Premium 20$ | PRO 25$\n\nüß© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:\n 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞\n\n\n" if user_languages.get(user_id, "ru") == "ru" else "üîë Subscription:\n Basic 15$ | Premium 20$ | PRO 25$\n\nüß© Accounts:\n Basic x5 | Premium x10 | PRO x15\n\n‚è≥ Duration:\n 30 days from key activation\n\n\n",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = None
        return

    elif data == "back_to_referral":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª–∞ "–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥?" –∏–∑ –≤–≤–æ–¥–∞ –∫–æ–¥–∞/–ª–∏—Ü–µ–Ω–∑–∏–∏
        try:
            referral_markup = get_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_referral_menu_en()
            await delete_and_send_image(
                call.message,
                "password.png",
                "–ï—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ ? –ü–æ–ª—É—á–∏—Ç–µ 72 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ !" if user_languages.get(user_id, "ru") == "ru" else "Have a referral code? Get 72 hours free!",
                reply_markup=referral_markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "wait_referral_choice"
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    elif data == "multitool":
        await call.answer("–ú—É–ª—å—Ç–∏—Ç—É–ª ‚öíÔ∏è - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return
    
    elif data == "parsing":
        await call.answer("–ü–∞—Ä—Å–∏–Ω–≥ üß≤ - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return
    
    elif data == "chat_search":
        await call.answer("–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ üîç - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return
    
    elif data == "autosubscribe":
        # –ë—ã—Å—Ç—Ä—ã–π –≥–µ–π—Ç –¥–æ—Å—Ç—É–ø–∞
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è trial –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª
        try:
            license_type = detect_license_type(user_id)
            if str(license_type).endswith("trial") or str(license_type) == "trial":
                # –ß–∏—Ç–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ settings.json: –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 5 ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
                if get_user_autosub_limit(user_id) >= 5:
                    try:
                        await call.answer(
                            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á.",
                            show_alert=True
                        )
                    except Exception:
                        pass
                    return
        except Exception:
            pass

        accounts = load_user_accounts(user_id)
        if not accounts:
            await call.answer("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return

        # –†–µ–Ω–¥–µ—Ä–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        selected_phone = user_states.get(f"{user_id}_autosub_phone")
        for acc in accounts:
            label = acc.get("username") or acc.get("name") or acc.get("phone")
            label_fixed = f"{label: <5}"
            markup.inline_keyboard.append([
                InlineKeyboardButton(text=f"{label_fixed}", callback_data=f"autosub_acc_{acc.get('phone')}")
            ])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_manage")])

        try:
            await delete_and_send_image(
                call.message,
                "accounts.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    
    elif data == "analytics":
        await call.answer("–ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ üìà  - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    elif data == "partner_program":
        try:
            await delete_and_send_image(
                call.message,
                ["affiliate.png", "affiliate.jpg"],
                "SOON üîú",
                reply_markup=get_back_only_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    
    elif data == "instructions":
        try:
            await delete_and_send_image(
                call.message,
                "tutorial.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:" if user_languages.get(user_id, "ru") == "ru" else "Select section to get instructions:",
                reply_markup=get_instructions_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    
    elif data == "free_nft":
        try:
            await delete_and_send_image(
                call.message,
                "freenft.png",
                "SOON üîú",
                reply_markup=get_back_only_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    
    elif data == "settings":
        try:
            await delete_and_send_image(
                call.message,
                "settings.png",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:" if user_languages.get(user_id, "ru") == "ru" else "Settings:",
                reply_markup=get_settings_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif data == "change_language":
        try:
            # –°–æ–∑–¥–∞–µ–º markup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —è–∑—ã–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è"
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([
                InlineKeyboardButton(text="RU üá∑üá∫", callback_data="language_ru_settings"),
                InlineKeyboardButton(text="ENG üá∫üá∏", callback_data="language_en_settings")
            ])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_settings")])
            
            await delete_and_send_image(
                call.message,
                "settings.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:" if user_languages.get(user_id, "ru") == "ru" else "Choose interface language:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "language_ru_settings":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        save_single_user_language(user_id, "ru")
        try:
            markup = get_settings_menu() if user_languages.get(user_id, "ru") == "ru" else get_settings_menu_en()
            await delete_and_send_image(
                call.message,
                "settings.png",
                "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!" if user_languages.get(user_id, "ru") == "ru" else "üá∑üá∫ Russian language activated!",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "language_en_settings":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        save_single_user_language(user_id, "en")
        try:
            markup = get_settings_menu() if user_languages.get(user_id, "ru") == "ru" else get_settings_menu_en()
            await delete_and_send_image(
                call.message,
                "settings.png",
                "üá∫üá∏ English language activated!" if user_languages.get(user_id, "ru") == "ru" else "üá∫üá∏ English language activated!",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    
    elif data == "toggle_images":
        await call.answer("SOON üîú", show_alert=True)
        return

    elif data == "change_style":
        try:
            language = user_languages.get(user_id, "ru")
            # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ callback-–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if language == "ru":
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo_settings"),
                    InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout_settings")
                ])
                markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_settings")])
                title = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
            else:
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo_settings"),
                    InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout_settings")
                ])
                markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_settings")])
                title = "Choose interface style:"
            await delete_and_send_image(
                call.message,
                "settings.png",
                title,
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "style_robo_settings":
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å robo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è (–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
            set_user_style(user_id, "robo")
            language = user_languages.get(user_id, "ru")
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if language == "ru":
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo_settings"),
                    InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout_settings")
                ])
                markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_settings")])
                title = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
            else:
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo_settings"),
                    InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout_settings")
                ])
                markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_settings")])
                title = "Choose interface style:"
            await delete_and_send_image(
                call.message,
                "settings.png",
                title,
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "style_fallout_settings":
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å fallout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è (–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
            set_user_style(user_id, "fallout")
            language = user_languages.get(user_id, "ru")
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if language == "ru":
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo_settings"),
                    InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout_settings")
                ])
                markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="back_to_settings")])
                title = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
            else:
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ Robo", callback_data="style_robo_settings"),
                    InlineKeyboardButton(text="‚ò¢Ô∏è Fallout", callback_data="style_fallout_settings")
                ])
                markup.inline_keyboard.append([InlineKeyboardButton(text="Back üîô", callback_data="back_to_settings")])
                title = "Choose interface style:"
            await delete_and_send_image(
                call.message,
                "settings.png",
                title,
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    elif data == "instruction_statistics":
        await call.answer("SOON üîú", show_alert=True)
        return
    
    elif data == "instruction_mailing":
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            from instruction_mailing import send_mailing_instruction
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language = user_languages.get(user_id, "ru")
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
            try:
                await call.message.delete()
            except Exception:
                pass
            await send_mailing_instruction(
                bot=bot,
                chat_id=call.message.chat.id,
                user_id=user_id,
                language=language
            )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return
    
    elif data == "instruction_postman":
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ—á—Ç—ã
            from instruction_postman import get_postman_instruction_text, get_postman_instruction_keyboard, get_postman_instruction_text_en, get_postman_instruction_keyboard_en
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language = user_languages.get(user_id, "ru")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if language == "en":
                text = get_postman_instruction_text_en()
                keyboard = get_postman_instruction_keyboard_en()
            else:
                text = get_postman_instruction_text()
                keyboard = get_postman_instruction_keyboard()
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            try:
                await call.message.delete()
            except Exception:
                pass
            await bot.send_message(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ—á—Ç—ã: {e}")
        return
    
    elif data == "instruction_autoresponder":
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
            from instruction_autoresponder import get_autoresponder_instruction_text, get_autoresponder_instruction_keyboard, get_autoresponder_instruction_text_en, get_autoresponder_instruction_keyboard_en
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language = user_languages.get(user_id, "ru")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
            if language == "en":
                text = get_autoresponder_instruction_text_en()
                keyboard = get_autoresponder_instruction_keyboard_en()
            else:
                text = get_autoresponder_instruction_text()
                keyboard = get_autoresponder_instruction_keyboard()
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            try:
                await call.message.delete()
            except Exception:
                pass
            await bot.send_message(
                chat_id=call.message.chat.id,
                text=text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")
        return
    
    elif data == "instruction_multitool":
        await call.answer("SOON üîú", show_alert=True)
        return
    
    elif data == "instruction_parsing":
        await call.answer("SOON üîú", show_alert=True)
        return
    
    elif data == "instruction_chat_search":
        await call.answer("SOON üîú", show_alert=True)
        return
    
    elif data == "instruction_autosubscribe":
        try:
            from instruction_autosubscribe import send_autosubscribe_instruction
            try:
                await call.message.delete()
            except Exception:
                pass
            await send_autosubscribe_instruction(
                bot=bot,
                chat_id=call.message.chat.id,
                user_id=user_id,
                language=user_languages.get(user_id, "ru"),
            )
        except Exception as e:
            await call.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return
    
    elif data == "instruction_analytics":
        await call.answer("SOON üîú", show_alert=True)
        return

    if data == "manage_accounts":
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            await call.message.delete()
            caption = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" if user_languages.get(user_id, "ru") == "ru" else "Account management."
            await send_accounts_manage_menu_with_image(bot, call.message.chat.id, caption)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        user_states[user_id] = "manage_accounts"

    elif data == "back_to_menu":
        try:
            await delete_and_send_image(
                call.message,
                "start_menu.png",
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é." if user_languages.get(user_id, "ru") == "ru" else "You returned to the main menu.",
                reply_markup=get_main_inline_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "authorized"

    elif data == "back_to_settings":
        try:
            markup = get_settings_menu() if user_languages.get(user_id, "ru") == "ru" else get_settings_menu_en()
            await delete_and_send_image(
                call.message,
                "settings.png",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:" if user_languages.get(user_id, "ru") == "ru" else "Settings:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "accounts_menu":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = get_active_accounts_by_sessions(user_id)
        if accounts:
            acc_lines = []
            for acc in accounts:
                if acc.get("username"):
                    acc_lines.append(f"@{acc['username']}")
                elif acc.get("name"):
                    acc_lines.append(acc["name"])
                else:
                    acc_lines.append(acc.get("phone", ""))
            accs_text = "\n".join(acc_lines)
            caption = f"–ê–∫–∫–∞—É–Ω—Ç—ã:\n\n{accs_text}" if user_languages.get(user_id, "ru") == "ru" else f"Accounts:\n\n{accs_text}"
        else:
            caption = "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤." if user_languages.get(user_id, "ru") == "ru" else "Accounts:\n\nNo authorized accounts."
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await delete_and_send_image(
                call.message,
                "accounts.png",
                caption,
                reply_markup=get_accounts_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "accounts_menu"

    elif data == "back_to_manage":
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            await call.message.delete()
            caption = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" if user_languages.get(user_id, "ru") == "ru" else "Account management."
            await send_accounts_manage_menu_with_image(bot, call.message.chat.id, caption)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        user_states[user_id] = "manage_accounts"

    elif data == "back_to_accounts_menu":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–∞–ª–∏—á–∏—é .session —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        accounts = get_active_accounts_by_sessions(user_id)
        if accounts:
            acc_lines = []
            for acc in accounts:
                if acc.get("username"):
                    acc_lines.append(f"@{acc['username']}")
                elif acc.get("name"):
                    acc_lines.append(acc["name"])
                else:
                    acc_lines.append(acc.get("phone", ""))
            accs_text = "\n".join(acc_lines)
            caption = f"–ê–∫–∫–∞—É–Ω—Ç—ã:\n\n{accs_text}" if user_languages.get(user_id, "ru") == "ru" else f"Accounts:\n\n{accs_text}"
        else:
            caption = "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤." if user_languages.get(user_id, "ru") == "ru" else "Accounts:\n\nNo authorized accounts."
        try:
            await delete_and_send_image(
                call.message,
                "accounts.png",
                caption,
                reply_markup=get_accounts_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "accounts_menu"

    elif data == "add_account":
        accounts = load_user_accounts(user_id)
        max_allowed = get_max_sessions_for_license(user_id)
        if len(accounts) >= max_allowed:
            message = "–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤." if user_languages.get(user_id, "ru") == "ru" else "You have already added the maximum number of accounts."
            await call.answer(message, show_alert=True)
        else:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                sent_message = await delete_and_send_image(
                    call.message,
                    "nonexistent_image.png",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è fallback –Ω–∞ —Ç–µ–∫—Å—Ç
                    "–í —Ü–µ–ª—è—Ö –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –≤—Å–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã 2FA –∏ –∫–æ–¥ –ø–∞—Ä–æ–ª—å, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–∏–º –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É üîê\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" if user_languages.get(user_id, "ru") == "ru" else "Phone number:",
                    reply_markup=back_menu_auth,
                    user_id=user_id
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                user_states[f"{user_id}_phone_message_id"] = sent_message.message_id
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            user_states[user_id] = "wait_phone"

    elif data == "deauth_account":
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º delete_and_send_image —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await delete_and_send_image(
                call.message,
                "nonexistent_image.png",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è fallback –Ω–∞ —Ç–µ–∫—Å—Ç
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:" if user_languages.get(user_id, "ru") == "ru" else "Select account to deauthorize:",
                reply_markup=get_deauth_accounts_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "deauth_menu"

    elif data.startswith("deauth_"):
        phone = data.replace("deauth_", "")
        accounts = load_user_accounts(user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–µ–π—á–∞—Å –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–µ—Ä–≤–∏—Å–µ
        active_services = []
        try:
            # –†–∞—Å—Å—ã–ª–∫–∞
            if (
                mailing_states.get(user_id, {}).get("active")
                and phone in (mailing_states.get(user_id, {}).get("selected_accounts") or [])
            ):
                active_services.append("–†–∞—Å—Å—ã–ª–∫–∞")

            # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
            if (
                autoresponder_states.get(user_id, {}).get("active")
                and phone in (autoresponder_states.get(user_id, {}).get("selected_accounts") or [])
            ):
                active_services.append("–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫")

            # –ü–æ—á—Ç–∞ (mailboxer/postman)
            if postman_states.get(user_id, {}).get("active"):
                sel_accs = postman_states.get(user_id, {}).get("selected_accounts") or []
                sel_postman = postman_states.get(user_id, {}).get("selected_postman")
                if phone in sel_accs or phone == sel_postman:
                    active_services.append("–ü–æ—á—Ç–∞")

            # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ (–ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–¥–∞—á–∞–º –≤–∏–¥–∞ autosubscribe:{phone})
            user_tasks = active_tasks.get(user_id, {}) if 'active_tasks' in globals() else {}
            for t_name, t in list(user_tasks.items()):
                if t_name == f"autosubscribe:{phone}" and not t.done() and not t.cancelled():
                    active_services.append("–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞")
                    break
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            pass

        if active_services:
            services_list = ", ".join([f'"{name}"' for name in active_services])
            alert_text = (
                f"–î–ª—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Ä–∞–±–æ—Ç—É –≤ —Å–µ—Ä–≤–∏—Å–µ {services_list}."
            )
            await call.answer(alert_text, show_alert=True)
            return
        # –ù–∞–π—Ç–∏ –∏–º—è —Å–µ—Å—Å–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        session_name = None
        for acc in accounts:
            if acc.get("phone") == phone:
                session_name = acc.get("name", phone)
                break

        # 1) –ü–µ—Ä–µ–¥ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≥–∞—Å–∏–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            # 1.1 –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ—Ä–≤–∏—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –º–æ–≥—É—Ç –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
            # –†–∞—Å—Å—ã–ª–∫–∞
            try:
                if user_id in mailing_states and (
                    phone in (mailing_states.get(user_id, {}).get("selected_accounts") or [])
                ):
                    await stop_task(user_id, "mailing")
            except Exception:
                pass
            # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
            try:
                if user_id in autoresponder_states and (
                    phone in (autoresponder_states.get(user_id, {}).get("selected_accounts") or [])
                ):
                    await stop_task(user_id, "autoresponder")
            except Exception:
                pass
            # –ü–æ—á—Ç–∞ (mailboxer)
            try:
                if user_id in postman_states:
                    sel_accs = postman_states.get(user_id, {}).get("selected_accounts") or []
                    sel_postman = postman_states.get(user_id, {}).get("selected_postman")
                    if phone in sel_accs or phone == sel_postman:
                        await stop_task(user_id, "mailboxer")
            except Exception:
                pass
            # –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            try:
                await stop_task(user_id, f"autosubscribe:{phone}")
            except Exception:
                pass
            # 1.2 –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–Ω–∏–º–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            if session_name:
                try:
                    await stop_task(user_id, f"dialogs_monitor_{session_name}")
                except Exception:
                    pass
                try:
                    await remove_event_handlers(user_id, session_name)
                except Exception:
                    pass
                # 1.3 –û—Ç–∫–ª—é—á–∞–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    await disconnect_client(user_id, session_name)
                except Exception:
                    pass
        except Exception:
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–∞–ª–∞ —Å–±–æ–π
            pass
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        license_type = user_states.get(f"{user_id}_license_type")
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
        
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {}
        if os.path.exists(config_path):
            try:
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
            except Exception:
                config = {}
        
        print(f"üîç [DEAUTH] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(config.get('accounts', []))} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print(f"üîç [DEAUTH] –î–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: {phone}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "accounts" in config:
            original_count = len(config["accounts"])
            config["accounts"] = [acc for acc in config["accounts"] if acc.get("phone") != phone]
            new_count = len(config["accounts"])
            print(f"üîç [DEAUTH] –£–¥–∞–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: –±—ã–ª–æ {original_count}, —Å—Ç–∞–ª–æ {new_count}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        
        print(f"üîç [DEAUTH] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å {len(config.get('accounts', []))} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        
        # –£–¥–∞–ª—è–µ–º .session —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
        sessions_dir = os.path.join(get_user_subdir(user_id, "bot", license_type), "sessions")
        if session_name:
            session_path = os.path.join(sessions_dir, f"{session_name}.session")
            if os.path.exists(session_path):
                try:
                    os.remove(session_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {session_path}: {e}")
                    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ license.json
        remove_session_from_all_subdirs(user_id, session_name)
        remove_session_from_license(user_id, session_name)
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤ cookies.json (–ù–ï –£–î–ê–õ–Ø–ï–ú!)
        try:
            cookies_file = "cookies.json"
            if os.path.exists(cookies_file):
                with open(cookies_file, "r", encoding="utf-8") as f:
                    cookies_data = json.load(f)
                
                user_id_str = str(user_id)
                if user_id_str in cookies_data and session_name in cookies_data[user_id_str]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    from datetime import datetime
                    deauth_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ deauthorized —Å –¥–∞—Ç–æ–π
                    cookies_data[user_id_str][session_name]["deauthorized"] = deauth_date
                    
                    with open(cookies_file, "w", encoding="utf-8") as f:
                        json.dump(cookies_data, f, ensure_ascii=False, indent=2)
                    
                    print(f"‚úÖ –°–µ—Å—Å–∏—è {session_name} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤ cookies.json")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å cookies.json: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –≤ –ª–æ–≥–∞—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        update_user_accounts_info(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        updated_accounts = load_user_accounts(user_id)
        if not updated_accounts:
            if user_languages.get(user_id, "ru") == "ru":
                text = "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            else:
                text = "No accounts to deauthorize."
        else:
            if user_languages.get(user_id, "ru") == "ru":
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:"
            else:
                text = "Select account to deauthorize:"
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º delete_and_send_image —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await delete_and_send_image(
                call.message,
                "nonexistent_image.png",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è fallback –Ω–∞ —Ç–µ–∫—Å—Ç
                text,
                reply_markup=get_deauth_accounts_menu(user_id)
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "deauth_menu"

    elif data == "subscription":
        license_type = user_states.get(f"{user_id}_license_type")
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
        
        if license_type == "owner":
            await call.answer("OWNER üèÜ", show_alert=True)
        elif license_type == "admin":
            await call.answer("ADMIN üéó", show_alert=True)
        elif license_type == "trial":
            # –î–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_left = get_freetrial_time_left(user_id)
            if time_left > 0:
                hours = time_left // 3600
                minutes = (time_left % 3600) // 60
                seconds = time_left % 60
                if user_languages.get(user_id, "ru") == "ru":
                    msg = f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {hours:02d}:{minutes:02d}:{seconds:02d}"
                else:
                    msg = f"Free trial: {hours:02d}:{minutes:02d}:{seconds:02d}"
                await call.answer(msg, show_alert=True)
            else:
                message = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫." if user_languages.get(user_id, "ru") == "ru" else "Free trial expired."
                await call.answer(message, show_alert=True)
        else:
            lic = load_licenses().get(str(user_id))
            if lic:
                activated_at = lic.get("activated_at", 0)
                now = int(time.time())
                base_end_ts = activated_at + LICENSE_DURATION_DAYS * 86400
                effective_end_ts = base_end_ts + get_referral_bonus_seconds(user_id)
                seconds_left = effective_end_ts - now
                if seconds_left > 0:
                    days = seconds_left // 86400
                    hours = (seconds_left % 86400) // 3600
                    minutes = (seconds_left % 3600) // 60
                    if user_languages.get(user_id, "ru") == "ru":
                        msg = f"–û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
                    else:
                        msg = f"Remaining: {days} days {hours} hours {minutes} minutes"
                    await call.answer(msg, show_alert=True)
                else:
                    message = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç—ë–∫." if user_languages.get(user_id, "ru") == "ru" else "Your license has expired."
                    await call.answer(message, show_alert=True)
            else:
                message = "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." if user_languages.get(user_id, "ru") == "ru" else "License not found."
                await call.answer(message, show_alert=True)

    elif data == "logout":
        try:
            if user_languages.get(user_id, "ru") == "ru":
                text = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n–í—ã—Ö–æ–¥ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö Telegram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –±–æ—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ ?"
            else:
                text = "‚ö†Ô∏è Warning:\nLogging out will deauthorize your Telegram accounts from the bot and also delete all text templates.\n\nAre you sure you want to log out?"
            markup = get_logout_confirmation_menu() if user_languages.get(user_id, "ru") == "ru" else get_logout_confirmation_menu_en()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º delete_and_send_image —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await delete_and_send_image(
                call.message,
                "nonexistent_image.png",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è fallback –Ω–∞ —Ç–µ–∫—Å—Ç
                text,
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "logout_confirm":
        # –ë—ã—Å—Ç—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–ª–±—ç–∫ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.
        # –í—Å—è —Ç—è–∂—ë–ª–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI.
        try:
            await call.answer()
        except Exception:
            pass
        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º UI –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        try:
            await delete_and_send_image(
                call.message,
                "start_menu.png",
                "üîë –ü–æ–¥–ø–∏—Å–∫–∞:\nBasic 15$ | Premium 20$ | PRO 25$\n\nüß© –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\nBasic x5 | Premium x10 | PRO x15\n\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:\n30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞\n\n\n",
                reply_markup=get_start_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise

        async def _perform_logout_flow(user_id_inner: int):
            try:
                user_states[user_id_inner] = "wait_license"
                try:
                    await connection_manager.stop_monitoring(user_id_inner)
                except Exception:
                    pass
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –¥–µ—Ä–∂–∞–ª–∏ —Ä–µ—Å—É—Ä—Å—ã
                try:
                    await stop_task(user_id_inner, "autoresponder")
                except Exception:
                    pass
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å –∫–∞–∫ –∑–∞–¥–∞—á–∞ "mailing")
                try:
                    await stop_task(user_id_inner, "mailing")
                except Exception:
                    pass
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    if user_id_inner in active_tasks:
                        for tname in list(active_tasks[user_id_inner].keys()):
                            if tname.startswith("autosubscribe:"):
                                try:
                                    await stop_task(user_id_inner, tname)
                                except Exception:
                                    pass
                except Exception:
                    pass
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º
                try:
                    if user_id_inner in active_clients:
                        for _session_name in list(active_clients[user_id_inner].keys()):
                            try:
                                await stop_task(user_id_inner, f"dialogs_monitor_{_session_name}")
                            except Exception:
                                pass
                except Exception:
                    pass
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å mailboxer –∫–∞–∫ –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ active_tasks)
                try:
                    await stop_task(user_id_inner, "mailboxer")
                except Exception:
                    pass
                try:
                    if user_id_inner in active_clients:
                        for _session_name in list(active_clients[user_id_inner].keys()):
                            try:
                                await remove_event_handlers(user_id_inner, _session_name)
                            except Exception:
                                pass
                except Exception:
                    pass
                try:
                    if user_id_inner in active_clients:
                        for _session_name in list(active_clients[user_id_inner].keys()):
                            try:
                                await stop_task(user_id_inner, f"dialogs_monitor_{_session_name}")
                            except Exception:
                                pass
                except Exception:
                    pass

                # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã, –Ω–æ –Ω–µ –∑–∞–≤–∏—Å–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                try:
                    await asyncio.wait_for(disconnect_all_clients(user_id_inner), timeout=8)
                except Exception:
                    # –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ/–æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã—Ö–æ–¥, –≤—ã–ø–æ–ª–Ω—è—è –º—è–≥–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä
                    try:
                        if user_id_inner in active_clients:
                            active_clients[user_id_inner].clear()
                    except Exception:
                        pass

                if user_id_inner in active_tasks:
                    for task_name in list(active_tasks[user_id_inner].keys()):
                        await stop_task(user_id_inner, task_name)

                if user_id_inner in mailing_states:
                    del mailing_states[user_id_inner]
                    update_service_state("mailing_states", user_id_inner, None)
                if user_id_inner in postman_states:
                    del postman_states[user_id_inner]
                    update_service_state("postman_states", user_id_inner, None)
                if user_id_inner in autoresponder_states:
                    del autoresponder_states[user_id_inner]
                    update_service_state("autoresponder_states", user_id_inner, None)

                license_type_in = user_states.get(f"{user_id_inner}_license_type")
                if not license_type_in:
                    license_type_in = detect_license_type(user_id_inner)
                    if license_type_in:
                        user_states[f"{user_id_inner}_license_type"] = license_type_in
                user_dir_in = get_user_dir(user_id_inner, license_type_in)
                config_path_in = os.path.join(user_dir_in, "config.json")
                if os.path.exists(config_path_in):
                    try:
                        with open(config_path_in, "r", encoding="utf-8") as f:
                            config_in = json.load(f)
                        config_in.pop("api_id", None)
                        config_in.pop("api_hash", None)
                        with open(config_path_in, "w", encoding="utf-8") as f:
                            json.dump(config_in, f, ensure_ascii=False, indent=2)
                    except Exception:
                        pass

                # –î–∞–µ–º —à–∞–Ω—Å –∑–∞–¥–∞—á–∞–º/–∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å .session –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                try:
                    for _ in range(5):  # –¥–æ ~5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        has_active_tasks = False
                        try:
                            if user_id_inner in active_tasks and any(
                                (t is not None and not t.done()) for t in active_tasks[user_id_inner].values()
                            ):
                                has_active_tasks = True
                        except Exception:
                            has_active_tasks = False
                        has_active_clients = bool(user_id_inner in active_clients and active_clients[user_id_inner])
                        if not has_active_tasks and not has_active_clients:
                            break
                        await asyncio.sleep(1)
                except Exception:
                    pass

                try:
                    root = get_project_root()
                    base_user_dir = os.path.join(root, "user")
                    plain_dir_in = os.path.join(base_user_dir, str(user_id_inner))
                    suffix_dir_in = None
                    if user_dir_in and os.path.isdir(user_dir_in):
                        suffix_dir_in = user_dir_in
                    else:
                        for suf in ["_owner", "_admin", "_pro", "_premium", "_basic", "_trial"]:
                            candidate = os.path.join(base_user_dir, f"{user_id_inner}{suf}")
                            if os.path.isdir(candidate):
                                suffix_dir_in = candidate
                                break
                    if suffix_dir_in:
                        if os.path.exists(plain_dir_in):
                            shutil.rmtree(plain_dir_in, ignore_errors=True)
                        os.rename(suffix_dir_in, plain_dir_in)
                    else:
                        user_states[f"{user_id_inner}_force_plain_create"] = True
                        os.makedirs(plain_dir_in, exist_ok=True)
                    settings_path_in = os.path.join(plain_dir_in, "settings.json")
                    if not os.path.exists(settings_path_in):
                        with open(settings_path_in, "w", encoding="utf-8") as f:
                            json.dump({}, f, ensure_ascii=False, indent=2)
                    for item in os.listdir(plain_dir_in):
                        full_path = os.path.join(plain_dir_in, item)
                        if os.path.abspath(full_path) == os.path.abspath(settings_path_in):
                            continue
                        if os.path.isfile(full_path) or os.path.islink(full_path):
                            try:
                                os.remove(full_path)
                            except Exception:
                                pass
                        elif os.path.isdir(full_path):
                            try:
                                shutil.rmtree(full_path, ignore_errors=True)
                            except Exception:
                                pass
                    # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –æ—Ç–º–µ—á–∞–µ–º authorized=false –∏ –≤ license.json, –∏ –≤ freetrial.json (–µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å)
                    try:
                        licenses = load_licenses()
                        rec = licenses.get(str(user_id_inner))
                        if isinstance(rec, dict):
                            rec["authorized"] = False
                            licenses[str(user_id_inner)] = rec
                            save_licenses(licenses)
                    except Exception:
                        pass
                    try:
                        ft = load_freetrial()
                        rec2 = ft.get(str(user_id_inner))
                        if isinstance(rec2, dict):
                            rec2["authorized"] = False
                            ft[str(user_id_inner)] = rec2
                            save_freetrial(ft)
                    except Exception:
                        pass
                except Exception:
                    pass
                try:
                    user_states.pop(f"{user_id_inner}_force_plain_create", None)
                except Exception:
                    pass

                try:
                    root = get_project_root()
                    base_user_dir = os.path.join(root, "user")
                    for suf in ("_owner", "_admin", "_pro", "_premium", "_basic", "_trial"):
                        extra = os.path.join(base_user_dir, f"{user_id_inner}{suf}")
                        if os.path.isdir(extra):
                            try:
                                shutil.rmtree(extra, ignore_errors=True)
                            except Exception:
                                pass
                except Exception:
                    pass

                try:
                    user_states.pop(f"{user_id_inner}_license_type", None)
                except Exception:
                    pass

                mailboxer_in = user_sessions.get(user_id_inner, {}).get("mailboxer")
                if mailboxer_in:
                    if "stop_event" in mailboxer_in and mailboxer_in["stop_event"]:
                        stop_event = mailboxer_in["stop_event"]
                        stop_event.set()
                    if "process" in mailboxer_in and mailboxer_in["process"]:
                        p = mailboxer_in["process"]
                        if p.is_alive():
                            p.terminate()
                            p.join(timeout=5)
                    print(f"[LOGOUT] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è user_id: {user_id_inner}")
                    if user_id_inner in active_clients:
                        print(f"[LOGOUT] –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è user_id {user_id_inner}: {list(active_clients[user_id_inner].keys())}")
                        for session_name in active_clients[user_id_inner].keys():
                            print(f"[LOGOUT] –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è: {session_name}")
                            await remove_event_handlers(user_id_inner, session_name)
                    else:
                        print(f"[LOGOUT] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è user_id {user_id_inner}")
                    accounts = load_user_accounts(user_id_inner)
                    for acc in accounts:
                        session_name = acc.get("name")
                        if session_name:
                            print(f"[LOGOUT] –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}")
                            await remove_event_handlers(user_id_inner, session_name)
                    user_sessions[user_id_inner].pop("mailboxer")

                # UI —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã—à–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            except Exception:
                pass

        asyncio.create_task(_perform_logout_flow(user_id))
        return

    elif data == "logout_cancel":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã—Ö–æ–¥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            await delete_and_send_image(
                call.message,
                "start_menu.png",
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" if user_languages.get(user_id, "ru") == "ru" else "Welcome!",
                reply_markup=get_main_inline_menu(),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return



    elif data == "mailing_templates":
        accounts = get_active_accounts_by_sessions(user_id)
        if not accounts:
            message = "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤." if user_languages.get(user_id, "ru") == "ru" else "No authorized accounts."
            await call.answer(message, show_alert=True)
            return
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            if acc.get("username"):
                label = f"@{acc['username']}"
            elif acc.get("name"):
                label = acc["name"]
            else:
                label = acc.get("phone")
            markup.inline_keyboard.append([InlineKeyboardButton(text=label, callback_data=f"template_acc_{acc.get('phone')}")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:" if user_languages.get(user_id, "ru") == "ru" else "Select account to add/edit template:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "select_template_account"

    elif data == "back_to_templates_select_account":
        accounts = load_user_accounts(user_id)
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            if acc.get("username"):
                label = f"@{acc['username']}"
            elif acc.get("name"):
                label = acc["name"]
            else:
                label = acc.get("phone")
            markup.inline_keyboard.append([InlineKeyboardButton(text=label, callback_data=f"template_acc_{acc.get('phone')}")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:" if user_languages.get(user_id, "ru") == "ru" else "Select account to add/edit template:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "select_template_account"

    elif data.startswith("template_acc_"):
        phone = data.replace("template_acc_", "")
        accounts = load_user_accounts(user_id)
        acc = next((a for a in accounts if a.get("phone") == phone), None)
        if not acc:
            message = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω." if user_languages.get(user_id, "ru") == "ru" else "Account not found."
            await call.message.answer(message)
            return
        templates = []
        i = 1
        while True:
            key = f"template{i}"
            if key in acc:
                templates.append(acc[key])
                i += 1
            else:
                break
        if not templates:
            user_states[user_id] = f"wait_template_{phone}"
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                sent_message = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω:" if user_languages.get(user_id, "ru") == "ru" else "Enter text template:",
                    reply_markup=get_back_to_templates_select_account_menu(),
                    user_id=user_id
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                user_states[f"{user_id}_template_message_id"] = sent_message.message_id
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        else:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                sent_message = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:" if user_languages.get(user_id, "ru") == "ru" else "Select template to view/edit:",
                    reply_markup=get_templates_list_menu(phone, templates),
                    user_id=user_id
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                user_states[f"{user_id}_template_message_id"] = sent_message.message_id
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            user_states[user_id] = f"templates_list_{phone}"

    elif data.startswith("add_template|"):
        _, phone = data.split("|", 1)
        user_states[user_id] = f"wait_template_{phone}"
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω:",
                reply_markup=get_back_to_templates_select_account_menu(),
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_template_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise

    elif data.startswith("show_template|"):
        _, phone, idx = data.split("|", 2)
        idx = int(idx)
        accounts = load_user_accounts(user_id)
        acc = next((a for a in accounts if a.get("phone") == phone), None)
        if not acc:
            try:
                await edit_text_or_safe_send(
                    call.message,
                    "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞.",
                    reply_markup=get_accounts_for_templates_menu(user_id)
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            user_states[user_id] = "select_template_account"
            return
        key = f"template{idx}"
        template_text = acc.get(key, "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        view_menu = InlineKeyboardMarkup(inline_keyboard=[])
        view_menu.inline_keyboard.append([
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å üóë", callback_data=f"delete_template|{phone}|{idx}"),
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úçÔ∏è", callback_data=f"edit_template|{phone}|{idx}")
        ])
        view_menu.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"back_to_templates|{phone}")])
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                f"–®–∞–±–ª–æ–Ω #{idx}\n\n\n{template_text}",
                reply_markup=view_menu,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_template_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = f"template_view_{phone}_{idx}"
    elif data.startswith("delete_template|"):
        _, phone, idx = data.split("|", 2)
        idx = int(idx)
        accounts = load_user_accounts(user_id)
        for acc in accounts:
            if acc.get("phone") == phone:
                key = f"template{idx}"
                if key in acc:
                    del acc[key]
                    i = idx + 1
                    while f"template{i}" in acc:
                        acc[f"template{i-1}"] = acc[f"template{i}"]
                        del acc[f"template{i}"]
                        i += 1
        save_user_accounts(user_id, accounts)
        acc = next((a for a in accounts if a.get("phone") == phone), None)
        templates = []
        i = 1
        while True:
            key = f"template{i}"
            if key in acc:
                templates.append(acc[key])
                i += 1
            else:
                break
        if templates:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_templates_list_menu(phone, templates),
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_template_message_id"] = sent_message.message_id
            user_states[user_id] = f"templates_list_{phone}"
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω:",
                reply_markup=get_back_to_templates_select_account_menu(),
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_template_message_id"] = sent_message.message_id
            user_states[user_id] = f"wait_template_{phone}"

    elif data.startswith("edit_template|"):
        _, phone, idx = data.split("|", 2)
        user_states[user_id] = f"edit_template_{phone}_{idx}"
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞:",
                reply_markup=get_back_to_templates_select_account_menu()
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_template_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
    elif data.startswith("back_to_templates|"):
        phone = data.replace("back_to_templates|", "")
        accounts = load_user_accounts(user_id)
        acc = next((a for a in accounts if a.get("phone") == phone), None)
        templates = []
        i = 1
        while True:
            key = f"template{i}"
            if key in acc:
                templates.append(acc[key])
                i += 1
            else:
                break
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_templates_list_menu(phone, templates)
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_template_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = f"templates_list_{phone}"

    elif data == "message_mailing":
        # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª ‚Äî –±—ã—Å—Ç—Ä—ã–π –≥–µ–π—Ç –¥–æ—Å—Ç—É–ø–∞
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –º–µ–Ω—é
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–†–∞—Å—Å—ã–ª–∫–∞." if user_languages.get(user_id, "ru") == "ru" else "Mailing.",
                reply_markup=mailing_message_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "mailing_menu"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if user_id not in mailing_states:
            mailing_states[user_id] = {
                "step": "mailing_menu",
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": True,
                "resume_state": None
            }


    elif data == "mailing_expand":
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
        session = user_sessions.get(user_id, {}).get("pushmux")
        if session:
            session["minimized"] = False

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if user_id in mailing_states:
            mailing_states[user_id]["logging_enabled"] = True
            mailing_states[user_id]["minimized"] = False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        save_reconnect_state()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(
            "–†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ." if user_languages.get(user_id, "ru") == "ru" else "Mailing is active again. Logging to chat resumed.",
            reply_markup=get_mailing_active_keyboard()
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        break_info = get_accounts_break_status(user_id)
        if break_info:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö
            if user_languages.get(user_id, "ru") == "ru":
                break_message = "üìã –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ:\n\n"
            else:
                break_message = "üìã Accounts are on break:\n\n"
            for account in break_info:
                break_message += f"{account['nickname']} - {account['time_left']} üü°\n"
            
            await call.message.answer(break_message)
        
        return
    # --- –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    elif data == "mailing_start":
        # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in mailing_states:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            mailing_states[user_id] = {
                "step": "select_accounts",
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": True,
                "resume_state": None
            }

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ---
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return

        accounts = load_user_accounts(user_id)
        if not accounts:
            await call.answer("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return

        # --- –ü–†–û–í–ï–†–ö–£ –®–ê–ë–õ–û–ù–û–í –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —ç—Ç–∞–ø "–î–∞–ª–µ–µ" ---

        if user_id not in user_sessions:
            user_sessions[user_id] = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ pushmux —É–∂–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
        if "pushmux" in user_sessions[user_id]:
            pushmux_session = user_sessions[user_id]["pushmux"]
            if "process" in pushmux_session:
                proc = pushmux_session["process"]
                if proc.poll() is None:
                    await call.answer("", show_alert=False)
                    return
                else:
                    user_sessions[user_id].pop("pushmux")
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                user_sessions[user_id].pop("pushmux")


        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if user_id not in mailing_states:
            mailing_states[user_id] = {
                "step": "select_accounts",
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": True,
                "resume_state": None
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            save_fn = globals().get("save_mailing_parameters")
            if callable(save_fn):
                try:
                    save_fn(user_id)
                except Exception:
                    pass
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = load_user_accounts(user_id)
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            nickname = (f"@{acc['username']}" if acc.get('username') else (acc.get('name') or acc.get('phone')))
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=nickname, 
                callback_data=f"mailing_acc_{acc.get('phone')}"
            )])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="mailing_select_all")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="mailing_next", disabled=True)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=markup,
                user_id=user_id

            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_mailing_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        
        return


    elif data == "mailing_continue_no_templates":
        accounts = load_user_accounts(user_id)
        if not accounts:
            await call.answer("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return

        if user_id in user_sessions:
            await call.answer("", show_alert=False)
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if user_id not in mailing_states:
            mailing_states[user_id] = {
                "step": "select_accounts",
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": True,
                "resume_state": None
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            save_fn = globals().get("save_mailing_parameters")
            if callable(save_fn):
                try:
                    save_fn(user_id)
                except Exception:
                    pass
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = load_user_accounts(user_id)
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            nickname = (f"@{acc['username']}" if acc.get('username') else (acc.get('name') or acc.get('phone')))
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=nickname, 
                callback_data=f"mailing_acc_{acc.get('phone')}"
            )])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="mailing_select_all")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="mailing_next", disabled=True)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=markup,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_mailing_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        
        user_states[user_id] = "mailing_menu"
        return



    elif data == "mailing_cancel_no_templates":
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=mailing_message_menu(user_id)
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "mailing_menu"
        return
    



    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    elif data == "mailing_select_all":
        if user_id not in mailing_states:
            mailing_states[user_id] = {
                "step": "select_accounts",
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": True,
                "resume_state": None
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            save_fn = globals().get("save_mailing_parameters")
            if callable(save_fn):
                try:
                    save_fn(user_id)
                except Exception:
                    pass
        
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = load_user_accounts(user_id)
        mailing_states[user_id]["selected_accounts"] = [acc.get('phone') for acc in accounts]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_mailing_accounts_keyboard(call, user_id, mailing_states[user_id]["selected_accounts"])
        return

    elif data.startswith("mailing_acc_"):
        phone = data.replace("mailing_acc_", "")
        if user_id not in mailing_states:
            mailing_states[user_id] = {
                "step": "select_accounts",
                "selected_accounts": [],
                "template_mode": None,
                "template_index": None,
                "selected_folder": None,
                "logging_enabled": True,
                "alternate_templates": True,
                "resume_state": None
            }
        
        state = mailing_states[user_id]
        selected = state.get("selected_accounts", [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        if phone in selected:
            selected.remove(phone)
        else:
            if len(selected) < 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                selected.append(phone)
        
        state["selected_accounts"] = selected
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_mailing_accounts_keyboard(call, user_id, selected)
        return

    elif data == "mailing_next":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_accounts = state.get("selected_accounts", [])
        
        if not selected_accounts:
            await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.", show_alert=True)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –∑–¥–µ—Å—å
        try:
            all_accounts = load_user_accounts(user_id) or []
            acc_by_phone = {acc.get("phone"): acc for acc in all_accounts}
            without_templates_display = []
            for ph in selected_accounts:
                acc = acc_by_phone.get(ph)
                if not acc:
                    continue
                has_template = any(key.startswith("template") for key in acc)
                if not has_template:
                    uname = acc.get("username")
                    if isinstance(uname, str) and uname.strip():
                        uname_clean = uname.strip()
                        if not uname_clean.startswith("@"):
                            uname_clean = "@" + uname_clean
                        display_name = uname_clean
                    else:
                        display_name = acc.get("name") or acc.get("phone") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    without_templates_display.append(display_name)
            if without_templates_display:
                if len(without_templates_display) == 1:
                    await call.answer(
                        f'–£ –∞–∫–∫–∞—É–Ω—Ç–∞ {without_templates_display[0]} –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–®–∞–±–ª–æ–Ω—ã".',
                        show_alert=True
                    )
                else:
                    names = ", ".join(without_templates_display)
                    await call.answer(
                        f'–£ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {names} –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–®–∞–±–ª–æ–Ω—ã".',
                        show_alert=True
                    )
                return
        except Exception:
            pass
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞"
        state["step"] = "select_summary"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_summary_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_summary_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_start")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return



    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞" ---
    elif data == "mailing_summary_yes":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        state["summary_enabled"] = True
        state["step"] = "summary_shown"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        summary_text = generate_summary_text(user_id)
        
        if summary_text and summary_text != "–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω." and summary_text != "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏.":
            message_text = f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞:\n\n{summary_text}"
        elif summary_text == "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏.":
            message_text = "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏."
        elif summary_text == "–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.":
            message_text = "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω."
        else:
            message_text = "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="mailing_summary_next")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="mailing_summary_back")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                message_text,
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_summary_next":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        state["step"] = "select_mode"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="mailing_mode_custom")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="mailing_mode_select")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="mailing_mode_resume")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_next")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_summary_back":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        state["summary_enabled"] = False
        state["step"] = "select_mode"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="mailing_mode_custom")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="mailing_mode_select")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="mailing_mode_resume")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_next")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_summary_no":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        state["summary_enabled"] = False
        state["step"] = "select_mode"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="mailing_mode_custom")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="mailing_mode_select")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data="mailing_mode_resume")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_next")])
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_mode_custom":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["template_mode"] = "custom"
        state["step"] = "select_alternate_templates"
        state["account_templates"] = {}
        state["account_folders"] = {}
        state["current_account_index"] = 0
        # Persist
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        save_ignore_settings(user_id, state.get("ignore_folders", {}), state.get("ignore_chats", {}))
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_alternate_templates_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_alternate_templates_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤?:",
                reply_markup=markup,
                user_id=user_id
                
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_mode_select":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["template_mode"] = "select"
        state["step"] = "select_alternate_templates"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        save_ignore_settings(user_id, state.get("ignore_folders", {}), state.get("ignore_chats", {}))
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_alternate_templates_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_alternate_templates_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤?:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    elif data == "mailing_mode_resume":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        resume_state = load_resume_state(user_id=user_id)
        ignore_settings = load_ignore_settings(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not resume_state or not resume_state.get("accounts"):
            await call.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if user_id not in mailing_states:
            mailing_states[user_id] = {}
        state = mailing_states[user_id]
        
        if resume_state:
            state.update(resume_state)
        if ignore_settings:
            state["ignore_folders"] = ignore_settings.get("ignore_folders", {})
            state["ignore_chats"] = ignore_settings.get("ignore_chats", {})
        
        # –ü–†–ï–î–û–•–†–ê–ù–ò–¢–ï–õ–¨ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥–ª—è user_id {user_id}")
        print(f"Resume state: {resume_state}")
        
        if await check_safety_guard_1(user_id, resume_state):
            print(f"–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è user_id {user_id}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è
            message_text, markup = await show_safety_guard_1_menu(user_id, resume_state)
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    message_text,
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        else:
            print(f"–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ù–ï —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è user_id {user_id}")
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        state["template_mode"] = "resume"
        state["step"] = "running"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        save_fn = globals().get("save_mailing_parameters")
        if callable(save_fn):
            try:
                save_fn(user_id)
            except Exception:
                pass
        
        license_type = detect_license_type(user_id)
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
        
        await call.message.answer(
            "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ...",
            reply_markup=get_mailing_active_keyboard()
        )
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ...",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–ï–î–û–•–†–ê–ù–ò–¢–ï–õ–Ø 1
    elif data == "safety_guard_wait":
        # –ñ–¥–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ - –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        resume_state = load_resume_state(user_id=user_id)
        
        if not resume_state or not resume_state.get("accounts"):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
        max_break_time = 0
        max_break_timestamp = 0
        for account_data in resume_state["accounts"]:
            if account_data.get("break_until_timestamp", 0) > 0:
                break_remaining = account_data["break_until_timestamp"] - time.time()
                if break_remaining > max_break_time:
                    max_break_time = break_remaining
                    max_break_timestamp = account_data["break_until_timestamp"]
        
        if max_break_time <= 0:
            await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è.", show_alert=True)
            return
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –í mailing_states
        state.update(resume_state)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        await call.message.answer(
            f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞: {int(max_break_time // 3600):02d}:{int((max_break_time % 3600) // 60):02d}:{int(max_break_time % 60):02d}\n\n",
            reply_markup=get_mailing_active_keyboard()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
        #await call.message.edit_text(
        #    "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞...",
        #    reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
        #)
        
        # –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
        last_minute_logged = max_break_time // 60  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        while max_break_time > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç–æ–ø"
            if user_id not in mailing_states:
                await log_to_telegram(user_id, "‚èπÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", "mailing")
                return
            
            await asyncio.sleep(1)
            max_break_time -= 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
            #current_minutes = max_break_time // 60
            #if current_minutes != last_minute_logged and current_minutes > 0 and current_minutes % 60 == 0:
            #       # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
            #    for account_data in resume_state["accounts"]:
            #        if account_data.get("break_until_timestamp", 0) > 0:
            #            nickname = account_data.get('nickname', 'Unknown')
            #            remaining = account_data["break_until_timestamp"] - time.time()
            #            if remaining > 0:
            #                hours = int(remaining // 3600)
            #                minutes = int((remaining % 3600) // 60)
            #                seconds = int(remaining % 60)
            #                message = f"{nickname}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {hours:02d}:{minutes:02d}:{seconds:02d} üü°"                 
            #                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            #                await log_to_telegram(user_id, message, "mailing")               
            #    last_minute_logged = current_minutes
        
        # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for account_data in resume_state["accounts"]:
            account_data["message_count"] = 0
            account_data["break_seconds_left"] = 0
            account_data["break_until_timestamp"] = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_resume_state(resume_state, user_id=user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ mailing_states
        state.update(resume_state)

        await log_to_telegram(user_id, "‚ùé –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω", "mailing")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        state["template_mode"] = "resume"
        state["step"] = "running"
        
        license_type = detect_license_type(user_id)
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
        
        return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
        try:
            await edit_text_or_safe_send(
                call.message,
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞...\n"
                f"–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: {int(max_break_time // 60):02d}:{int(max_break_time % 60):02d}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –í mailing_states
        state.update(resume_state)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        state["template_mode"] = "resume"
        state["step"] = "running"
        
        license_type = detect_license_type(user_id)
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
        
        return
    elif data == "safety_guard_force":
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        resume_state = load_resume_state(user_id=user_id)
        
        if not resume_state or not resume_state.get("accounts"):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏ –æ–±–Ω—É–ª—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Ö, —É –∫–æ–≥–æ —É–∂–µ 30/30
        for account_data in resume_state["accounts"]:
            account_data["break_until_timestamp"] = 0
            account_data["break_seconds_left"] = 0
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏
            if account_data.get("message_count", 0) >= 30:
                account_data["message_count"] = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_resume_state(resume_state, user_id=user_id)
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –í mailing_states
        state.update(resume_state)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        if user_id in active_tasks:
            for task_name in list(active_tasks[user_id].keys()):
                if "timer" in task_name.lower() or "countdown" in task_name.lower():
                    await stop_task(user_id, task_name)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        state["template_mode"] = "resume"
        state["step"] = "running"
        state["ignore_breaks"] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        
        license_type = detect_license_type(user_id)
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
        await call.message.answer(
            "üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=get_mailing_active_keyboard()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
        #try:
        #    await call.message.edit_text(
        #        "üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏...\n"
        #        "–í—Å–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        #        reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
        #    )
        #except TelegramAPIError as e:
        #    if "message is not modified" not in str(e):
        #        raise
        return

    elif data == "safety_guard_reset":
        # –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ª–∏–º–∏—Ç—ã - –æ–±–Ω—É–ª–∏—Ç—å message_count –∏ break
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        resume_state = load_resume_state(user_id=user_id)
        
        if not resume_state or not resume_state.get("accounts"):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", show_alert=True)
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏ –ø–µ—Ä–µ—Ä—ã–≤—ã (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –≤–º–µ—Å—Ç–æ None)
        for account_data in resume_state["accounts"]:
            account_data["message_count"] = 0
            account_data["break_until_timestamp"] = 0
            account_data["break_seconds_left"] = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_resume_state(resume_state, user_id=user_id)
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –í mailing_states
        state.update(resume_state)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        if user_id in active_tasks:
            for task_name in list(active_tasks[user_id].keys()):
                if "timer" in task_name.lower() or "countdown" in task_name.lower():
                    await stop_task(user_id, task_name)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        state["template_mode"] = "resume"
        state["step"] = "running"
        state["ignore_breaks"] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        
        license_type = detect_license_type(user_id)
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
        await call.message.answer(
            "üîÑ –õ–∏–º–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã",
            reply_markup=get_mailing_active_keyboard()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤
        #try:
        #    await call.message.edit_text(
        #        "üîÑ –í—Å–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã! –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏...",
        #        reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
        #    )
        #except TelegramAPIError as e:
        #    if "message is not modified" not in str(e):
        #        raise
        return

    elif data == "mailing_templates_yes":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["alternate_templates"] = True
        # –î—É–±–ª–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –ø—É—Ç—è–º–∏, –≥–¥–µ —á–∏—Ç–∞–µ—Ç—Å—è alternate_templates_enabled
        state["alternate_templates_enabled"] = True
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["template_index"] = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º–æ–º select configuration
        if state.get("template_mode") == "select":
            state["step"] = "select_template_type"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –ø—Ä–µ–≤—å—é –≤–º–µ—Å—Ç–æ T1/T2
            all_accounts = load_user_accounts(user_id)
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–æ–≤
            selected_phones = state.get("selected_accounts", [])
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            preview_account = selected_accounts[0] if selected_accounts else (all_accounts[0] if all_accounts else {})
            template1 = preview_account.get("template1", "...")
            template2 = preview_account.get("template2", "...")

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ select
            templates = get_templates_from_config(load_config(user_id), preview_account.get('phone')) if preview_account else []
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"mailing_template_type_idx_{idx}")
                    ])
            else:
                # –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
                markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_select")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_select")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        elif state.get("template_mode") == "custom":
            # –î–ª—è —Ä–µ–∂–∏–º–∞ custom –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            state["step"] = "select_custom_templates"
            state["current_account_index"] = 0
            state["account_templates"] = {}
            state["account_folders"] = {}
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            selected_phones = state.get("selected_accounts", [])
            if not selected_phones:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            all_accounts = load_user_accounts(user_id)
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            
            if not selected_accounts:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã.", show_alert=True)
                return
            
            first_account = selected_accounts[0]
            account_nickname = first_account.get("username") or first_account.get("name") or first_account.get("phone")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            templates = get_templates_from_config(load_config(user_id), first_account.get('phone'))

            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"custom_template_idx_{idx}")
                    ])
            else:
                markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_custom")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫
            state["step"] = "select_logging"
            
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return

    elif data.startswith("mailing_template_type_idx_"):
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        try:
            idx = int(data.replace("mailing_template_type_idx_", ""))
        except Exception:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞.", show_alert=True)
            return

        state = mailing_states[user_id]
        state["template_index"] = max(0, idx)
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_folder_set"

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–µ—Ç–∫–∞—Ö –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫)
        # –î–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (T1/T2 –Ω–µ –≤–∞–∂–µ–Ω, –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –æ—Ç—Ä–∏—Å–æ–≤–∫—É, —á—Ç–æ –∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–æ–≤: —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        try:
            selected_phones = state.get("selected_accounts", [])
            accounts = load_user_accounts(user_id)
            base_account = next((acc for acc in accounts if acc.get("phone") in selected_phones), None)
            if base_account:
                license_type = detect_license_type(user_id)
                user_dir = get_user_dir(user_id, license_type)
                config_path = os.path.join(user_dir, "config.json")
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                api_id = config.get("api_id")
                api_hash = config.get("api_hash")
                session_name = base_account.get("name") or base_account.get("phone")
                client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                folders = await list_folders(client) if client else {}
            else:
                folders = {}
        except Exception:
            folders = {}

        if folders:
            for i, folder in folders.items():
                real_index_zero_based = i - 1
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=folder.get('title', str(i)), callback_data=f"mailing_folder_set_idx_{real_index_zero_based}")
                ])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="mailing_folder_set_f1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="mailing_folder_set_f2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="mailing_folder_set_f3")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="mailing_folder_set_f4")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="mailing_folder_set_f5")])

        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_select")])

        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_templates_no":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["alternate_templates"] = False
        # –î—É–±–ª–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å –ø—É—Ç—è–º–∏, –≥–¥–µ —á–∏—Ç–∞–µ—Ç—Å—è alternate_templates_enabled
        state["alternate_templates_enabled"] = False
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["template_index"] = 0  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º–æ–º select configuration
        if state.get("template_mode") == "select":
            state["step"] = "select_template_type"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –ø—Ä–µ–≤—å—é –≤–º–µ—Å—Ç–æ T1/T2
            all_accounts = load_user_accounts(user_id)
            selected_phones = state.get("selected_accounts", [])
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            preview_account = selected_accounts[0] if selected_accounts else (all_accounts[0] if all_accounts else {})
            templates = get_templates_from_config(load_config(user_id), preview_account.get('phone')) if preview_account else []

            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"mailing_template_type_idx_{idx}")
                    ])
            else:
                markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_select")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_select")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        elif state.get("template_mode") == "custom":
            # –î–ª—è —Ä–µ–∂–∏–º–∞ custom –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            state["step"] = "select_custom_templates"
            state["current_account_index"] = 0
            state["account_templates"] = {}
            state["account_folders"] = {}
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            selected_phones = state.get("selected_accounts", [])
            if not selected_phones:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            all_accounts = load_user_accounts(user_id)
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            
            if not selected_accounts:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã.", show_alert=True)
                return
            
            first_account = selected_accounts[0]
            account_nickname = first_account.get("username") or first_account.get("name") or first_account.get("phone")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            templates = get_templates_from_config(load_config(user_id), first_account.get('phone'))
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"custom_template_idx_{idx}")
                    ])
            else:
                markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_custom")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫
            state["step"] = "select_logging"
            
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return

    # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ---
    elif data == "mailing_alternate_templates_yes":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state.get("original_step") == "select_alternate_templates":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
            # –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç template_mode
            template_mode = state.get("template_mode")
            if template_mode == "select":
                state["step"] = "select_template_type"
            elif template_mode == "custom":
                state["step"] = "select_logging"
            else:
                state["step"] = "select_logging"
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
            state.pop("original_step", None)
        
        # –ï—Å–ª–∏ template_mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å selected_accounts,
        # –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ–≥–æ
        if state.get("template_mode") is None and state.get("selected_accounts"):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            state["template_mode"] = "select"
        
        state["alternate_templates"] = True
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
        if state.get("template_mode") == "select":
            state["step"] = "select_template_type"
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
            all_accounts = load_user_accounts(user_id)
            selected_phones = state.get("selected_accounts", [])
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            preview_account = selected_accounts[0] if selected_accounts else (all_accounts[0] if all_accounts else {})
            templates = get_templates_from_config(load_config(user_id), preview_account.get('phone')) if preview_account else []
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"mailing_template_type_idx_{idx}")
                    ])
            else:
                markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_select")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_select")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        elif state.get("template_mode") == "custom":
            # –î–ª—è —Ä–µ–∂–∏–º–∞ custom –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            state["step"] = "select_custom_templates"
            state["current_account_index"] = 0
            state["account_templates"] = {}
            state["account_folders"] = {}
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            selected_phones = state.get("selected_accounts", [])
            if not selected_phones:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            all_accounts = load_user_accounts(user_id)
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            
            if not selected_accounts:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã.", show_alert=True)
                return
            
            first_account = selected_accounts[0]
            account_nickname = first_account.get("username") or first_account.get("name") or first_account.get("phone")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            template1 = first_account.get("template1", "...")
            template2 = first_account.get("template2", "...")

            markup = InlineKeyboardMarkup(inline_keyboard=[])
            templates = get_templates_from_config(load_config(user_id), first_account.get('phone'))
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"custom_template_idx_{idx}")
                    ])
            else:
                markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_custom")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
    elif data == "mailing_alternate_templates_no":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state.get("original_step") == "select_alternate_templates":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
            # –ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç template_mode
            template_mode = state.get("template_mode")
            if template_mode == "select":
                state["step"] = "select_template_type"
            elif template_mode == "custom":
                state["step"] = "select_logging"
            else:
                state["step"] = "select_logging"
            # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
            state.pop("original_step", None)
        
        # –ï—Å–ª–∏ template_mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å selected_accounts,
        # –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –µ–≥–æ
        if state.get("template_mode") is None and state.get("selected_accounts"):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            state["template_mode"] = "select"
        
        state["alternate_templates"] = False
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
        if state.get("template_mode") == "select":
            state["step"] = "select_template_type"
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
            all_accounts = load_user_accounts(user_id)
            selected_phones = state.get("selected_accounts", [])
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            preview_account = selected_accounts[0] if selected_accounts else (all_accounts[0] if all_accounts else {})
            templates = get_templates_from_config(load_config(user_id), preview_account.get('phone')) if preview_account else []
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            if templates:
                for idx, t in enumerate(templates):
                    markup.inline_keyboard.append([
                        InlineKeyboardButton(text=truncate_preview(t), callback_data=f"mailing_template_type_idx_{idx}")
                    ])
            else:
                t1 = preview_account.get("template1", "...")
                t2 = preview_account.get("template2", "...")
                markup.inline_keyboard.append([InlineKeyboardButton(text=truncate_preview(t1), callback_data="mailing_template_type_idx_0")])
                markup.inline_keyboard.append([InlineKeyboardButton(text=truncate_preview(t2), callback_data="mailing_template_type_idx_1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_select")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        elif state.get("template_mode") == "custom":
            # –î–ª—è —Ä–µ–∂–∏–º–∞ custom –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            state["step"] = "select_custom_templates"
            state["current_account_index"] = 0
            state["account_templates"] = {}
            state["account_folders"] = {}
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            selected_phones = state.get("selected_accounts", [])
            if not selected_phones:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            all_accounts = load_user_accounts(user_id)
            selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
            
            if not selected_accounts:
                await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã.", show_alert=True)
                return
            
            first_account = selected_accounts[0]
            account_nickname = first_account.get("username") or first_account.get("name") or first_account.get("phone")
            
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([InlineKeyboardButton(text="T1", callback_data="custom_template_t1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="T2", callback_data="custom_template_t2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ custom ---
    elif data == "custom_template_t1":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_phones = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        
        if current_index >= len(selected_phones):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        all_accounts = load_user_accounts(user_id)
        selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
        
        if current_index >= len(selected_accounts):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        current_account = selected_accounts[current_index]
        account_phone = current_account.get("phone")
        state["account_templates"][account_phone] = "IDX_0"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        state["step"] = "select_custom_folder"
        account_nickname = current_account.get("username") or current_account.get("name") or current_account.get("phone")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        try:
            license_type = detect_license_type(user_id)
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
            api_id = config.get("api_id")
            api_hash = config.get("api_hash")
            session_name = current_account.get("name") or current_account.get("phone")
            client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
            folders = await list_folders(client) if client else {}
        except Exception:
            folders = {}

        if folders:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
            try:
                state["last_folder_list"] = folders
            except Exception:
                pass
            for i, folder in folders.items():
                real_index_zero_based = i - 1
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=folder.get('title', str(i)), callback_data=f"custom_folder_idx_{real_index_zero_based}")
                ])
        else:
            # –§–æ–ª–ª–±–µ–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="custom_folder_f1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="custom_folder_f2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="custom_folder_f3")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="custom_folder_f4")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="custom_folder_f5")])

        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="custom_template_back")])
        
        try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                    reply_markup=markup,
                    user_id=user_id
                )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "custom_template_t2":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_phones = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        
        if current_index >= len(selected_phones):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        all_accounts = load_user_accounts(user_id)
        selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
        
        if current_index >= len(selected_accounts):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        current_account = selected_accounts[current_index]
        account_phone = current_account.get("phone")
        state["account_templates"][account_phone] = "IDX_1"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        state["step"] = "select_custom_folder"
        account_nickname = current_account.get("username") or current_account.get("name") or current_account.get("phone")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        try:
            license_type = detect_license_type(user_id)
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
            api_id = config.get("api_id")
            api_hash = config.get("api_hash")
            session_name = current_account.get("name") or current_account.get("phone")
            client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
            folders = await list_folders(client) if client else {}
        except Exception:
            folders = {}

        if folders:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
            try:
                state["last_folder_list"] = folders
            except Exception:
                pass
            for i, folder in folders.items():
                real_index_zero_based = i - 1
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=folder.get('title', str(i)), callback_data=f"custom_folder_idx_{real_index_zero_based}")
                ])
        else:
            # –§–æ–ª–ª–±–µ–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="custom_folder_f1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="custom_folder_f2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="custom_folder_f3")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="custom_folder_f4")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="custom_folder_f5")])

        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="custom_template_back")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data.startswith("custom_template_idx_"):
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        try:
            idx = int(data.replace("custom_template_idx_", ""))
        except Exception:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_phones = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        if current_index >= len(selected_phones):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        all_accounts = load_user_accounts(user_id)
        selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
        if current_index >= len(selected_accounts):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        current_account = selected_accounts[current_index]
        account_phone = current_account.get("phone")
        state["account_templates"][account_phone] = f"IDX_{idx}"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        state["step"] = "select_custom_folder"
        account_nickname = current_account.get("username") or current_account.get("name") or current_account.get("phone")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        try:
            license_type = detect_license_type(user_id)
            user_dir = get_user_dir(user_id, license_type)
            config_path = os.path.join(user_dir, "config.json")
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
            api_id = config.get("api_id")
            api_hash = config.get("api_hash")
            session_name = current_account.get("name") or current_account.get("phone")
            client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
            folders = await list_folders(client) if client else {}
        except Exception:
            folders = {}

        if folders:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
            try:
                state["last_folder_list"] = folders
            except Exception:
                pass
            for i, folder in folders.items():
                real_index_zero_based = i - 1
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=folder.get('title', str(i)), callback_data=f"custom_folder_idx_{real_index_zero_based}")
                ])
        else:
            # –§–æ–ª–ª–±–µ–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="custom_folder_f1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="custom_folder_f2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="custom_folder_f3")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="custom_folder_f4")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="custom_folder_f5")])

        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="custom_template_back")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        state["step"] = "select_custom_folder"
        account_nickname = current_account.get("username") or current_account.get("name") or current_account.get("phone")
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="custom_folder_f1")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="custom_folder_f2")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="custom_folder_f3")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="custom_folder_f4")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="custom_folder_f5")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="custom_template_back")])
        
        try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                    reply_markup=markup,
                    user_id=user_id
                )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫ –≤ —Ä–µ–∂–∏–º–µ custom ---
    elif data.startswith("custom_folder_idx_"):
        try:
            idx = int(data.replace("custom_folder_idx_", ""))
        except Exception:
            await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–∞–ø–∫–∏.", show_alert=True)
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ IDX_n, —á—Ç–æ–±—ã –¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å
        await handle_custom_folder_selection(call, user_id, f"IDX_{idx}")
        return
    elif data == "custom_folder_f1":
        await handle_custom_folder_selection(call, user_id, "F1")
        return

    elif data == "custom_folder_f2":
        await handle_custom_folder_selection(call, user_id, "F2")
        return

    elif data == "custom_folder_f3":
        await handle_custom_folder_selection(call, user_id, "F3")
        return

    elif data == "custom_folder_f4":
        await handle_custom_folder_selection(call, user_id, "F4")
        return

    elif data == "custom_folder_f5":
        await handle_custom_folder_selection(call, user_id, "F5")
        return
    elif data == "custom_template_back":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_phones = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        
        if current_index >= len(selected_phones):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        all_accounts = load_user_accounts(user_id)
        selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
        
        if current_index >= len(selected_accounts):
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        current_account = selected_accounts[current_index]
        account_nickname = current_account.get("username") or current_account.get("name") or current_account.get("phone")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        template1 = current_account.get("template1", "...")
        template2 = current_account.get("template2", "...")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞–∑–∞–¥
        templates = get_templates_from_config(load_config(user_id), current_account.get('phone'))

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        if templates:
            for idx, t in enumerate(templates):
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=truncate_preview(t), callback_data=f"custom_template_idx_{idx}")
                ])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="mailing_mode_custom")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_logging_yes":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["logging_enabled"] = True
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "ignore_folders_choice"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_folders_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_folders_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_templates_yes")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_logging_no":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["logging_enabled"] = False
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "ignore_folders_choice"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_folders_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_folders_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_templates_yes")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ select configuration) ---
    elif data == "mailing_template_type_t1":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["template_type"] = "T1"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_folder_set"
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        try:
            selected_phones = state.get("selected_accounts", [])
            accounts = load_user_accounts(user_id)
            base_account = None
            for acc in accounts:
                if acc.get("phone") in selected_phones:
                    base_account = acc
                    break
            if base_account:
                license_type = detect_license_type(user_id)
                user_dir = get_user_dir(user_id, license_type)
                config_path = os.path.join(user_dir, "config.json")
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                api_id = config.get("api_id")
                api_hash = config.get("api_hash")
                session_name = base_account.get("name") or base_account.get("phone")
                client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                folders = await list_folders(client) if client else {}
            else:
                folders = {}
        except Exception:
            folders = {}

        if folders:
            for idx, folder in folders.items():
                # idx –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1 –≤ list_folders; –ø—Ä–∏–≤–µ–¥–µ–º –∫ 0-–±–∞–∑–æ–≤–æ–º—É –≤ callback
                real_index_zero_based = idx - 1
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=folder.get('title', str(idx)), callback_data=f"mailing_folder_set_idx_{real_index_zero_based}")
                ])
        else:
            # –§–æ–ª–±—ç–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ F1..F5
            markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="mailing_folder_set_f1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="mailing_folder_set_f2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="mailing_folder_set_f3")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="mailing_folder_set_f4")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="mailing_folder_set_f5")])

        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_templates_yes")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_template_type_t2":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["template_type"] = "T2"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_folder_set"
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        try:
            selected_phones = state.get("selected_accounts", [])
            accounts = load_user_accounts(user_id)
            base_account = None
            for acc in accounts:
                if acc.get("phone") in selected_phones:
                    base_account = acc
                    break
            if base_account:
                license_type = detect_license_type(user_id)
                user_dir = get_user_dir(user_id, license_type)
                config_path = os.path.join(user_dir, "config.json")
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                api_id = config.get("api_id")
                api_hash = config.get("api_hash")
                session_name = base_account.get("name") or base_account.get("phone")
                client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                folders = await list_folders(client) if client else {}
            else:
                folders = {}
        except Exception:
            folders = {}

        if folders:
            for idx, folder in folders.items():
                real_index_zero_based = idx - 1
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=folder.get('title', str(idx)), callback_data=f"mailing_folder_set_idx_{real_index_zero_based}")
                ])
        else:
            # –§–æ–ª–±—ç–∫ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ F1..F5
            markup.inline_keyboard.append([InlineKeyboardButton(text="F1", callback_data="mailing_folder_set_f1")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F2", callback_data="mailing_folder_set_f2")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F3", callback_data="mailing_folder_set_f3")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F4", callback_data="mailing_folder_set_f4")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="F5", callback_data="mailing_folder_set_f5")])

        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_templates_yes")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ –ø–∞–ø–æ–∫ ---
    elif data == "mailing_folder_set_f1":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["folder_set"] = "F1"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_logging"

        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –ø–∞–ø–∫–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ F1..F5 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dyn_idx = state.get("folder_set_idx")
        if isinstance(dyn_idx, int):
            # F –∏–Ω–¥–µ–∫—Å ‚Äî —ç—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ 1..5 –æ—Ç –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ dyn_idx
            # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ state —Ç–æ–ª—å–∫–æ "folder_set" –∫–∞–∫ F1..F5 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é F1)
            state.pop("folder_set_idx", None)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = state.get("template_type", "T1")
        back_callback = "mailing_template_type_t2" if template_type == "T2" else "mailing_template_type_t1"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=back_callback)])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_folder_set_f2":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["folder_set"] = "F2"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_logging"
        dyn_idx = state.get("folder_set_idx")
        if isinstance(dyn_idx, int):
            state.pop("folder_set_idx", None)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = state.get("template_type", "T1")
        back_callback = "mailing_template_type_t2" if template_type == "T2" else "mailing_template_type_t1"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=back_callback)])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    elif data == "mailing_folder_set_f3":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["folder_set"] = "F3"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_logging"
        dyn_idx = state.get("folder_set_idx")
        if isinstance(dyn_idx, int):
            state.pop("folder_set_idx", None)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = state.get("template_type", "T1")
        back_callback = "mailing_template_type_t2" if template_type == "T2" else "mailing_template_type_t1"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=back_callback)])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_folder_set_f4":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["folder_set"] = "F4"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_logging"
        dyn_idx = state.get("folder_set_idx")
        if isinstance(dyn_idx, int):
            state.pop("folder_set_idx", None)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = state.get("template_type", "T1")
        back_callback = "mailing_template_type_t2" if template_type == "T2" else "mailing_template_type_t1"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=back_callback)])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_folder_set_f5":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["folder_set"] = "F5"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_logging"
        dyn_idx = state.get("folder_set_idx")
        if isinstance(dyn_idx, int):
            state.pop("folder_set_idx", None)

    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    elif data.startswith("mailing_folder_set_idx_"):
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        try:
            idx_str = data.replace("mailing_folder_set_idx_", "")
            base_index = int(idx_str)  # 0-–±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
        except Exception:
            try:
                await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–∞–ø–∫–∏.", show_alert=True)
            except Exception:
                pass
            return

        state = mailing_states[user_id]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
        state["folder_set_idx"] = base_index
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        state["step"] = "select_logging"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = state.get("template_type", "T1")
        back_callback = "mailing_template_type_t2" if template_type == "T2" else "mailing_template_type_t1"

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=back_callback)])

        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        template_type = state.get("template_type", "T1")
        back_callback = "mailing_template_type_t2" if template_type == "T2" else "mailing_template_type_t1"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=back_callback)])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_start_command":
        # –ì–µ–π—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ/—Ç—Ä–∏–∞–ª—É –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–≥–µ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        state = mailing_states[user_id]
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ resume_process.json
        resume_state = {
            "accounts": [],
            "logging_enabled": state.get("logging_enabled", True),
            "alternate_templates_enabled": state.get("alternate_templates", True),
            "sync_break_finished": False,
            "ignore_folders": state.get("ignore_folders", {}),
            "ignore_chats": state.get("ignore_chats", {})
        }
        
        accounts = load_user_accounts(user_id)
        selected_phones = state.get("selected_accounts", [])
        # --- FIX: Ensure selected_accounts is always defined and valid ---
        selected_accounts = [acc for acc in accounts if acc.get("phone") in selected_phones]
        
        for acc in accounts:
            if acc.get("phone") in selected_phones:
                phone = acc["phone"]
                nickname = acc.get("nickname", acc.get("name", phone))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º template_index –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                template_mode = state.get("template_mode")
                if template_mode == "custom":
                    # –í —Ä–µ–∂–∏–º–µ custom –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account_templates = state.get("account_templates", {})
                    template_choice = account_templates.get(phone)
                    if isinstance(template_choice, str) and template_choice.startswith("IDX_"):
                        try:
                            template_index = int(template_choice.replace("IDX_", ""))
                        except Exception:
                            template_index = 0
                    elif template_choice == "T1":
                        template_index = 0
                    elif template_choice == "T2":
                        template_index = 1
                    else:
                        template_index = 0
                elif template_mode == "select":
                    # –í –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–µ —Å—Ç–∞—Ä—Ç—É–µ–º –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ template_index –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º,
                    # –æ–±–æ—Ä–∞—á–∏–≤–∞—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    try:
                        account_index = selected_accounts.index(acc)
                    except (ValueError, IndexError):
                        account_index = 0
                    try:
                        template_list = get_templates_for_account(acc)
                        count_templates = max(1, len(template_list))
                    except Exception:
                        count_templates = 1
                    base_template_index = state.get("template_index", 0)
                    template_index = (base_template_index + account_index) % count_templates
                elif template_mode == "resume":
                    # –í —Ä–µ–∂–∏–º–µ resume –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                    template_index = state.get("template_index", 0)
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º select
                    template_index = 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                folder = None
                if template_mode == "custom":
                    account_folders = state.get("account_folders", {})
                    folder_choice = account_folders.get(phone, "F1")
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: F1..F5 –∏ IDX_n (0-–±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏)
                    folder_index = 0
                    if isinstance(folder_choice, str):
                        if folder_choice.startswith("IDX_"):
                            try:
                                folder_index = int(folder_choice.replace("IDX_", ""))
                            except ValueError:
                                folder_index = 0
                        elif folder_choice.startswith("F") and len(folder_choice) > 1:
                            try:
                                folder_index = int(folder_choice[1]) - 1
                            except ValueError:
                                folder_index = 0
                    folder = {"folder_index": folder_index, "title": folder_choice}
                elif template_mode == "select":
                    # –í —Ä–µ–∂–∏–º–µ select –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–∞–ø–æ–∫
                    try:
                        account_index = selected_accounts.index(acc)
                        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ (folder_set_idx) –∏–ª–∏ F1..F5
                        if isinstance(state.get("folder_set_idx"), int):
                            base_index = state.get("folder_set_idx")  # 0-–±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
                            folder_index = base_index + account_index
                        else:
                            folder_set = state.get("folder_set", "F1")
                            folder_offset = int(folder_set[1]) - 1  # F1=0, F2=1, F3=2, F4=3, F5=4
                            folder_index = account_index + folder_offset
                        folder = {"folder_index": folder_index, "title": f"Folder_{folder_index + 1}"}
                    except (ValueError, IndexError):
                        folder = {"folder_index": 0, "title": "F1"}
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
                    folder = {"folder_index": 0, "title": "F1"}
                
                resume_state["accounts"].append({
                    "phone": phone,
                    "nickname": nickname,
                    "username": acc.get('username', ''),
                    "template_index": template_index,
                    "folder": folder,
                    "chat_index": 0,
                    "break_seconds_left": 0,
                    "break_until_timestamp": 0,
                    "message_count": 0
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        save_resume_state(resume_state, user_id=user_id)
        state["step"] = "running"

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        license_type = detect_license_type(user_id)
        await start_task(user_id, "mailing", async_mailing_flow(user_id, license_type))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–°—Ç–æ–ø" –∏ "–°–≤–µ—Ä–Ω—É—Ç—å"
        await call.message.answer(
            "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ...",
            reply_markup=get_mailing_active_keyboard()
        )

        # (–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π)
        #try:
            #await call.message.edit_text(
                #"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ...",
                #reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                #])
            #)
        #except TelegramAPIError as e:
            #if "message is not modified" not in str(e):
                #raise
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ ---
    elif data == "ignore_folders_yes":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "ignore_folders_selection"
        state["current_account_index"] = 0
        state["ignore_folders"] = {}
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        selected_accounts = state.get("selected_accounts", [])
        if not selected_accounts:
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return
        
        await show_folder_selection_for_account(call, user_id, selected_accounts[0])
        return

    elif data == "ignore_folders_no":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["ignore_folders"] = {}
        state["step"] = "ignore_chats_choice"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_chats_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_chats_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "ignore_folders_back":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "ignore_folders_choice"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_folders_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_folders_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_templates_yes")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "to_ignore_chats_question":
        # –Ø–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –∏–≥–Ω–æ—Ä —á–∞—Ç–æ–≤ –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        state["step"] = "ignore_chats_choice"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_chats_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_chats_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")])
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "to_final_settings":
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ò—Ç–æ–≥–æ–≤—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å –ø–æ–∫–∞–∑–æ–º –ª–æ–∞–¥–µ—Ä–∞ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–∞—Ö
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        # –û—Ü–µ–Ω–∫–∞ —Ç—è–∂–µ—Å—Ç–∏ (—Å—É–º–º–∞ –ø–∞–ø–æ–∫ –∏ —á–∞—Ç–æ–≤)
        try:
            state_snapshot = mailing_states.get(user_id, {})
            ignore_folders_map = state_snapshot.get("ignore_folders", {}) or {}
            total_ignored_folders = sum(len(v or []) for v in ignore_folders_map.values())
            ignore_chats_map = state_snapshot.get("ignore_chats", {}) or {}
            total_ignored_chats = 0
            for _acc, _folders in (ignore_chats_map.items() if isinstance(ignore_chats_map, dict) else []):
                for _fid, _chats in (_folders.items() if isinstance(_folders, dict) else []):
                    total_ignored_chats += len(_chats or [])
            is_heavy = (total_ignored_folders + total_ignored_chats) > 5
        except Exception:
            is_heavy = False

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="START", callback_data="mailing_start_command")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_chats_back")])

        if is_heavy:
            try:
                loader_msg = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üîÑ",
                    reply_markup=None,
                    user_id=user_id
                )
            except Exception:
                loader_msg = call.message
            try:
                final_text = await generate_final_settings_text(user_id)
            except Exception:
                final_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            try:
                await delete_and_send_image(
                    loader_msg,
                    "mailing.png",
                    final_text,
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        else:
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    await generate_final_settings_text(user_id),
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ ---
    elif data == "ignore_chats_yes":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "ignore_chats_folder_selection"
        state["current_account_index"] = 0
        state["ignore_chats"] = {}
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        selected_accounts = state.get("selected_accounts", [])
        if not selected_accounts:
            await call.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return
        
        await show_folder_selection_for_chats(call, user_id, selected_accounts[0])
        return

    elif data == "ignore_chats_no":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["ignore_chats"] = {}
        state["step"] = "start_mailing"
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        save_ignore_settings(user_id, state.get("ignore_folders", {}), state.get("ignore_chats", {}))
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="START", callback_data="mailing_start_command")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_chats_back")])
        
        # –ï—Å–ª–∏ –∏–≥–Ω–æ—Ä–∞ –º–Ω–æ–≥–æ (–±–æ–ª–µ–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ: –ø–∞–ø–∫–∏+—á–∞—Ç—ã) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        try:
            state_snapshot = mailing_states.get(user_id, {})
            ignore_folders_map = state_snapshot.get("ignore_folders", {}) or {}
            total_ignored_folders = sum(len(v or []) for v in ignore_folders_map.values())
            ignore_chats_map = state_snapshot.get("ignore_chats", {}) or {}
            total_ignored_chats = 0
            for _acc, _folders in (ignore_chats_map.items() if isinstance(ignore_chats_map, dict) else []):
                for _fid, _chats in (_folders.items() if isinstance(_folders, dict) else []):
                    total_ignored_chats += len(_chats or [])
            is_heavy = (total_ignored_folders + total_ignored_chats) > 5
        except Exception:
            is_heavy = False

        if is_heavy:
            try:
                loader_msg = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üîÑ",
                    reply_markup=None,
                    user_id=user_id
                )
            except Exception:
                loader_msg = call.message
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∑–∞–º–µ–Ω–∏–≤ –ª–æ–∞–¥–µ—Ä
            try:
                final_text = await generate_final_settings_text(user_id)
            except Exception:
                final_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            try:
                await delete_and_send_image(
                    loader_msg,
                    "mailing.png",
                    final_text,
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        else:
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    await generate_final_settings_text(user_id),
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        return

    elif data == "ignore_chats_back":
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "ignore_chats_choice"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_chats_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_chats_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ---
    elif data.startswith("ignore_folder_"):
        # –§–æ—Ä–º–∞—Ç: ignore_folder_{account_phone}_{folder_id}
        parts = data.split("_")
        if len(parts) >= 4:
            account_phone = parts[2]
            folder_id = int(parts[3])
            
            if user_id not in mailing_states:
                await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return
            
            state = mailing_states[user_id]
            if "ignore_folders" not in state:
                state["ignore_folders"] = {}
            if account_phone not in state["ignore_folders"]:
                state["ignore_folders"][account_phone] = []
            
            if folder_id not in state["ignore_folders"][account_phone]:
                state["ignore_folders"][account_phone].append(folder_id)
                try:
                    await call.answer(f"–ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ", show_alert=False)
                except Exception:
                    pass
            else:
                state["ignore_folders"][account_phone].remove(folder_id)
                try:
                    await call.answer(f"–ü–∞–ø–∫–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö", show_alert=False)
                except Exception:
                    pass
            
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–∞–ª–æ—á–µ–∫ (–±–µ–∑ resolver)
            await update_folder_selection_keyboard(call, user_id, account_phone)
        
        return

    elif data.startswith("next_folder_account_"):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        account_phone = data.replace("next_folder_account_", "")
        
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_accounts = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        current_index += 1
        
        if current_index >= len(selected_accounts):
            # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–æ–≤
            state["step"] = "ignore_chats_choice"
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_chats_yes")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_chats_no")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö?",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            state["current_account_index"] = current_index
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            await show_folder_selection_for_account(call, user_id, selected_accounts[current_index])
        
        return

    elif data.startswith("back_to_prev_folder_account_"):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –≤ –≤—ã–±–æ—Ä–µ –ø–∞–ø–æ–∫
        account_phone = data.replace("back_to_prev_folder_account_", "")
        
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_accounts = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        current_index -= 1
        
        if current_index < 0:
            # –ï—Å–ª–∏ –º—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫–∞—Ö? (–î–∞/–ù–µ—Ç)
            state["step"] = "ignore_folders_choice"
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="ignore_folders_yes")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_folders_no")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_templates_yes")])
            
            try:
                await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö?",
                    reply_markup=markup,
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            state["current_account_index"] = current_index
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            await show_folder_selection_for_account(call, user_id, selected_accounts[current_index])
        
        return

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ---
    elif data.startswith("select_chat_folder_"):
        if data == "dummy":
            try:
                await call.answer()
            except Exception:
                pass
            return
        # –§–æ—Ä–º–∞—Ç: select_chat_folder_{account_phone}_{folder_id}
        parts = data.split("_")
        if len(parts) >= 5:
            account_phone = parts[3]
            folder_id = int(parts[4])
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä: —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ üîÑ¬ª —Å –∫–Ω–æ–ø–∫–∞–º–∏ –î–∞–ª–µ–µ/–í–µ—Ä–Ω—É—Ç—å—Å—è
            try:
                loading_markup = InlineKeyboardMarkup(inline_keyboard=[])
                loading_markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"next_chat_folder_{account_phone}_{folder_id}")])
                loading_markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"back_to_chat_folders_{account_phone}")])
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
                try:
                    _state = mailing_states.get(user_id, {})
                    _page = int((_state.get("chat_pages", {}) or {}).get(account_phone, {}).get(str(int(folder_id)), 0))
                except Exception:
                    _page = 0
                _title_text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {_page + 1}\n\n\n–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ... üîÑ"
                loading_message = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    _title_text,
                    reply_markup=loading_markup,
                    user_id=user_id
                )
            except Exception:
                loading_message = None

            # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∑–∞–º–µ–Ω–∏–≤ –ª–æ–∞–¥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à—É—é –≤—ã–¥–∞—á—É –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            try:
                state = mailing_states.get(user_id, {})
                state["chat_load_token"] = int(state.get("chat_load_token", 0)) + 1
                mailing_states[user_id] = state
            except Exception:
                pass
            await show_chat_selection_for_folder(call, user_id, account_phone, folder_id, existing_message=loading_message)
        
        return

    elif data.startswith("back_to_prev_account_chats_"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        prev_account_phone = data.replace("back_to_prev_account_chats_", "")
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        selected_accounts = state.get("selected_accounts", [])
        if prev_account_phone not in selected_accounts:
            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤
            return await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞", callback_data="ignore_chats_yes")],
                    [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_chats_no")],
                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")],
                ]),
                user_id=user_id
            )
        current_index = state.get("current_account_index", 0)
        try:
            idx = selected_accounts.index(prev_account_phone)
        except ValueError:
            idx = current_index
        # –¶–µ–ª–∏–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        target_index = max(0, idx - 1)
        # –í–ê–ñ–ù–û: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ,
        # —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏–π "–î–∞–ª–µ–µ" –≤–µ–ª –Ω–∞ –≤–µ—Ä–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        state["current_account_index"] = target_index
        try:
            save_mailing_parameters(user_id)
        except Exception:
            pass
        # –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∞—Ç–∞—Ö? (–î–∞/–ù–µ—Ç)
        if idx == 0 and target_index == 0:
            return await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–î–∞", callback_data="ignore_chats_yes")],
                    [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ignore_chats_no")],
                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")],
                ]),
                user_id=user_id
            )
        target_phone = selected_accounts[target_index]
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–æ–∫
        last_map = state.get("last_folder_for_account", {}) or {}
        last_folder = last_map.get(target_phone)
        if last_folder is not None:
            # –ü–æ–∫–∞–∂–µ–º –ª–æ–∞–¥–µ—Ä, –∫–∞–∫ –ø—Ä–∏ "–î–∞–ª–µ–µ/–í–µ—Ä–Ω—É—Ç—å—Å—è" —Ä–∞–Ω—å—à–µ
            try:
                loading_markup = InlineKeyboardMarkup(inline_keyboard=[])
                loading_markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"back_to_chat_folders_{target_phone}")])
                _title_text = f"–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ... üîÑ"
                loading_message = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    _title_text,
                    reply_markup=loading_markup,
                    user_id=user_id
                )
            except Exception:
                loading_message = None
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Ç–æ–∫–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–∫—Ä–∞–Ω—ã
            try:
                state = mailing_states.get(user_id, {})
                state["chat_load_token"] = int(state.get("chat_load_token", 0)) + 1
                mailing_states[user_id] = state
            except Exception:
                pass
            try:
                await show_chat_selection_for_folder(call, user_id, target_phone, int(last_folder), existing_message=loading_message)
                return
            except Exception:
                pass
        await show_folder_selection_for_chats(call, user_id, target_phone)
        return

    elif data.startswith("ignore_chat_"):
        # –§–æ—Ä–º–∞—Ç: ignore_chat_{account_phone}_{folder_id}_{chat_id}
        parts = data.split("_")
        if len(parts) >= 5:
            account_phone = parts[2]
            folder_id = parts[3]
            chat_id = int(parts[4])
            
            if user_id not in mailing_states:
                await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return
            
            state = mailing_states[user_id]
            if "ignore_chats" not in state:
                state["ignore_chats"] = {}
            if account_phone not in state["ignore_chats"]:
                state["ignore_chats"][account_phone] = {}
            if folder_id not in state["ignore_chats"][account_phone]:
                state["ignore_chats"][account_phone][folder_id] = []
            
            if chat_id not in state["ignore_chats"][account_phone][folder_id]:
                state["ignore_chats"][account_phone][folder_id].append(chat_id)
                try:
                    await call.answer(f"–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ", show_alert=False)
                except Exception:
                    pass
            else:
                state["ignore_chats"][account_phone][folder_id].remove(chat_id)
                try:
                    await call.answer(f"–ß–∞—Ç —É–±—Ä–∞–Ω –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ", show_alert=False)
                except Exception:
                    pass
            
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            
            # –ë—ã—Å—Ç—Ä–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤
            try:
                existing_markup = call.message.reply_markup
                if existing_markup and getattr(existing_markup, 'inline_keyboard', None):
                    updated_keyboard = []
                    current_selected = set(state["ignore_chats"][account_phone][folder_id])
                    for row in existing_markup.inline_keyboard:
                        new_row = []
                        for btn in row:
                            try:
                                cb = getattr(btn, 'callback_data', None)
                                text = getattr(btn, 'text', '')
                                if cb and cb.startswith(f"ignore_chat_{account_phone}_{folder_id}_"):
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ callback_data
                                    chat_id_str = cb.split("_")[-1]
                                    chat_id_val = int(chat_id_str)
                                    base_text = text.replace(" ‚úÖ", "").rstrip()
                                    mark = " ‚úÖ" if chat_id_val in current_selected else ""
                                    new_btn = InlineKeyboardButton(text=f"{base_text}{mark}", callback_data=cb)
                                    new_row.append(new_btn)
                                else:
                                    new_row.append(btn)
                            except Exception:
                                new_row.append(btn)
                        updated_keyboard.append(new_row)
                    new_markup = InlineKeyboardMarkup(inline_keyboard=updated_keyboard)
                    try:
                        await call.message.edit_reply_markup(reply_markup=new_markup)
                    except Exception as e:
                        if "message is not modified" in str(e):
                            pass
                        else:
                            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–æ–≤: {e}")
                else:
                    # –§–æ–ª–ª–±–µ–∫ –∫ –ø—Ä–µ–∂–Ω–µ–π –ª–æ–≥–∏–∫–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    await update_chat_selection_keyboard(call, user_id, account_phone, int(folder_id))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–æ–≤: {e}")
                await update_chat_selection_keyboard(call, user_id, account_phone, int(folder_id))
        
        return

    elif data.startswith("more_chats_"):
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ —á–∞—Ç–∞–º: more_chats_{account_phone}_{folder_id}_{page}
        parts = data.split("_")
        if len(parts) >= 5:
            account_phone = parts[2]
            folder_id = int(parts[3])
            page = int(parts[4])
            if user_id not in mailing_states:
                await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
                return
            state = mailing_states[user_id]
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ üîÑ¬ª —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                loading_markup = InlineKeyboardMarkup(inline_keyboard=[])
                # –ù–∞ —ç–∫—Ä–∞–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                loading_markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"next_chat_folder_{account_phone}_{folder_id}")])
                loading_markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"back_to_chat_folders_{account_phone}")])
                _title_text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n\n\n–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ... üîÑ"
                loading_message = await delete_and_send_image(
                    call.message,
                    "mailing.png",
                    _title_text,
                    reply_markup=loading_markup,
                    user_id=user_id
                )
            except Exception:
                pass
            if "chat_pages" not in state:
                state["chat_pages"] = {}
            if account_phone not in state["chat_pages"]:
                state["chat_pages"][account_phone] = {}
            state["chat_pages"][account_phone][str(folder_id)] = page
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                state = mailing_states.get(user_id, {})
                state["chat_load_token"] = int(state.get("chat_load_token", 0)) + 1
                mailing_states[user_id] = state
            except Exception:
                pass
            await show_chat_selection_for_folder(call, user_id, account_phone, folder_id, existing_message=loading_message if 'loading_message' in locals() else None)
        return

    elif data.startswith("next_chat_account_"):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        account_phone = data.replace("next_chat_account_", "")
        
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        selected_accounts = state.get("selected_accounts", [])
        current_index = state.get("current_account_index", 0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        current_index += 1
        
        if current_index >= len(selected_accounts):
            # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            state["step"] = "start_mailing"
            save_ignore_settings(user_id, state.get("ignore_folders", {}), state.get("ignore_chats", {}))
            
            markup = InlineKeyboardMarkup(inline_keyboard=[])
            markup.inline_keyboard.append([InlineKeyboardButton(text="START", callback_data="mailing_start_command")])
            markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_chats_back")])
            
            # –û—Ü–µ–Ω–∫–∞ ¬´—Ç—è–∂–µ—Å—Ç–∏¬ª –∏—Ç–æ–≥–æ–≤ (—Å—É–º–º–∞—Ä–Ω–æ: –ø–∞–ø–∫–∏+—á–∞—Ç—ã)
            try:
                state_snapshot = mailing_states.get(user_id, {})
                ignore_folders_map = state_snapshot.get("ignore_folders", {}) or {}
                total_ignored_folders = sum(len(v or []) for v in ignore_folders_map.values())
                ignore_chats_map = state_snapshot.get("ignore_chats", {}) or {}
                total_ignored_chats = 0
                for _acc, _folders in (ignore_chats_map.items() if isinstance(ignore_chats_map, dict) else []):
                    for _fid, _chats in (_folders.items() if isinstance(_folders, dict) else []):
                        total_ignored_chats += len(_chats or [])
                is_heavy = (total_ignored_folders + total_ignored_chats) > 5
            except Exception:
                is_heavy = False

            if is_heavy:
                try:
                    loader_msg = await delete_and_send_image(
                        call.message,
                        "mailing.png",
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üîÑ",
                        reply_markup=None,
                        user_id=user_id
                    )
                except Exception:
                    loader_msg = call.message
                try:
                    final_text = await generate_final_settings_text(user_id)
                except Exception:
                    final_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
                try:
                    await delete_and_send_image(
                        loader_msg,
                        "mailing.png",
                        final_text,
                        reply_markup=markup,
                        user_id=user_id
                    )
                except TelegramAPIError as e:
                    if "message is not modified" not in str(e):
                        raise
            else:
                try:
                    await delete_and_send_image(
                        call.message,
                        "mailing.png",
                        await generate_final_settings_text(user_id),
                        reply_markup=markup,
                        user_id=user_id
                    )
                except TelegramAPIError as e:
                    if "message is not modified" not in str(e):
                        raise
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            state["current_account_index"] = current_index
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            target_phone = selected_accounts[current_index]
            # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –Ω–∞ –Ω–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
            await show_folder_selection_for_chats(call, user_id, target_phone)
        
        return
    elif data.startswith("next_chat_folder_"):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—É
        parts = data.split("_")
        if len(parts) >= 5:
            account_phone = parts[3]
            folder_id = parts[4]
            
            # –õ—é–±–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–∞–ª—å—à–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤
            try:
                state = mailing_states.get(user_id, {})
                state["chat_load_token"] = int(state.get("chat_load_token", 0)) + 1
                mailing_states[user_id] = state
            except Exception:
                pass

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–∞–ø–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
            state = mailing_states.get(user_id, {})
            selected_accounts = state.get("selected_accounts", [])
            current_index = state.get("current_account_index", 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–æ–∫
            accounts = load_user_accounts(user_id)
            account = None
            for acc in accounts:
                if acc.get('phone') == account_phone:
                    account = acc
                    break
            
            if account:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫
                license_type = detect_license_type(user_id)
                user_dir = get_user_dir(user_id, license_type)
                config_path = os.path.join(user_dir, "config.json")
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
                
                api_id = config.get("api_id")
                api_hash = config.get("api_hash")
                
                session_name = account.get('name') or account.get('phone')
                client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                
                if client:
                    folders = await list_folders(client)
                    if folders:
                        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞–ø–∫—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π
                        folder_ids = list(folders.keys())
                        try:
                            current_folder_index = folder_ids.index(int(folder_id))
                            if current_folder_index + 1 < len(folder_ids):
                                # –ï—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –ø–∞–ø–∫–∞ –≤ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
                                next_folder_id = folder_ids[current_folder_index + 1]
                                await show_chat_selection_for_folder(call, user_id, account_phone, next_folder_id)
                                return
                        except ValueError:
                            pass
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–ª—å—à–µ –ø–∞–ø–æ–∫ –≤ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
            current_index += 1
            state["current_account_index"] = current_index
            
            if current_index >= len(selected_accounts):
                # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                state["step"] = "start_mailing"
                save_ignore_settings(user_id, state.get("ignore_folders", {}), state.get("ignore_chats", {}))
                
                markup = InlineKeyboardMarkup(inline_keyboard=[])
                markup.inline_keyboard.append([InlineKeyboardButton(text="START", callback_data="mailing_start_command")])
                markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_chats_back")])
                
                try:
                    await delete_and_send_image(
                        call.message,
                        "mailing.png",
                        await generate_final_settings_text(user_id),
                        reply_markup=markup,
                        user_id=user_id
                    )
                except TelegramAPIError as e:
                    if "message is not modified" not in str(e):
                        raise
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    save_mailing_parameters(user_id)
                except Exception:
                    pass
                await show_folder_selection_for_chats(call, user_id, selected_accounts[current_index])
        
        return

    elif data.startswith("proceed_chats_"):
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —á–∞—Ç–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–π (–ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π) –ø–∞–ø–∫–µ
        account_phone = data.replace("proceed_chats_", "")
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        state = mailing_states[user_id]
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫
        last_map = state.get("last_folder_for_account", {}) or {}
        last_folder = last_map.get(account_phone)
        if last_folder is None:
            return await show_folder_selection_for_chats(call, user_id, account_phone)
        try:
            folder_id = int(last_folder)
        except Exception:
            return await show_folder_selection_for_chats(call, user_id, account_phone)
        # –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω—ã —á–∞—Ç–æ–≤ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∞–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
        await show_chat_selection_for_folder(call, user_id, account_phone, folder_id)
        return

    elif data.startswith("select_chat_folder_"):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        # –§–æ—Ä–º–∞—Ç: select_chat_folder_{account_phone}_{folder_id}
        parts = data.split("_")
        if len(parts) >= 5:
            account_phone = parts[3]
            folder_id = int(parts[4])
            
            await show_chat_selection_for_folder(call, user_id, account_phone, folder_id)
        
        return

    elif data.startswith("back_to_chat_folders_"):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –≤ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤
        account_phone = data.replace("back_to_chat_folders_", "")
        # –í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∞ –∏–¥—ë—Ç)
        try:
            state = mailing_states.get(user_id, {})
            state["chat_load_token"] = int(state.get("chat_load_token", 0)) + 1
            mailing_states[user_id] = state
        except Exception:
            pass
        await show_folder_selection_for_chats(call, user_id, account_phone)
        return

    elif data == "mailing_stop":
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        if user_id in active_tasks:
            for task_name in list(active_tasks[user_id].keys()):
                if task_name.startswith("mailing") or "timer" in task_name.lower() or "countdown" in task_name.lower():
                    await stop_task(user_id, task_name)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if user_id in mailing_states:
            del mailing_states[user_id]
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
            update_service_state("mailing_states", user_id, None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        try:
            await delete_and_send_image(
                call.message,
                "manage.png",
                get_user_stats_display(user_id),
                reply_markup=get_accounts_manage_menu()
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    # --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–í–µ—Ä–Ω—É—Ç—å—Å—è" –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    elif data == "mailing_next":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "select_accounts"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = load_user_accounts(user_id)
        selected = state.get("selected_accounts", [])
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        
        for acc in accounts:
            nickname = acc.get('username') or acc.get('name') or acc.get('phone')
            mark = " ‚úÖ" if acc.get('phone') in selected else ""
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=f"{nickname}{mark}", 
                callback_data=f"mailing_acc_{acc.get('phone')}"
            )])
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã 1 –∞–∫–∫–∞—É–Ω—Ç
        if selected:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="mailing_next")])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="mailing_next", disabled=True)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_back_to_mode":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–ø—Ä–æ—Å—É "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞"
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "select_summary"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_summary_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_summary_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_start")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–æ–¥–∫–∞:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "mailing_templates_yes":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤
        if user_id not in mailing_states:
            await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        
        state = mailing_states[user_id]
        state["step"] = "select_templates"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_templates_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_templates_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_back_to_mode")])
        
        try:
            await edit_text_or_safe_send(
                call.message,
                "–í–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    if data == "postman":
        # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª ‚Äî –±—ã—Å—Ç—Ä—ã–π –≥–µ–π—Ç –¥–æ—Å—Ç—É–ø–∞
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        try:
            await delete_and_send_image(
                call.message,
                "mailbox.png",
                "–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫." if user_languages.get(user_id, "ru") == "ru" else "Mailbox.",
                reply_markup=get_postman_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "postman_menu"
        return

    elif data == "autoresponder":
        # –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª ‚Äî –±—ã—Å—Ç—Ä—ã–π –≥–µ–π—Ç –¥–æ—Å—Ç—É–ø–∞
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()   
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
        
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        # –ù–ï –æ—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª, –µ—Å–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω
        # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
        if user_id in autoresponder_states and autoresponder_states[user_id].get("active"):
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selected_accounts –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not autoresponder_states[user_id].get("selected_accounts"):
                print(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ selected_accounts –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ postman_states
                if user_id in postman_states and postman_states[user_id].get("selected_accounts"):
                    autoresponder_states[user_id]["selected_accounts"] = postman_states[user_id]["selected_accounts"]
                    print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã selected_accounts –∏–∑ postman_states: {autoresponder_states[user_id]['selected_accounts']}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
        elif user_id in autoresponder_states:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ—á–∏—â–∞–µ–º selected_accounts
            autoresponder_states[user_id]["selected_accounts"] = []
        
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫." if user_languages.get(user_id, "ru") == "ru" else "Autoresponder.",
                reply_markup=get_autoresponder_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "autoresponder_no_templates":
        message = "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–®–∞–±–ª–æ–Ω—ã'" if user_languages.get(user_id, "ru") == "ru" else "First create templates in the 'Templates' section"
        await call.answer(message, show_alert=True)
        return
    elif data == "autoresponder_activate":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –º–∞—Å—Ç–µ—Ä–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        if user_id not in autoresponder_states:
            autoresponder_states[user_id] = {"selected_accounts": []}
        
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:" if user_languages.get(user_id, "ru") == "ru" else "Select accounts for autoresponder:",
                reply_markup=get_autoresponder_accounts_menu(user_id, "activate"),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data.startswith("autoresponder_toggle_account|"):
        phone = data.split("|")[1]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id not in autoresponder_states:
            autoresponder_states[user_id] = {"selected_accounts": []}
        
        selected = autoresponder_states[user_id].get("selected_accounts", [])
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        if phone in selected:
            selected.remove(phone)
        else:
            selected.append(phone)
        
        autoresponder_states[user_id]["selected_accounts"] = selected
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_autoresponder_accounts_keyboard(call, user_id, selected)
        return

    elif data == "autoresponder_select_all":
        accounts = get_active_accounts_by_sessions(user_id)
        all_phones = [acc.get("phone") for acc in accounts]
        
        if user_id not in autoresponder_states:
            autoresponder_states[user_id] = {}
        
        current_selected = autoresponder_states[user_id].get("selected_accounts", [])
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã - —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä, –∏–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ
        if len(current_selected) == len(all_phones):
            autoresponder_states[user_id]["selected_accounts"] = []
        else:
            autoresponder_states[user_id]["selected_accounts"] = all_phones
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_autoresponder_accounts_keyboard(call, user_id, autoresponder_states[user_id]["selected_accounts"])
        return

    elif data == "autoresponder_confirm":
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        selected_accounts = autoresponder_states.get(user_id, {}).get("selected_accounts", [])
        
        
        
        if not selected_accounts:
            message = "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç" if user_languages.get(user_id, "ru") == "ru" else "Select at least one account"
            await call.answer(message, show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        missing_templates = []
        for phone in selected_accounts:
            template = get_autoresponder_template(user_id, phone)
            if not template:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                accounts = get_active_accounts_by_sessions(user_id)
                account = None
                for acc in accounts:
                    if isinstance(acc, dict) and acc.get("phone") == phone:
                        account = acc
                        break
                if account:
                    name = account.get("username") or account.get("name") or phone
                    missing_templates.append(name)
                else:
                    missing_templates.append(phone)
        
        if missing_templates:
            if user_languages.get(user_id, "ru") == "ru":
                message = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {', '.join(missing_templates)}"
            else:
                message = f"Missing templates for accounts: {', '.join(missing_templates)}"
            await call.answer(message, show_alert=True)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
        await start_task(user_id, "autoresponder", run_autoresponder(user_id, selected_accounts))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if user_id not in autoresponder_states:
            autoresponder_states[user_id] = {}
        autoresponder_states[user_id]["active"] = True
        autoresponder_states[user_id]["selected_accounts"] = selected_accounts
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª
        update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
        
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                f"üìº –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=get_autoresponder_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "autoresponder_stop":
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ—Ç–æ–º UI
        if user_id not in autoresponder_states:
            autoresponder_states[user_id] = {"active": False, "selected_accounts": []}
        else:
            autoresponder_states[user_id]["active"] = False
        update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
        
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "üõë –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=get_autoresponder_menu(user_id),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º—è–≥–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        asyncio.create_task(stop_autoresponder(user_id))
        return

    elif data == "autoresponder_templates":
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞:",
                reply_markup=get_autoresponder_accounts_menu(user_id, "templates"),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "autoresponder_account_templates":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞:",
                reply_markup=get_autoresponder_accounts_menu(user_id, "templates"),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data.startswith("autoresponder_account_templates|"):
        phone = data.split("|")[1]

        # –ï—Å–ª–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ —É–∂–µ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        template = get_autoresponder_template(user_id, phone)
        if template:
            try:
                await delete_and_send_image(
                    call.message,
                    "autoresponder.png",
                    f"–®–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:\n\n{template}",
                    reply_markup=get_autoresponder_template_actions_menu(phone),
                    user_id=user_id
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return

        # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
        user_states[f"{user_id}_autoresponder_phone"] = phone
        try:
            sent_message = await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[\
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="autoresponder_templates")\
                ]]),
                user_id=user_id
            )
            user_states[f"{user_id}_autoresponder_input_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        user_states[user_id] = "waiting_autoresponder_message"
        return

    elif data.startswith("autoresponder_add_template|"):
        phone = data.split("|")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
        user_states[f"{user_id}_autoresponder_phone"] = phone
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "autoresponder.png",
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"autoresponder_account_templates|{phone}")
                ]]),
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_autoresponder_input_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        user_states[user_id] = "waiting_autoresponder_message"
        return

    elif data.startswith("autoresponder_show_template|"):
        phone = data.split("|")[1]
        template = get_autoresponder_template(user_id, phone)
        
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                f"–®–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:\n\n{template}",
                reply_markup=get_autoresponder_template_actions_menu(phone),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data.startswith("autoresponder_edit_template|"):
        phone = data.split("|")[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–æ–π —à–∞–±–ª–æ–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        user_states[f"{user_id}_autoresponder_phone"] = phone
        
        current_template = get_autoresponder_template(user_id, phone)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "autoresponder.png",
                f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:\n{current_template}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"autoresponder_show_template|{phone}")
                ]]),
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_autoresponder_input_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        user_states[user_id] = "waiting_autoresponder_message"
        return

    elif data.startswith("autoresponder_delete_template|"):
        phone = data.split("|")[1]
        
        delete_autoresponder_template(user_id, phone)
        
        try:
            await delete_and_send_image(
                call.message,
                "autoresponder.png",
                f"–®–∞–±–ª–æ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} —É–¥–∞–ª–µ–Ω",
                reply_markup=get_autoresponder_account_template_menu(user_id, phone),
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    


    elif data.startswith("postman_acc_"):
        phone = data.replace("postman_acc_", "")
        state = user_states.get(user_id, {})
        selected = state.get("selected_accounts", [])
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
        if phone in selected:
            selected.remove(phone)
        else:
            selected.append(phone)
        state["selected_accounts"] = selected
        state["postman_step"] = "select_accounts"  # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        user_states[user_id] = state

        accounts = load_user_accounts(user_id)
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        all_selected = len(selected) == len(accounts)
        markup.inline_keyboard.append([InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            callback_data="postman_select_all"
        )])
        
        for acc in accounts:
            label = acc.get("username") or acc.get("name") or acc.get("phone")
            mark = " ‚úÖ" if acc.get("phone") in selected else ""
            label_fixed = f"{label: <5}"  # 5 ‚Äî –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            markup.inline_keyboard.append([InlineKeyboardButton(text=f"{label_fixed}{mark}", callback_data=f"postman_acc_{acc.get('phone')}")])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_postman_accounts_keyboard(call, user_id, selected)
        return


    elif data == "postman_select_all":
        state = user_states.get(user_id, {})
        accounts = load_user_accounts(user_id)
        selected = state.get("selected_accounts", [])
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã - —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö, –∏–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ
        if len(selected) == len(accounts):
            selected = []
        else:
            selected = [acc.get("phone") for acc in accounts]
        
        state["selected_accounts"] = selected
        state["postman_step"] = "select_accounts"
        user_states[user_id] = state
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        
        for acc in accounts:
            label = acc.get("username") or acc.get("name") or acc.get("phone")
            mark = " ‚úÖ" if acc.get("phone") in selected else ""
            label_fixed = f"{label: <5}"
            markup.inline_keyboard.append([InlineKeyboardButton(text=f"{label_fixed}{mark}", callback_data=f"postman_acc_{acc.get('phone')}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        all_selected = len(selected) == len(accounts)
        markup.inline_keyboard.append([InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            callback_data="postman_select_all"
        )])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_postman_accounts_keyboard(call, user_id, selected)
        return


    


    elif data == "postman_activate":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ mailboxer
        session = user_sessions.get(user_id, {})
        if "mailboxer" in session:
            # –ï—Å–ª–∏ mailboxer —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            try:
                await delete_and_send_image(
                    call.message,
                    "mailbox.png",
                    "–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫:",
                    reply_markup=get_postman_menu(user_id)
                )
            except TelegramAPIError as e:
                if "message is not modified" not in str(e):
                    raise
            return
        
        accounts = load_user_accounts(user_id)
        if not accounts:
            await call.answer("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", show_alert=True)
            return

        license_type = user_states.get(f"{user_id}_license_type")
        if not license_type:
            license_type = detect_license_type(user_id)

        state = user_states.get(user_id)
        if not isinstance(state, dict):
            state = {}
        state["postman_step"] = "select_accounts"
        if "selected_accounts" not in state:
            state["selected_accounts"] = []
        selected = state["selected_accounts"]
        user_states[user_id] = state
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        
        for acc in accounts:
            label = acc.get("username") or acc.get("name") or acc.get("phone")
            mark = " ‚úÖ" if acc.get("phone") in selected else ""
            label_fixed = f"{label: <5}"  # 5 ‚Äî –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            markup.inline_keyboard.append([InlineKeyboardButton(text=f"{label_fixed}{mark}", callback_data=f"postman_acc_{acc.get('phone')}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
        all_selected = len(selected) == len(accounts)
        markup.inline_keyboard.append([InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            callback_data="postman_select_all"
        )])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="postman_next", disabled=not selected)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="postman")])
        try:
            await delete_and_send_image(
                call.message,
                "mailbox.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return



    elif data == "postman_next":
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        state = user_states.get(user_id, {})
        selected = state.get("selected_accounts", [])
        if not selected:
            await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.", show_alert=True)
            return
        accounts = load_user_accounts(user_id)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞
        state["postman_step"] = "select_postman"
        state["selected_accounts"] = selected
        user_states[user_id] = state

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            label = acc.get("username") or acc.get("name") or acc.get("phone")
            mark = " ‚úÖ" if state.get("postman_selected") == acc.get("phone") else ""
            label_fixed = f"{label: <5}"
            markup.inline_keyboard.append([InlineKeyboardButton(text=f"{label_fixed}{mark}", callback_data=f"postman_postman_{acc.get('phone')}")])
        if state.get("postman_selected"):
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚òëÔ∏è", callback_data="postman_confirm_postman")])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚òëÔ∏è", callback_data="postman_confirm_postman", disabled=True)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="postman_activate")])
        try:
            await delete_and_send_image(
                call.message,
                "mailbox.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç-–ø–æ—á—Ç–∞–ª—å–æ–Ω (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω):",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return



    elif data.startswith("postman_postman_"):
        phone = data.replace("postman_postman_", "")
        state = user_states.get(user_id, {})
        selected = state.get("selected_accounts", [])
        state["postman_selected"] = phone
        user_states[user_id] = state

        accounts = load_user_accounts(user_id)
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            label = acc.get("username") or acc.get("name") or acc.get("phone")
            mark = " ‚úÖ" if state.get("postman_selected") == acc.get("phone") else ""
            label_fixed = f"{label: <5}"
            markup.inline_keyboard.append([InlineKeyboardButton(text=f"{label_fixed}{mark}", callback_data=f"postman_postman_{acc.get('phone')}")])
        if state.get("postman_selected"):
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚òëÔ∏è", callback_data="postman_confirm_postman")])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚òëÔ∏è", callback_data="postman_confirm_postman", disabled=True)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="postman_activate")])
        try:
            await delete_and_send_image(
                call.message,
                "mailbox.png",
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç-–ø–æ—á—Ç–∞–ª—å–æ–Ω (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω):",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return



    elif data == "postman_confirm_postman":
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return
        state = user_states.get(user_id, {})
        postman_selected = state.get("postman_selected")
        if not postman_selected:
            await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞.", show_alert=True)
            return
        state["postman_step"] = "wait_username"
        user_states[user_id] = state
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="postman_next")])
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                call.message,
                "mailbox.png",
                "–í–≤–µ–¥–∏—Ç–µ @username, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                reply_markup=markup,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_postman_username_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
    elif data == "postman_stop":
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—á—Ç–∞–ª—å–π–æ–Ω–∞
        session = user_sessions.get(user_id)
        if session and "mailboxer" in session:
            mailboxer = session["mailboxer"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ stop_event
            if "stop_event" in mailboxer and mailboxer["stop_event"]:
                stop_event = mailboxer["stop_event"]
                stop_event.set()
            
            # –ï—Å–ª–∏ –±—ã–ª –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å (–Ω–∞ –±—É–¥—É—â–µ–µ)
            if "process" in mailboxer and mailboxer["process"]:
                p = mailboxer["process"]
                if p.is_alive():
                    p.terminate()
                    p.join(timeout=5)
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ mailboxer
        print(f"[POSTMAN_STOP] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è user_id: {user_id}")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in active_clients:
            print(f"[POSTMAN_STOP] –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è user_id {user_id}: {list(active_clients[user_id].keys())}")
            for session_name in active_clients[user_id].keys():
                print(f"[POSTMAN_STOP] –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è: {session_name}")
                await remove_event_handlers(user_id, session_name)
        else:
            print(f"[POSTMAN_STOP] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è user_id {user_id}")
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        accounts = load_user_accounts(user_id)
        for acc in accounts:
            session_name = acc.get("name")
            if session_name:
                print(f"[POSTMAN_STOP] –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}")
                await remove_event_handlers(user_id, session_name)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º mailboxer –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if session and "mailboxer" in session:
            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            mb = session["mailboxer"]
            task = mb.get("task") if isinstance(mb, dict) else None
            if task is not None:
                try:
                    await asyncio.wait([task], timeout=5)
                except Exception:
                    pass
            session.pop("mailboxer")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á—Ç—ã
        if user_id in postman_states:
            del postman_states[user_id]
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
            update_service_state("postman_states", user_id, None)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id)
        if isinstance(state, dict) and "postman_step" in state:
            state.pop("postman_step", None)
            state.pop("selected_accounts", None)
            state.pop("postman_selected", None)
            state.pop("postman_username", None)
            user_states[user_id] = state
        
        # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
        try:
            try:
                await delete_and_send_image(
                    call.message,
                    "mailbox.png",
                    "–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫:",
                    reply_markup=get_postman_menu(user_id),
                    user_id=user_id
                )
            except TelegramNetworkError:
                # –ú—è–≥–∫–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—É—é –æ—à–∏–±–∫—É, UI –æ–±–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
                pass
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data.startswith("autosub_acc_"):
        phone = data.replace("autosub_acc_", "")
        user_states[f"{user_id}_autosub_phone"] = phone

        # Trial-–≥–µ–π—Ç: –µ—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω, –Ω–µ –¥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
        try:
            license_type = detect_license_type(user_id)
            if str(license_type).endswith("trial") or str(license_type) == "trial":
                if get_user_autosub_limit(user_id) >= 5:
                    try:
                        await call.answer(
                            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á.",
                            show_alert=True
                        )
                    except Exception:
                        pass
                    return
        except Exception:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ–º/–ø–µ—Ä–µ—Ö–æ–¥–æ–º
        try:
            await call.message.delete()
        except Exception:
            pass

        # –ï—Å–ª–∏ –≤ —Ñ–æ–Ω–µ —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø–æ –∫–ª—é—á—É phone, —Ç–∞–∫ –∏ –ø–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
            done_flag = user_states.pop(f"{user_id}_autosub_done_{phone}", None)
            pending = user_states.pop(f"{user_id}_autosub_done_pending", None)
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—à–ª—É—é —Å–µ—Å—Å–∏—é ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –∏–¥—ë–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
            if user_states.get(f"{user_id}_autosub_finished_{phone}"):
                done_flag = None
                pending = None
            if done_flag or (isinstance(pending, dict) and (pending.get("phone") == phone or not pending.get("phone"))):
                # –û–ø—Ä–µ–¥–µ–ª–∏–º –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                acc_label = None
                try:
                    if isinstance(pending, dict) and pending.get("label"):
                        acc_label = pending.get("label")
                    else:
                        accounts = load_user_accounts(user_id)
                        for acc in accounts:
                            if acc.get("phone") == phone:
                                acc_label = acc.get("username") or acc.get("name") or acc.get("phone")
                                break
                except Exception:
                    pass
                done_text = "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                prefixed_text = f"{acc_label}: {done_text}" if acc_label else done_text
                # –°–Ω–∏–º–∞–µ–º —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                user_states.pop(f"{user_id}_autosub_minimized", None)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text=prefixed_text,
                    reply_markup=get_autosub_active_keyboard()
                )
                # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–ø–∏—Å–∫–∞
                try:
                    await call.answer("–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
                except Exception:
                    pass
                return
            # –ï—Å–ª–∏ —Ñ–ª–∞–≥–æ–≤ –Ω–µ—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–≤–≤–æ–¥ —Å–ø–∏—Å–∫–∞)
            else:
                # –ï—Å–ª–∏ –±—ã–ª —è–≤–Ω—ã–π —Ñ–∏–Ω–∏—à ‚Äî –æ—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Å–ø–∏—Å–∫–∞)
                user_states.pop(f"{user_id}_autosub_finished_{phone}", None)
        except Exception:
            pass

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –∞–∫–∫–∞—É–Ω—Ç ‚Äî
        # —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ –≤–≤–æ–¥—É —Å–ø–∏—Å–∫–∞
        try:
            running_phone = user_states.get(f"{user_id}_autosub_running_phone")
            task_key = f"autosubscribe:{phone}"
            if (
                (user_id in active_tasks and task_key in active_tasks[user_id])
                or (load_autosub_state(user_id).get(str(phone), {}).get("remaining"))
            ):
                user_states.pop(f"{user_id}_autosub_minimized_{phone}", None)
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                user_states[f"{user_id}_autosub_unminimized_{phone}"] = True
                # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–≤—ë—Ä–Ω—É—Ç–æ—Å—Ç–∏ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω —Å–ø–∏—Å–æ–∫ ‚Äî —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏
                try:
                    if user_states.pop(f"{user_id}_autosub_done_{phone}", None):
                        # –û–ø—Ä–µ–¥–µ–ª–∏–º –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞
                        acc_label = None
                        try:
                            accounts = load_user_accounts(user_id)
                            for acc in accounts:
                                if acc.get("phone") == phone:
                                    acc_label = acc.get("username") or acc.get("name") or acc.get("phone")
                                    break
                        except Exception:
                            pass
                        done_text = "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                        prefixed_text = f"{acc_label}: {done_text}" if acc_label else done_text
                        await bot.send_message(
                            chat_id=call.message.chat.id,
                            text=prefixed_text,
                            reply_markup=get_autosub_active_keyboard()
                        )
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                except Exception:
                    pass
                # –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –¥–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
                try:
                    replay_flag = user_states.get(f"{user_id}_autosub_last_done_{phone}")
                    replay_label = user_states.get(f"{user_id}_autosub_last_done_label_{phone}")
                    if replay_flag:
                        acc_label = replay_label
                        if not acc_label:
                            try:
                                accounts = load_user_accounts(user_id)
                                for acc in accounts:
                                    if acc.get("phone") == phone:
                                        acc_label = acc.get("username") or acc.get("name") or acc.get("phone")
                                        break
                            except Exception:
                                pass
                        done_text = "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                        prefixed_text = f"{acc_label}: {done_text}" if acc_label else done_text
                        await bot.send_message(
                            chat_id=call.message.chat.id,
                            text=prefixed_text,
                            reply_markup=get_autosub_active_keyboard()
                        )
                except Exception:
                    pass
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–∏–º —Ç–æ—á–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¢–û–õ–¨–ö–û –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                try:
                    started_key = f"{user_id}_autosub_break_{phone}_started_ts"
                    total_key = f"{user_id}_autosub_break_{phone}_total_sec"
                    started_ts = user_states.get(started_key)
                    total_sec = user_states.get(total_key)
                    if isinstance(started_ts, int) and isinstance(total_sec, int) and total_sec > 0:
                        now_ts = int(asyncio.get_event_loop().time())
                        elapsed = max(0, now_ts - started_ts)
                        remaining = max(0, total_sec - elapsed)
                        remaining_min = max(0, (remaining + 59) // 60)
                        if remaining_min > 0:
                            # –ü—Ä–µ—Ñ–∏–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞
                            acc_label3 = None
                            try:
                                accounts = load_user_accounts(user_id)
                                for acc in accounts:
                                    if acc.get("phone") == phone:
                                        acc_label3 = acc.get("username") or acc.get("name") or acc.get("phone")
                                        break
                            except Exception:
                                pass
                            prefix3 = f"{acc_label3}: " if acc_label3 else ""
                            await bot.send_message(
                                chat_id=call.message.chat.id,
                                text=f"{prefix3}–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {remaining_min} –º–∏–Ω—É—Ç",
                                reply_markup=get_autosub_active_keyboard()
                            )
                        else:
                            await bot.send_message(
                                chat_id=call.message.chat.id,
                                text="–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞ ‚Ü©Ô∏è",
                                reply_markup=get_autosub_active_keyboard()
                            )
                    else:
                        await bot.send_message(
                            chat_id=call.message.chat.id,
                            text="–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞ ‚Ü©Ô∏è",
                            reply_markup=get_autosub_active_keyboard()
                        )
                    # –£–±—Ä–∞–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–∏—Å–∫–∞. –û—Å—Ç–∞–ª–æ—Å—å: N"
                    try:
                        _ = load_autosub_state(user_id).get(str(phone), {}).get("remaining", [])
                        # –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
                    except Exception:
                        pass
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FloodWait ‚Äî —Å–æ–æ–±—â–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã
                    try:
                        f_started_key = f"{user_id}_autosub_flood_{phone}_started_ts"
                        f_total_key = f"{user_id}_autosub_flood_{phone}_total_sec"
                        f_started_ts = user_states.get(f_started_key)
                        f_total_sec = user_states.get(f_total_key)
                        if isinstance(f_started_ts, int) and isinstance(f_total_sec, int) and f_total_sec > 0:
                            now_ts2 = int(asyncio.get_event_loop().time())
                            elapsed2 = max(0, now_ts2 - f_started_ts)
                            remaining2 = max(0, f_total_sec - elapsed2)
                            if remaining2 > 0:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                                acc_label2 = None
                                try:
                                    accounts = load_user_accounts(user_id)
                                    for acc in accounts:
                                        if acc.get("phone") == phone:
                                            acc_label2 = acc.get("username") or acc.get("name") or acc.get("phone")
                                            break
                                except Exception:
                                    pass
                                prefix2 = f"{acc_label2}: " if acc_label2 else ""
                                await bot.send_message(
                                    chat_id=call.message.chat.id,
                                    text=f"{prefix2}Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å {remaining2} —Å–µ–∫—É–Ω–¥.",
                                    reply_markup=get_autosub_active_keyboard()
                                )
                                # –ù–µ –æ—á–∏—â–∞–µ–º –∫–ª—é—á–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–∏
                    except Exception:
                        pass
                except Exception:
                    pass
                try:
                    await call.answer("–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
                except Exception:
                    pass
                return
        except Exception:
            pass

        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–ø–∏—Å–∫–∞ @username/—Å—Å—ã–ª–æ–∫ –±–µ–∑ –≥–∞–ª–æ—á–µ–∫ –∏ –∫–Ω–æ–ø–∫–∏ ¬´–î–∞–ª–µ–µ¬ª
        user_states[user_id] = "waiting_autosub_list"

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="autosubscribe")])
        try:
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ @username –∏–ª–∏ https://t.me/‚Ä¶ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):",
                reply_markup=markup,
                user_id=user_id
            )
            user_states[f"{user_id}_autosub_input_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return

    elif data == "autosub_next":
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if not is_license_valid(user_id):
            try:
                ft = load_freetrial()
            except Exception:
                ft = {}
            if str(user_id) in ft and not is_freetrial_valid(user_id):
                alert_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            else:
                alert_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
            try:
                await call.answer(alert_text, show_alert=True)
            except Exception:
                pass
            await handle_access_expired(user_id)
            return

        phone = user_states.get(f"{user_id}_autosub_phone")
        if not phone:
            await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.", show_alert=True)
            return

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ –∞–∫–∫–∞—É–Ω—Ç ‚Äî
        # —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —á–∞—Ç, –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥—è –∫ –≤–≤–æ–¥—É —Å–ø–∏—Å–∫–∞
        try:
            running_phone = user_states.get(f"{user_id}_autosub_running_phone")
            task_key = f"autosubscribe:{phone}"
            if (
                (user_id in active_tasks and task_key in active_tasks[user_id])
                or (load_autosub_state(user_id).get(str(phone), {}).get("remaining"))
            ):
                # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –∏ –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–¥–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –ª–æ–≥—É
                user_states.pop(f"{user_id}_autosub_minimized_{phone}", None)
                user_states[f"{user_id}_autosub_attach_keyboard_{phone}"] = True
                try:
                    await call.answer("–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
                except Exception:
                    pass
                return
        except Exception:
            pass

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Å–ø–∏—Å–∫–∞ @username/—Å—Å—ã–ª–æ–∫
        user_states[user_id] = "waiting_autosub_list"

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="autosubscribe")])
        try:
            sent_message = await delete_and_send_image(
                call.message,
                "mailing.png",
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ @username –∏–ª–∏ https://t.me/‚Ä¶ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):",
                reply_markup=markup,
                user_id=user_id
            )
            user_states[f"{user_id}_autosub_input_message_id"] = sent_message.message_id
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
        return
@dp.message()
async def handle_all(message: Message):
    global last_bot_message_id
    user_id = message.from_user.id
    state = user_states.get(user_id)


    if state == "wait_license":
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:" —Å password.png
        # –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å password.png
            password_message_id = user_states.get(f"{user_id}_password_message_id")
            if password_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:" —Å password.png
                await bot.delete_message(chat_id=message.chat.id, message_id=password_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_password_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        license_code = message.text.strip()
        key_groups = load_key_groups()

        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ OWNER –ª–∏—Ü–µ–Ω–∑–∏–∏
        if license_code == "andromedasysmode" or license_code in key_groups.get("owner", []):
            user_states[user_id] = "authorized"
            user_states[f"{user_id}_license_type"] = "owner"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∞—Ö
            update_user_main_info(
                user_id,
                license_type="owner",
                license_key=license_code,
                registration_date=datetime.now().strftime("%d.%m.%Y")
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_dir = os.path.join(user_base_dir, str(user_id))  # –ü–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            new_dir = os.path.join(user_base_dir, f"{user_id}_owner")  # –ü–∞–ø–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –î–û –µ—ë –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            old_settings_data = {}
            if os.path.exists(old_dir):
                old_settings_file = os.path.join(old_dir, "settings.json")
                if os.path.exists(old_settings_file):
                    try:
                        with open(old_settings_file, "r", encoding="utf-8") as f:
                            old_settings_data = json.load(f) or {}
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ—ë
            if os.path.exists(old_dir):
                try:
                    os.rename(old_dir, new_dir)
                    print(f"–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_dir} -> {new_dir}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    os.makedirs(new_dir, exist_ok=True)
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                os.makedirs(new_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º config.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config_path = os.path.join(new_dir, "config.json")
            config = {}
            if os.path.exists(config_path):
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                except Exception:
                    config = {}
            
            # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º config.json –≤ –ø–∞–ø–∫–µ owner
            owner_dir = os.path.join(root, "owner")
            owner_config_path = os.path.join(owner_dir, "config.json")
            config = {}
            if os.path.exists(config_path):
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                except Exception:
                    config = {}
            config["api_id"] = 29875596
            config["api_hash"] = "9300a583f2e76cc3650b69e24e350da4"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º config.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º config.json –≤ –ø–∞–ø–∫–µ owner
            with open(owner_config_path, "w", encoding="utf-8") as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º settings.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
            settings_file = os.path.join(new_dir, "settings.json")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            old_settings_data = {}
            if os.path.exists(old_dir):
                old_settings_file = os.path.join(old_dir, "settings.json")
                if os.path.exists(old_settings_file):
                    try:
                        with open(old_settings_file, "r", encoding="utf-8") as f:
                            old_settings_data = json.load(f) or {}
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            settings_data = {"language": user_languages.get(user_id, "ru")}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            if "style" in old_settings_data:
                settings_data["style"] = old_settings_data["style"]
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {old_settings_data['style']}")
            else:
                settings_data["style"] = "robo"
                print("–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: robo")
            
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings_data, f, ensure_ascii=False, indent=2)
            await delete_and_send_image(
                message,
                "start_menu.png",
                "–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ OWNER.",
                reply_markup=get_main_inline_menu(),
                user_id=user_id
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ ADMIN –ª–∏—Ü–µ–Ω–∑–∏–∏
        elif license_code == "andromedamodeadmin" or license_code in key_groups.get("admin", []):
            user_states[user_id] = "authorized"
            user_states[f"{user_id}_license_type"] = "admin"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∞—Ö
            update_user_main_info(
                user_id,
                license_type="admin",
                license_key=license_code
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_dir = os.path.join(user_base_dir, str(user_id))  # –ü–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            new_dir = os.path.join(user_base_dir, f"{user_id}_admin")  # –ü–∞–ø–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –î–û –µ—ë –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            old_settings_data = {}
            if os.path.exists(old_dir):
                old_settings_file = os.path.join(old_dir, "settings.json")
                if os.path.exists(old_settings_file):
                    try:
                        with open(old_settings_file, "r", encoding="utf-8") as f:
                            old_settings_data = json.load(f) or {}
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ—ë
            if os.path.exists(old_dir):
                try:
                    os.rename(old_dir, new_dir)
                    print(f"–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_dir} -> {new_dir}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    os.makedirs(new_dir, exist_ok=True)
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                os.makedirs(new_dir, exist_ok=True)
            
            config_path = os.path.join(new_dir, "config.json")
            # --- –§–æ—Ä–º–∏—Ä—É–µ–º config.json –∫–∞–∫ —É user ---
            if not os.path.exists(config_path):
                config = {
                    "api_id": 20179612,
                    "api_hash": "97152305c69703ef16f9eb14b3c15f25",
                    "accounts": []
                }
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
            else:
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                except Exception:
                    config = {}
                config["api_id"] = 20179612
                config["api_hash"] = "97152305c69703ef16f9eb14b3c15f25"
                if "accounts" not in config:
                    config["accounts"] = []
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º settings.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
            settings_file = os.path.join(new_dir, "settings.json")
            settings_data = {"language": user_languages.get(user_id, "ru")}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            if "style" in old_settings_data:
                settings_data["style"] = old_settings_data["style"]
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {old_settings_data['style']}")
            else:
                settings_data["style"] = "robo"
                print("–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: robo")
            
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings_data, f, ensure_ascii=False, indent=2)
            
            await delete_and_send_image(
                message,
                "start_menu.png",
                "–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ ADMIN.",
                reply_markup=get_main_inline_menu(),
                user_id=user_id
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ pro/premium/basic –∫–ª—é—á–µ–π
        elif license_code in set(key_groups.get("pro", []) + key_groups.get("premium", []) + key_groups.get("basic", [])):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ license.json
            update_license(user_id, license_code)
            licenses = load_licenses()
            lic = licenses.get(str(user_id))
            now = int(time.time())
            if lic:
                base_end_ts = lic.get("activated_at", 0) + LICENSE_DURATION_DAYS * 86400
                effective_end_ts = base_end_ts + get_referral_bonus_seconds(user_id)
                if now > effective_end_ts:
                    await delete_and_send_image(
                        message,
                        "start_menu.png",
                        "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏—Å—Ç—ë–∫.",
                        reply_markup=get_start_menu(),
                        user_id=user_id
                    )
                    user_states[user_id] = None
                    return
            user_states[user_id] = "authorized"
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ –≥—Ä—É–ø–ø–µ –∫–ª—é—á–∞
            if license_code in key_groups.get("pro", []):
                user_states[f"{user_id}_license_type"] = "pro"
                suffix = "_pro"
                default_api_id = 22133941
                default_api_hash = "c226d2309461ee258c2aefc4dd19b743"
                license_type = "pro"
            elif license_code in key_groups.get("premium", []):
                user_states[f"{user_id}_license_type"] = "premium"
                suffix = "_premium"
                default_api_id = 22133941
                default_api_hash = "c226d2309461ee258c2aefc4dd19b743"
                license_type = "premium"
            else:
                user_states[f"{user_id}_license_type"] = "basic"
                suffix = "_basic"
                default_api_id = 22133941
                default_api_hash = "c226d2309461ee258c2aefc4dd19b743"
                license_type = "basic"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥–∞—Ö
            update_user_main_info(
                user_id,
                license_type=license_type,
                license_key=license_code
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_dir = os.path.join(user_base_dir, str(user_id))  # –ü–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            new_dir = os.path.join(user_base_dir, f"{user_id}{suffix}")  # –ü–∞–ø–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º

            # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º authorized=true —è–≤–Ω–æ (–Ω–∞ —Å–ª—É—á–∞–π –º–∏–≥—Ä–∞—Ü–∏–π)
            try:
                lic_rec = licenses.get(str(user_id)) or {}
                lic_rec["authorized"] = True
                licenses[str(user_id)] = lic_rec
                save_licenses(licenses)
            except Exception:
                pass
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –î–û –µ—ë –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            old_settings_data = {}
            if os.path.exists(old_dir):
                old_settings_file = os.path.join(old_dir, "settings.json")
                if os.path.exists(old_settings_file):
                    try:
                        with open(old_settings_file, "r", encoding="utf-8") as f:
                            old_settings_data = json.load(f) or {}
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ—ë
            if os.path.exists(old_dir):
                try:
                    os.rename(old_dir, new_dir)
                    print(f"–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_dir} -> {new_dir}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    os.makedirs(new_dir, exist_ok=True)
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                os.makedirs(new_dir, exist_ok=True)
            
            # --- –î–û–ë–ê–í–¨: —Å–æ–∑–¥–∞—ë–º config.json, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ---
            config_path = os.path.join(new_dir, "config.json")
            if not os.path.exists(config_path):
                config = {
                    "api_id": 22133941,
                    "api_hash": "c226d2309461ee258c2aefc4dd19b743",
                    "accounts": []
                }
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º settings.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
            settings_file = os.path.join(new_dir, "settings.json")
            
            settings_data = {"language": user_languages.get(user_id, "ru")}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            if "style" in old_settings_data:
                settings_data["style"] = old_settings_data["style"]
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {old_settings_data['style']}")
            else:
                settings_data["style"] = "robo"
                print("–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: robo")
            
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings_data, f, ensure_ascii=False, indent=2)
            
            # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–Ω—É—Å —Å–µ–π—á–∞—Å –∏ –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            referral_code_tmp = user_states.get(f"{user_id}_referral_code")
            if user_states.get(f"{user_id}_referral_used") and referral_code_tmp and not has_user_used_referral(user_id):
                add_invite(referral_code_tmp, user_id)
            if f"{user_id}_referral_used" in user_states:
                del user_states[f"{user_id}_referral_used"]
            if f"{user_id}_referral_code" in user_states:
                del user_states[f"{user_id}_referral_code"]
            await delete_and_send_image(
                message,
                "start_menu.png",
                "–í–∞—à–∞ –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=get_main_inline_menu(),
                user_id=user_id
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ trial –ª–∏—Ü–µ–Ω–∑–∏–∏ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏)
        elif user_states.get(f"{user_id}_referral_used") and license_code in key_groups.get("trial", []):
            user_states[user_id] = "authorized"
            user_states[f"{user_id}_license_type"] = "trial"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            referral_code = user_states.get(f"{user_id}_referral_code", "")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è trial
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_dir = os.path.join(user_base_dir, str(user_id))  # –ü–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
            new_dir = os.path.join(user_base_dir, f"{user_id}_trial")  # –ü–∞–ø–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –î–û –µ—ë –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            old_settings_data = {}
            if os.path.exists(old_dir):
                old_settings_file = os.path.join(old_dir, "settings.json")
                if os.path.exists(old_settings_file):
                    try:
                        with open(old_settings_file, "r", encoding="utf-8") as f:
                            old_settings_data = json.load(f) or {}
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            # –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –µ—ë
            if os.path.exists(old_dir):
                try:
                    os.rename(old_dir, new_dir)
                    print(f"–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_dir} -> {new_dir}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    os.makedirs(new_dir, exist_ok=True)
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                os.makedirs(new_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º config.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config_path = os.path.join(new_dir, "config.json")
            config = {"accounts": []}
            with open(config_path, "w", encoding="utf-8") as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            
            # –°–æ–∑–¥–∞–µ–º settings.json –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
            settings_file = os.path.join(new_dir, "settings.json")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            old_settings_data = {}
            if os.path.exists(old_dir):
                old_settings_file = os.path.join(old_dir, "settings.json")
                if os.path.exists(old_settings_file):
                    try:
                        with open(old_settings_file, "r", encoding="utf-8") as f:
                            old_settings_data = json.load(f) or {}
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            
            settings_data = {"language": user_languages.get(user_id, "ru")}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if "style" in old_settings_data:
                settings_data["style"] = old_settings_data["style"]
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å—Ç–∏–ª—å –∏–∑ —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {old_settings_data['style']}")
            
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings_data, f, ensure_ascii=False, indent=2)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            if f"{user_id}_referral_used" in user_states:
                del user_states[f"{user_id}_referral_used"]
            if f"{user_id}_referral_code" in user_states:
                del user_states[f"{user_id}_referral_code"]
            
            await delete_and_send_image(
                message,
                "start_menu.png",
                f"üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ 72 —á–∞—Å–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                reply_markup=get_main_inline_menu(),
                user_id=user_id
            )
            return
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á
            await delete_and_send_image(
                message,
                "start_menu.png",
                "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_back_to_start_menu(),
                user_id=user_id
            )
            return

    elif state == "waiting_autoresponder_message":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        template_text = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        phone = user_states.get(f"{user_id}_autoresponder_phone")
        
        if not phone:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞")
            user_states[user_id] = "authorized"
            return
        
        if not template_text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:"
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
            input_message_id = user_states.get(f"{user_id}_autoresponder_input_message_id")
            if input_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:"
                await bot.delete_message(chat_id=message.chat.id, message_id=input_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_autoresponder_input_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        set_autoresponder_template(user_id, phone, template_text)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if f"{user_id}_autoresponder_phone" in user_states:
            del user_states[f"{user_id}_autoresponder_phone"]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        user_states[user_id] = "authorized"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∏ –¥–µ–π—Å—Ç–≤–∏—è
        saved_template = get_autoresponder_template(user_id, phone)
        sent_message = await delete_and_send_image(
            message,
            "autoresponder.png",
            f"–®–∞–±–ª–æ–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞:\n\n{saved_template}",
            reply_markup=get_autoresponder_template_actions_menu(phone),
            user_id=user_id
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_states[f"{user_id}_autoresponder_message_id"] = sent_message.message_id
        return

    elif state == "waiting_autosub_list":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–ø–∏—Å–æ–∫ @username / —Å—Å—ã–ª–æ–∫ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏
        text = (message.text or "").strip()
        phone = user_states.get(f"{user_id}_autosub_phone")
        if not phone:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏")
            user_states[user_id] = "authorized"
            return

        # –õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π guard: –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∏—Å—Ç—ë–∫—à–µ–º trial/–ª–∏—Ü–µ–Ω–∑–∏–∏
        if not is_license_valid(user_id):
            try:
                await handle_access_expired(user_id)
            except Exception:
                pass
            user_states[user_id] = "authorized"
            return

        # Trial-–≥–µ–π—Ç: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ settings.autosubscribe_limit
        trial_remaining = None
        try:
            license_type = detect_license_type(user_id)
            if str(license_type).endswith("trial") or str(license_type) == "trial":
                used = get_user_autosub_limit(user_id)
                trial_remaining = max(0, 5 - used)
                if used >= 5 or trial_remaining <= 0:
                    try:
                        await safe_message_answer(
                            message,
                            "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á.",
                        )
                    except Exception:
                        pass
                    user_states[user_id] = "authorized"
                    return
        except Exception:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å
        try:
            input_message_id = user_states.get(f"{user_id}_autosub_input_message_id")
            if input_message_id:
                await bot.delete_message(chat_id=message.chat.id, message_id=input_message_id)
                del user_states[f"{user_id}_autosub_input_message_id"]
        except Exception:
            pass

        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è trial ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —É—Å–ø–µ—Ö–∞–º –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
        raw_list = [line.strip() for line in text.splitlines() if line.strip()]
        if not raw_list:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫-—É—Å—Ç–æ–π—á–∏–≤–æ)
        try:
            normalized_for_state = normalize_autosub_list(raw_list)
            state_persist = load_autosub_state(user_id)
            acc_state = state_persist.get(str(phone)) or {}
            acc_state["remaining"] = normalized_for_state
            acc_state.setdefault("processed", [])
            state_persist[str(phone)] = acc_state
            save_autosub_state(user_id, state_persist)
        except Exception:
            pass

        # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∏–µ–Ω—Ç
        config = load_config(user_id)
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        if not api_id or not api_hash:
            await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω—ã API ID/HASH –≤ config.json")
            user_states[user_id] = "authorized"
            return

        accounts = load_user_accounts(user_id)
        account = next((a for a in accounts if a.get("phone") == phone), None)
        if not account:
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            user_states[user_id] = "authorized"
            return

        session_name = account.get("name") or account.get("phone")
        license_type = user_states.get(f"{user_id}_license_type") or detect_license_type(user_id)
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        if not client:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
            user_states[user_id] = "authorized"
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Å–ø–∏—Å–∫—É –≤ —Ñ–æ–Ω–µ
        async def run_autosub_list():
            try:
                # –§–∏–∫—Å–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç–∞–π–º–µ—Ä–∞
                current_phone = user_states.get(f"{user_id}_autosub_phone")
                # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω—É—é –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                current_label = None
                try:
                    accounts = load_user_accounts(user_id)
                    for acc in accounts:
                        if acc.get("phone") == current_phone:
                            current_label = acc.get("username") or acc.get("name") or acc.get("phone")
                            break
                except Exception:
                    pass

                async def reporter(text: str):
                    try:
                        # –û—Ç–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–∫–ª—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ UI
                        await asyncio.sleep(0)
                        # –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ
                        try:
                            if text.startswith("–ü–µ—Ä–µ—Ä—ã–≤ ") and text.endswith(" –º–∏–Ω—É—Ç"):
                                # –ï—Å–ª–∏ –ª–∏–º–∏—Ç trial –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø–æ–¥–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ
                                try:
                                    license_type_local = detect_license_type(user_id)
                                    if (str(license_type_local).endswith("trial") or str(license_type_local) == "trial") and get_user_autosub_limit(user_id) >= 5:
                                        return
                                except Exception:
                                    pass
                                minutes_str = text.replace("–ü–µ—Ä–µ—Ä—ã–≤ ", "").replace(" –º–∏–Ω—É—Ç", "").strip()
                                total_minutes = int(minutes_str)
                                user_states[f"{user_id}_autosub_break_{current_phone}_started_ts"] = int(asyncio.get_event_loop().time())
                                user_states[f"{user_id}_autosub_break_{current_phone}_total_sec"] = total_minutes * 60
                            elif text.startswith("–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å ") and text.endswith(" –º–∏–Ω—É—Ç"):
                                minutes_left = int(text.replace("–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å ", "").replace(" –º–∏–Ω—É—Ç", "").strip())
                                user_states[f"{user_id}_autosub_break_{current_phone}_started_ts"] = int(asyncio.get_event_loop().time())
                                user_states[f"{user_id}_autosub_break_{current_phone}_total_sec"] = minutes_left * 60
                            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º FloodWait: "Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å X —Å–µ–∫—É–Ω–¥."
                            elif text.startswith("Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å ") and text.endswith(" —Å–µ–∫—É–Ω–¥."):
                                try:
                                    seconds_str = text.replace("Telegram API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å ", "").replace(" —Å–µ–∫—É–Ω–¥.", "").strip()
                                    total_seconds = int(seconds_str)
                                    user_states[f"{user_id}_autosub_flood_{current_phone}_started_ts"] = int(asyncio.get_event_loop().time())
                                    user_states[f"{user_id}_autosub_flood_{current_phone}_total_sec"] = total_seconds
                                except Exception:
                                    pass
                        except Exception:
                            pass

                        # –ï—Å–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ, –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ —á–∞—Ç (per-phone)
                        if user_states.get(f"{user_id}_autosub_minimized_{current_phone}"):
                            return

                        # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –±–ª–∏–∂–∞–π—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if user_states.pop(f"{user_id}_autosub_attach_keyboard_{current_phone}", None) or user_states.pop(f"{user_id}_autosub_unminimized_{current_phone}", None):
                            prefixed = f"{current_label}: {text}" if current_label else text
                            try:
                                await bot.send_message(
                                    chat_id=message.chat.id,
                                    text=prefixed,
                                    reply_markup=get_autosub_active_keyboard()
                                )
                            except Exception:
                                pass
                        else:
                            prefixed = f"{current_label}: {text}" if current_label else text
                            try:
                                await bot.send_message(chat_id=message.chat.id, text=prefixed)
                            except Exception:
                                pass

                # –ü—Ä–æ–≥—Ä–µ—Å—Å: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ persisted-state –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º settings.autosubscribe_limit
                        try:
                            m_ok = re.match(r"^–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ (.+)$", text.strip())
                            if m_ok and current_phone:
                                autosub_progress_remove_item(user_id, current_phone, m_ok.group(1))
                                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –≤ settings.json ‚Äî –¢–û–õ–¨–ö–û –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
                                try:
                                    increment_user_autosub_limit(user_id, 1)
                                except Exception:
                                    pass
                        except Exception:
                            pass

                        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç trial (5), –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫—É
                        try:
                            license_type_local2 = detect_license_type(user_id)
                            if (str(license_type_local2).endswith("trial") or str(license_type_local2) == "trial") and get_user_autosub_limit(user_id) >= 5:
                                # –ï—Å–ª–∏ –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–æ ‚Äî —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                                try:
                                    minimized_flag = bool(user_states.get(f"{user_id}_autosub_minimized_{current_phone}"))
                                except Exception:
                                    minimized_flag = False
                                if not minimized_flag:
                                    try:
                                        await safe_message_answer(
                                            message,
                                            "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –î–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á.",
                                            reply_markup=get_autosub_active_keyboard()
                                        )
                                    except Exception:
                                        pass
                                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ UI
                                try:
                                    user_states[f"{user_id}_autosub_finished_{current_phone}"] = True
                                except Exception:
                                    pass
                                try:
                                    import asyncio as _asyncio
                                    _asyncio.create_task(stop_task(user_id, f"autosubscribe:{current_phone}"))
                                except Exception:
                                    pass
                                return
                        except Exception:
                            pass

                        # –§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
                        try:
                            if (text.strip() == "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." or "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." in text):
                                user_states[f"{user_id}_autosub_last_done_{current_phone}"] = True
                                if current_label:
                                    user_states[f"{user_id}_autosub_last_done_label_{current_phone}"] = current_label
                        except Exception:
                            pass

                        # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞ –∏ –ø—Ä–∏—à–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–µ
                        try:
                            if user_states.get(f"{user_id}_autosub_minimized_{current_phone}") and (text.strip() == "–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." or "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." in text):
                                user_states[f"{user_id}_autosub_done_{current_phone}"] = True
                                if current_label:
                                    user_states[f"{user_id}_autosub_done_label_{current_phone}"] = current_label
                                # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è phone –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ
                                user_states[f"{user_id}_autosub_done_pending"] = {
                                    "phone": current_phone,
                                    "label": current_label
                                }
                                # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ —á–∞—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
                                return
                        except Exception:
                            pass

                        # (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤—ã—à–µ) –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    except Exception:
                        pass
                # –û—á–∏—Å—Ç–∏–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è
                try:
                    if current_phone:
                        user_states.pop(f"{user_id}_autosub_last_done_{current_phone}", None)
                        user_states.pop(f"{user_id}_autosub_last_done_label_{current_phone}", None)
                        user_states.pop(f"{user_id}_autosub_finished_{current_phone}", None)
                except Exception:
                    pass
                # Guard-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                async def _license_guard() -> bool:
                    try:
                        return bool(is_license_valid(user_id))
                    except Exception:
                        return True

                await subscribe_to_chats_list(client, raw_list, reporter, _license_guard)
            except Exception as e:
                print(f"[AUTOSUBSCRIBE_LIST] –û—à–∏–±–∫–∞: {e}")

        # –ó–∞–ø—É—Å–∫ –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–π –∑–∞–¥–∞—á–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –°—Ç–æ–ø/–°–≤–µ—Ä–Ω—É—Ç—å (per-phone)
        await start_task(user_id, f"autosubscribe:{phone}", run_autosub_list())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —Å –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞
        try:
            running_phone = user_states.get(f"{user_id}_autosub_phone")
            if running_phone:
                user_states[f"{user_id}_autosub_running_phone"] = running_phone
        except Exception:
            pass

        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            user_states.pop(f"{user_id}_autosub_minimized_{phone}", None)
        except Exception:
            pass
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∫ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
        try:
            await safe_message_answer(
                message,
                "–ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–≤–µ—Ä–Ω—É—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.",
                reply_markup=get_autosub_active_keyboard()
            )
        except Exception:
            pass
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º UI-wise; —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ ReplyKeyboard
        return

    if state == "wait_referral_code":
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥" –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            referral_message_id = user_states.get(f"{user_id}_referral_input_message_id")
            if referral_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥"
                await bot.delete_message(chat_id=message.chat.id, message_id=referral_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_referral_input_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        referral_code = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if is_valid_referral_code(referral_code):
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω - –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ª–∏—Ü–µ–Ω–∑–∏–∏
            user_states[f"{user_id}_referral_used"] = True
            user_states[f"{user_id}_referral_code"] = referral_code
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –ª–æ–≥–∏
            update_user_main_info(user_id, referral=referral_code)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
            markup = get_back_to_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_back_to_referral_menu_en()
            markup = get_back_to_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_back_to_referral_menu_en()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            sent_message = await delete_and_send_image(
                message,
                "password.png",
                "ü™™ –í–≤–µ–¥–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á:",
                reply_markup=markup,
                user_id=user_id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            user_states[f"{user_id}_password_message_id"] = sent_message.message_id
            user_states[user_id] = "wait_license"
        else:
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É
            markup = get_referral_menu() if user_languages.get(user_id, "ru") == "ru" else get_referral_menu_en()
            await delete_and_send_image(
                message,
                "password.png",
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
                reply_markup=markup,
                user_id=user_id
            )
            user_states[user_id] = "wait_referral_choice"
        return

        





    if state == "wait_phone":
        phone = message.text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            phone_message_id = user_states.get(f"{user_id}_phone_message_id")
            if phone_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
                await bot.delete_message(chat_id=message.chat.id, message_id=phone_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_phone_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        user_states[f"{user_id}_new_phone"] = phone

        # --- –î–û–ë–ê–í–¨–¢–ï –ü–†–û–í–ï–†–ö–£ –õ–ò–ú–ò–¢–ê –°–ï–°–°–ò–ô –ü–ï–†–ï–î –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô ---
        can_add, msg = can_add_session(user_id)
        if not can_add:
            await message.answer(
                msg,
                reply_markup=get_accounts_menu(user_id)
            )
            user_states[user_id] = "accounts_menu"
            return
        # --- –ö–û–ù–ï–¶ –í–°–¢–ê–í–ö–ò ---

        try:
            from telethon.sync import TelegramClient
            license_type = user_states.get(f"{user_id}_license_type")
            if not license_type:
                license_type = detect_license_type(user_id)
            user_dir = get_user_dir(user_id, license_type)
            sessions_dir = os.path.join(get_user_subdir(user_id, "bot", license_type), "sessions")
            os.makedirs(sessions_dir, exist_ok=True)
            config_path = os.path.join(user_dir, "config.json")
            session_path = os.path.join(sessions_dir, f"{phone}")

            # –°–æ–∑–¥–∞–µ–º config.json –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(config_path):
                config = {"accounts": []}
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
            else:
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
            api_id = config.get("api_id")
            api_hash = config.get("api_hash")

            if not api_id or not api_hash:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω API_ID –∏–ª–∏ API_HASH. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_back_to_start_menu()
                )
                user_states[user_id] = None
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è
            if os.path.exists(session_path + ".session"):
                client = TelegramClient(session_path, api_id, api_hash)
                try:
                    await asyncio.wait_for(client.connect(), timeout=30.0)
                    if await client.is_user_authorized():
                        await client.disconnect()
                        await message.answer(
                            f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω!",
                            reply_markup=get_accounts_menu(user_id)
                        )
                        user_states[user_id] = "accounts_menu"
                        user_states.pop(f"{user_id}_new_phone", None)
                        user_states.pop(f"{user_id}_phone_code_hash", None)
                        return
                    else:
                        await client.disconnect()
                        os.remove(session_path + ".session")
                except asyncio.TimeoutError:
                    await client.disconnect()
                    print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    if os.path.exists(session_path + ".session"):
                        os.remove(session_path + ".session")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏: {e}")
                    if os.path.exists(session_path + ".session"):
                        os.remove(session_path + ".session")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            client = TelegramClient(session_path, api_id, api_hash)
            try:
                await asyncio.wait_for(client.connect(), timeout=30.0)
                sent = await asyncio.wait_for(client.send_code_request(phone), timeout=30.0)
                user_states[f"{user_id}_phone_code_hash"] = sent.phone_code_hash
                await client.disconnect()
            except asyncio.TimeoutError:
                await client.disconnect()
                raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            except Exception as e:
                await client.disconnect()
                raise e
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=back_menu_auth
            )
            user_states[user_id] = "wait_phone"
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        sent_message = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:",  # –∏–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
            reply_markup=back_menu_auth
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_states[f"{user_id}_code_message_id"] = sent_message.message_id
        user_states[user_id] = "wait_code"
        return

    if state == "wait_code":
        code = message.text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:" –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            code_message_id = user_states.get(f"{user_id}_code_message_id")
            if code_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram:"
                await bot.delete_message(chat_id=message.chat.id, message_id=code_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_code_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        phone = user_states.get(f"{user_id}_new_phone")
        phone_code_hash = user_states.get(f"{user_id}_phone_code_hash")
        if not phone or not phone_code_hash:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ phone_code_hash –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=back_menu_auth
            )
            user_states[user_id] = None
            return

        try:
            from telethon.sync import TelegramClient
            from telethon.errors import SessionPasswordNeededError
            license_type = user_states.get(f"{user_id}_license_type")
            if not license_type:
                license_type = detect_license_type(user_id)
            user_dir = get_user_dir(user_id, license_type)
            sessions_dir = os.path.join(get_user_subdir(user_id, "bot", license_type), "sessions")
            os.makedirs(sessions_dir, exist_ok=True)
            config_path = os.path.join(user_dir, "config.json")
            session_path = os.path.join(sessions_dir, f"{phone}")

            # –°–æ–∑–¥–∞–µ–º config.json –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(config_path):
                config = {"accounts": []}
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
            else:
                with open(config_path, "r", encoding="utf-8") as f:
                    config = json.load(f)
            api_id = config.get("api_id")
            api_hash = config.get("api_hash")

            if not api_id or not api_hash:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω API_ID –∏–ª–∏ API_HASH. –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_back_to_start_menu()
                )
                user_states[user_id] = None
                return

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
            client = TelegramClient(session_path, api_id, api_hash)
            try:
                await asyncio.wait_for(client.connect(), timeout=30.0)
                
                if not await client.is_user_authorized():
                    try:
                        await asyncio.wait_for(client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash), timeout=30.0)
                    except SessionPasswordNeededError:
                        await client.disconnect()
                        user_states[user_id] = "wait_password"
                        user_states[f"{user_id}_2fa_phone"] = phone
                        bot_message = await message.answer(
                            "2FA:",
                            reply_markup=back_menu_auth
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è "2FA:" –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                        user_states[f"{user_id}_2fa_message_id"] = bot_message.message_id
                        return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                me = await asyncio.wait_for(client.get_me(), timeout=30.0)
                username = me.username if hasattr(me, "username") and me.username else None
                name = me.first_name if hasattr(me, "first_name") and me.first_name else None
                user_id_telegram = me.id if hasattr(me, "id") else None
                session_name = name  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è
                new_session_path = os.path.join(sessions_dir, f"{session_name}")

                # –ï—Å–ª–∏ –∏–º—è —Å–µ—Å—Å–∏–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª
                if session_path != new_session_path:
                    if os.path.exists(session_path + ".session"):
                        os.rename(session_path + ".session", new_session_path + ".session")
                    session_path = new_session_path

                # –ü–û–õ–£–ß–ê–ï–ú –í–°–ï @USERNAME –î–ò–ê–õ–û–ì–û–í –î–û –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
                dialogs_data = await get_all_dialogs_usernames(client)
                
                await client.disconnect()
                # –ù–∞ —Å–ª—É—á–∞–π —Ä–µ-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Å–Ω–∏–º–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                try:
                    if (user_id, session_name) in disabled_clients:
                        disabled_clients.discard((user_id, session_name))
                    if session_name in disabled_session_names:
                        disabled_session_names.discard(session_name)
                except Exception:
                    pass

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ license.json
                add_session_to_license(user_id, session_name)

                # –û–±–Ω–æ–≤–ª—è–µ–º config.json —Å –Ω–æ–≤—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                accounts = config.get("accounts", [])
                found = False
                for acc in accounts:
                    if acc.get("phone") == phone:
                        acc["name"] = name
                        if username:
                            acc["username"] = username
                        if user_id_telegram:
                            acc["user_id"] = user_id_telegram
                        found = True
                if not found:
                    new_account = {
                        "name": name,
                        "phone": phone,
                    }
                    if username:
                        new_account["username"] = username
                    if user_id_telegram:
                        new_account["user_id"] = user_id_telegram
                    accounts.append(new_account)
                config["accounts"] = accounts
                with open(config_path, "w", encoding="utf-8") as f:
                    json.dump(config, f, ensure_ascii=False, indent=2)
                    
            except asyncio.TimeoutError:
                await client.disconnect()
                raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            except Exception as e:
                await client.disconnect()
                raise e
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            user_states.pop(f"{user_id}_phone_code_hash", None)
            user_states.pop(f"{user_id}_new_phone", None)
            user_states[user_id] = "wait_phone"
            await message.answer(
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –±–æ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_menu_auth
            )
            return

        # –°–æ–∑–¥–∞–µ–º resume_process.json –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        resume_state_file = os.path.join(user_dir, "resume_process.json")
        if not os.path.exists(resume_state_file):
            initial_resume_state = {
                "accounts": {},
                "global_state": {
                    "last_activity": int(time.time()),
                    "version": "1.0"
                }
            }
            with open(resume_state_file, "w", encoding="utf-8") as f:
                json.dump(initial_resume_state, f, ensure_ascii=False, indent=2)
        
        # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤ logs.json
        update_user_account_info_in_logs(user_id, name, phone, username, user_id_telegram)
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú COOKIES.JSON –° –ü–û–õ–£–ß–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
        if dialogs_data:
            update_cookies_json(user_id, session_name, dialogs_data)
        
        await message.answer(
            f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_accounts_menu(user_id)
        )
        user_states[user_id] = "accounts_menu"
        user_states.pop(f"user_id_new_phone", None)
        user_states.pop(f"{user_id}_api_id", None)
        user_states[user_id] = "authorized"
        authorized_users.add(user_id)
        return



    if state == "wait_password":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "2FA:" –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "2FA:" –æ—Ç –±–æ—Ç–∞
            bot_2fa_message_id = user_states.get(f"{user_id}_2fa_message_id")
            if bot_2fa_message_id:
                await bot.delete_message(chat_id=message.chat.id, message_id=bot_2fa_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_2fa_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–æ–ª–µ–º
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        password = message.text.strip()
        phone = user_states.get(f"{user_id}_2fa_phone")
        license_type = user_states.get(f"{user_id}_license_type")
        if not license_type:
            license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type)
        sessions_dir = os.path.join(get_user_subdir(user_id, "bot", license_type), "sessions")
        config_path = os.path.join(user_dir, "config.json")
        session_path = os.path.join(sessions_dir, f"{phone}")

        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")

        try:
            from telethon.sync import TelegramClient
            client = TelegramClient(session_path, api_id, api_hash)
            try:
                await asyncio.wait_for(client.connect(), timeout=30.0)
                await asyncio.wait_for(client.sign_in(password=password), timeout=30.0)
                me = await asyncio.wait_for(client.get_me(), timeout=30.0)
                username = me.username if hasattr(me, "username") and me.username else None
                name = me.first_name if hasattr(me, "first_name") and me.first_name else None
                user_id_telegram = me.id if hasattr(me, "id") else None
                session_name = name  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è
                new_session_path = os.path.join(sessions_dir, f"{session_name}")
            except asyncio.TimeoutError:
                await client.disconnect()
                raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 2FA. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            except Exception as e:
                await client.disconnect()
                raise e

            if session_path != new_session_path:
                if os.path.exists(session_path + ".session"):
                    os.rename(session_path + ".session", new_session_path + ".session")
                session_path = new_session_path

            # –ü–û–õ–£–ß–ê–ï–ú –í–°–ï @USERNAME –î–ò–ê–õ–û–ì–û–í –î–û –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
            dialogs_data = await get_all_dialogs_usernames(client)

            await client.disconnect()

            # --- –î–û–ë–ê–í–¨–¢–ï –ó–ê–ü–ò–°–¨ –°–ï–°–°–ò–ò –í LICENSE.JSON ---
            add_session_to_license(user_id, session_name)
            # --- –ö–û–ù–ï–¶ –í–°–¢–ê–í–ö–ò ---
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ 2FA –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è 2FA –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            if user_id in last_bot_message_id:
                del last_bot_message_id[user_id]
            # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è 2FA –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            user_states.pop(f"{user_id}_2fa_message_id", None)
            await message.answer(
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (2FA): {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                reply_markup=back_menu_auth
            )
            user_states[user_id] = "wait_password"
            return

        accounts = config.get("accounts", [])
        found = False
        for acc in accounts:
            if acc.get("phone") == phone:
                acc["name"] = name
                if username:
                    acc["username"] = username
                if user_id_telegram:
                    acc["user_id"] = user_id_telegram
                found = True
        if not found:
            new_account = {
                "name": name,
                "phone": phone,
            }
            if username:
                new_account["username"] = username
            if user_id_telegram:
                new_account["user_id"] = user_id_telegram
            accounts.append(new_account)
        config["accounts"] = accounts
        with open(config_path, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

        # –°–æ–∑–¥–∞–µ–º resume_process.json –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (2FA)
        resume_state_file = os.path.join(user_dir, "resume_process.json")
        if not os.path.exists(resume_state_file):
            initial_resume_state = {
                "accounts": {},
                "global_state": {
                    "last_activity": int(time.time()),
                    "version": "1.0"
                }
            }
            with open(resume_state_file, "w", encoding="utf-8") as f:
                json.dump(initial_resume_state, f, ensure_ascii=False, indent=2)
        
        # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤ logs.json
        update_user_account_info_in_logs(user_id, name, phone, username, user_id_telegram)
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú COOKIES.JSON –° –ü–û–õ–£–ß–ï–ù–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
        if dialogs_data:
            update_cookies_json(user_id, session_name, dialogs_data)
        
        await message.answer(
            f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_accounts_menu(user_id)
        )
        user_states[user_id] = "accounts_menu"
        user_states.pop(f"{user_id}_2fa_phone", None)
        user_states.pop(f"{user_id}_new_phone", None)
        user_states.pop(f"{user_id}_phone_code_hash", None)
        # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è 2FA –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        user_states.pop(f"{user_id}_2fa_message_id", None)
        if user_id in last_bot_message_id:
            del last_bot_message_id[user_id]
        return







    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ ---
    if isinstance(state, str) and state.startswith("wait_template_"):
        phone = state.replace("wait_template_", "")
        template_text = message.text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω:" —Å mailing.png
        # –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å mailing.png
            template_message_id = user_states.get(f"{user_id}_template_message_id")
            if template_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω:" —Å mailing.png
                await bot.delete_message(chat_id=message.chat.id, message_id=template_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_template_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        accounts = load_user_accounts(user_id)
        acc = next((a for a in accounts if a.get("phone") == phone), None)
        if not acc:
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[user_id] = "select_template_account"
            return
        i = 1
        while f"template{i}" in acc:
            i += 1
        acc[f"template{i}"] = template_text
        save_user_accounts(user_id, accounts)
        await message.answer(
            f"–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}.",
            reply_markup=get_templates_list_menu(phone, [acc[f"template{j}"] for j in range(1, i+1)])
        )
        user_states[user_id] = f"templates_list_{phone}"
        return

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ ---
    if isinstance(state, str) and state.startswith("edit_template_"):
        # state: edit_template_{phone}_{idx}
        m = re.match(r"edit_template_(.+)_(\d+)", state)
        if not m:
            await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.")
            user_states[user_id] = "select_template_account"
            return
        phone, idx = m.group(1), m.group(2)
        template_text = message.text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞:" —Å mailing.png
        # –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å mailing.png
            template_message_id = user_states.get(f"{user_id}_template_message_id")
            if template_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞:" —Å mailing.png
                await bot.delete_message(chat_id=message.chat.id, message_id=template_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_template_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        accounts = load_user_accounts(user_id)
        acc = next((a for a in accounts if a.get("phone") == phone), None)
        if not acc:
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[user_id] = "select_template_account"
            return
        key = f"template{idx}"
        acc[key] = template_text
        save_user_accounts(user_id, accounts)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        templates = []
        i = 1
        while True:
            k = f"template{i}"
            if k in acc:
                templates.append(acc[k])
                i += 1
            else:
                break
        await message.answer(
            f"–®–∞–±–ª–æ–Ω #{idx} –æ–±–Ω–æ–≤–ª—ë–Ω.",
            reply_markup=get_templates_list_menu(phone, templates)
        )
        user_states[user_id] = f"templates_list_{phone}"
        return
    
    


    # --- –í–≤–æ–¥ username –¥–ª—è –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞ –∏ –∑–∞–ø—É—Å–∫ "–ü–æ—á—Ç–∞" ---

    elif isinstance(state, dict) and state.get("postman_step") == "wait_username":
        username = message.text.strip()
        state["postman_username"] = username
        user_states[user_id] = state
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ @username, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º @username
            username_message_id = user_states.get(f"{user_id}_postman_username_message_id")
            if username_message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ @username, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
                await bot.delete_message(chat_id=message.chat.id, message_id=username_message_id)
                # –û—á–∏—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                del user_states[f"{user_id}_postman_username_message_id"]
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –£–¥–∞–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.delete()
        except Exception:
            pass
        
        # --- –ó–∞–ø—É—Å–∫ mailboxer –≤ —Ñ–æ–Ω–µ ---
        selected_accounts = [acc for acc in load_user_accounts(user_id) if acc.get("phone") in state.get("selected_accounts", [])]
        postman_account = next((acc for acc in load_user_accounts(user_id) if acc.get("phone") == state.get("postman_selected")), None)
        group_id = None  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω id –≥—Ä—É–ø–ø—ã, –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å
        notify_username = username
        stop_event = threading.Event()
        if user_id not in user_sessions:
            user_sessions[user_id] = {}
        user_sessions[user_id]["mailboxer"] = {
            "process": None,  # —Å—é–¥–∞ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è multiprocessing
            "stop_event": stop_event,
            "task": None,
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º mailboxer –≤ —Ñ–æ–Ω–µ
        print("–ó–∞–ø—É—Å–∫ run_mailboxer –≤ —Ñ–æ–Ω–µ...")
        _task = asyncio.create_task(run_mailboxer(
            user_id,
            user_states.get(f"{user_id}_license_type"),
            selected_accounts,
            postman_account,
            group_id,
            notify_username,
            stop_event
        ))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ—ë –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        user_sessions[user_id]["mailboxer"]["task"] = _task
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        sent_message = await delete_and_send_image(
            message,
            "mailbox.png",
            f"–û—Ç—Å—Ç—É–∫ –ø–æ—á—Ç—ã –Ω–∞ {username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_postman_menu(user_id),
            user_id=user_id
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_states[f"{user_id}_postman_message_id"] = sent_message.message_id


def print_in_white(text):
    return f"\033[97m{text}\033[0m"

def print_in_red(text):
    return f"\033[91m{text}\033[0m"

def print_in_yellow(text):
    return f"\033[93m{text}\033[0m"

def print_in_green(text):
    return f"\033[92m{text}\033[0m"


def is_internet_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É DNS-—Å–µ—Ä–≤–µ—Ä—É Google
        socket.create_connection(("8.8.8.8", 53), timeout=5)
        return True
    except OSError:
        return False
    

def print_separator():
    print("\n" + "-" * 50 + "\n")


def get_templates_for_account(account):
    templates = []
    i = 1
    while True:
        key = f"template{i}"
        if key in account:
            templates.append(account[key])
            i += 1
        else:
            break
    return templates

def get_templates_from_config(config_data, phone):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ config.json –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    templates = []
    
    # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ accounts
    if "accounts" in config_data:
        for account in config_data["accounts"]:
            if account.get("phone") == phone:
                # –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º —à–∞–±–ª–æ–Ω—ã
                i = 1
                while True:
                    key = f"template{i}"
                    if key in account:
                        templates.append(account[key])
                        i += 1
                    else:
                        break
                break
    
    return templates

def load_config(user_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç config.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        license_type = detect_license_type(user_id)
        config_path = get_user_dir(user_id, license_type) + "/config.json"
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return {}

async def get_folder_by_index(client, folder_index):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞–ø–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –¥–ª—è —Ä–µ–∂–∏–º–∞ select"""
    try:
        folders = await list_folders(client)
        if not folders:
            return {"id": 1, "title": "Default"}
        
        folder_keys = list(folders.keys())
        if 0 <= folder_index < len(folder_keys):
            return folders[folder_keys[folder_index]]
        else:
            return folders[folder_keys[0]] if folder_keys else {"id": 1, "title": "Default"}
    except Exception:
        return {"id": 1, "title": "Default"}


def save_resume_state(state, filename=None, user_id=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ resume_process.json"""
    if filename is None:
        if user_id is None:
            filename = resume_state_file
        else:
            user_dir = get_user_dir(user_id, detect_license_type(user_id))
            filename = os.path.join(user_dir, "resume_process.json")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def load_resume_state(filename=None, user_id=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ resume_process.json"""
    if filename is None:
        if user_id is None:
            filename = resume_state_file
        else:
            user_dir = get_user_dir(user_id, detect_license_type(user_id))
            filename = os.path.join(user_dir, "resume_process.json")
    
    if not os.path.exists(filename):
        return None
    try:
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:
                return None
            return json.loads(content)
    except Exception:
        return None

def get_display_name(account):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: username –±–µ–∑ @, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ nickname"""
    username = account.get('username', '')
    if username and not username.startswith('@'):
        return username
    elif username and username.startswith('@'):
        return username[1:]  # –£–±–∏—Ä–∞–µ–º @
    else:
        return account.get("nickname", account.get("phone", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))

def migrate_account_username(account, config_accounts):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç username –∏–∑ config –≤ account, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if 'username' not in account or not account['username']:
        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        for config_acc in config_accounts:
            if config_acc.get('phone') == account.get('phone'):
                if config_acc.get('username'):
                    account['username'] = config_acc['username']
                break
    return account

def get_accounts_break_status(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    resume_state = load_resume_state(user_id=user_id)
    if not resume_state or "accounts" not in resume_state:
        return []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ username
    config = load_config(user_id)
    config_accounts = config.get("accounts", []) if config else []
    
    current_time = int(time.time())
    break_info = []
    
    for account in resume_state["accounts"]:
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º username –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        account = migrate_account_username(account, config_accounts)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
        if account.get("break_until_timestamp", 0) > current_time:
            # –ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
            break_until = account["break_until_timestamp"]
            seconds_left = break_until - current_time
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            hours = seconds_left // 3600
            minutes = (seconds_left % 3600) // 60
            seconds = seconds_left % 60
            
            time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
            display_name = get_display_name(account)
            
            break_info.append({
                "nickname": display_name,
                "time_left": time_str,
                "seconds_left": seconds_left
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏ (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ, —É –∫–æ–≥–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)
    break_info.sort(key=lambda x: x["seconds_left"], reverse=True)
    return break_info
async def get_folder_name_by_id(client, folder_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –ø–æ –µ—ë ID"""
    try:
        folders = await list_folders(client)
        for folder_data in folders.values():
            if folder_data.get('id') == folder_id:
                return folder_data.get('title', f'Folder_{folder_id}')
        return f'Folder_{folder_id}'
    except Exception:
        return f'Folder_{folder_id}'

async def get_chat_name_by_id(client, chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ –µ–≥–æ ID"""
    try:
        chat = await client.get_entity(chat_id)
        if hasattr(chat, 'title') and chat.title:
            return chat.title
        elif hasattr(chat, 'username') and chat.username:
            return f"@{chat.username}"
        elif hasattr(chat, 'first_name') and chat.first_name:
            return chat.first_name
        else:
            return f'Chat_{chat_id}'
    except Exception:
        return f'Chat_{chat_id}'
def calculate_text_length_with_buttons(text: str) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–Ω–æ–ø–æ–∫ START –∏ –í–µ—Ä–Ω—É—Ç—å—Å—è"""
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–Ω–æ–ø–æ–∫ (START + –í–µ—Ä–Ω—É—Ç—å—Å—è + —Ä–∞–∑–º–µ—Ç–∫–∞)
    buttons_length = len("START") + len("–í–µ—Ä–Ω—É—Ç—å—Å—è") + 50  # +50 –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return len(text) + buttons_length

def truncate_chat_names_dynamically(chat_names: list, max_total_length: int, current_text_length: int) -> list:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –¥–ª—è —É–º–µ—â–µ–Ω–∏—è –≤ –ª–∏–º–∏—Ç"""
    if not chat_names:
        return chat_names
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —á–∞—Ç–æ–≤
    available_length = max_total_length - current_text_length
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ —É–∂–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, —Å–æ–∫—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ –º–∏–Ω–∏–º—É–º–∞
    if current_text_length >= max_total_length:
        return [name[:10] + "..." if len(name) > 10 else name for name in chat_names]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É –≤—Å–µ—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —á–∞—Ç–æ–≤
    current_chat_names_length = sum(len(name) for name in chat_names)
    
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ —É–∂–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if current_chat_names_length <= available_length:
        return chat_names
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    truncation_ratio = available_length / current_chat_names_length
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    truncated_names = []
    for name in chat_names:
        target_length = int(len(name) * truncation_ratio)
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 10 —Å–∏–º–≤–æ–ª–æ–≤
        target_length = max(10, target_length)
        if len(name) > target_length:
            truncated_names.append(name[:target_length-3] + "...")
        else:
            truncated_names.append(name)
    
    return truncated_names

async def generate_final_settings_text(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if user_id not in mailing_states:
        return "–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    
    state = mailing_states[user_id]
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ mailing_parameters.json (–ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤)
    try:
        persisted = load_mailing_parameters(user_id)
        mp = persisted.get("mailing_parameters", {}) if isinstance(persisted, dict) else {}
        if mp:
            # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤
            keys_to_restore = [
                "template_mode",
                "template_index",
                "template_type",
                "alternate_templates",
                "account_templates",
                "selected_folder",
                "folder_set",
                "account_folders",
                "ignore_folders",
                "ignore_chats",
                "logging_enabled",
                "selected_accounts",
            ]
            for k in keys_to_restore:
                # –ñ—ë—Å—Ç–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–æ–ª—è —Å persisted, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                if k in mp:
                    persisted_value = mp.get(k)
                    if persisted_value not in (None, {}, []):
                        state[k] = persisted_value
    except Exception:
        pass
    text_parts = [
        "üìå     üìå     üìå     üìå     üìå     üìå     üìå",
        "",
        "          üßæ –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "",
        ""
    ]
    
    # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    selected_accounts = state.get("selected_accounts", [])
    if selected_accounts:
        text_parts.append("-–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        accounts = load_user_accounts(user_id)
        for phone in selected_accounts:
            account = next((acc for acc in accounts if acc.get('phone') == phone), None)
            nickname = (account.get('username') or account.get('name') or account.get('phone')) if account else phone
            nickname_display = f"@{str(nickname).lstrip('@')}"
            text_parts.append(nickname_display)
        text_parts.append("")
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    text_parts.append("-–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    template_mode = state.get("template_mode")
    if template_mode == "custom":
        text_parts.append("–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    elif template_mode == "select":
        text_parts.append("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    else:
        text_parts.append("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    text_parts.append("")
    
    # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
    text_parts.append("-–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤:")
    alternate_templates = state.get("alternate_templates", True)
    text_parts.append("–î–∞" if alternate_templates else "–ù–µ—Ç")
    text_parts.append("")
    
    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_templates = state.get("account_templates", {})
    if account_templates:
        # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        text_parts.append("-–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        accounts = load_user_accounts(user_id)
        for phone in selected_accounts:
            account = next((acc for acc in accounts if acc.get('phone') == phone), None)
            if account:
                nickname = account.get('username') or account.get('name') or account.get('phone')
                template_choice = account_templates.get(phone)
                nickname_display = f"@{str(nickname).lstrip('@')}"
                if isinstance(template_choice, str) and template_choice.startswith("IDX_"):
                    try:
                        num = int(template_choice.replace('IDX_', '')) + 1
                    except ValueError:
                        num = 1
                    text_parts.append(f"{nickname_display}: –®–∞–±–ª–æ–Ω #{num}")
                else:
                    text_parts.append(f"{nickname_display}: {template_choice or '–®–∞–±–ª–æ–Ω #1'}")
        text_parts.append("")
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —à–∞–±–ª–æ–Ω–∞
        # –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º, –æ–±–æ—Ä–∞—á–∏–≤–∞—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–±–ª–æ–Ω–æ–≤ –ö–ê–ñ–î–û–ì–û –∞–∫–∫–∞—É–Ω—Ç–∞
        base_template_index = state.get("template_index")
        if base_template_index is None:
            base_template_index = 0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω
        text_parts.append("-–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        accounts = load_user_accounts(user_id)
        for idx, phone in enumerate(selected_accounts):
            account = next((acc for acc in accounts if acc.get('phone') == phone), None)
            if not account:
                continue
            nickname = account.get('username') or account.get('name') or account.get('phone')
            nickname_display = f"@{str(nickname).lstrip('@')}"
            try:
                template_list = get_templates_for_account(account)
                count_templates = max(1, len(template_list))
            except Exception:
                count_templates = 1
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ = base + idx; –ª–æ–∫–∞–ª—å–Ω–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–±–ª–æ–Ω–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
            template_num = ((base_template_index + idx) % count_templates) + 1
            text_parts.append(f"{nickname_display}: –®–∞–±–ª–æ–Ω #{template_num}")
        text_parts.append("")
    
    # –ü–∞–ø–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_folders = state.get("account_folders", {})
    if account_folders:
        # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
        text_parts.append("-–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞:")
        accounts = load_user_accounts(user_id)
        for phone in selected_accounts:
            account = next((acc for acc in accounts if acc.get('phone') == phone), None)
            if account:
                nickname = account.get('username') or account.get('name') or account.get('phone')
                folder_choice = account_folders.get(phone, "F1")
                nickname_display = f"@{str(nickname).lstrip('@')}"
                # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ IDX_n –∫–∞–∫ F{n+1}
                if isinstance(folder_choice, str) and folder_choice.startswith("IDX_"):
                    try:
                        n = int(folder_choice.replace("IDX_", ""))
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                        title_map = state.get("account_folder_titles", {})
                        folder_choice_display = title_map.get(phone)
                        if not folder_choice_display:
                            folder_choice_display = f"F{n+1}"
                    except ValueError:
                        folder_choice_display = "F1"
                else:
                    folder_choice_display = folder_choice
                text_parts.append(f"{nickname_display}: {folder_choice_display}")
        text_parts.append("")
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–¥—É—é—â–∏–µ—Å—è –ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        folder_set = state.get("folder_set")
        if folder_set:
            text_parts.append("-–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞:")
            accounts_all = load_user_accounts(user_id)
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫ —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            folder_titles = []
            try:
                base_phone = selected_accounts[0] if selected_accounts else None
                base_account = next((acc for acc in accounts_all if acc.get('phone') == base_phone), None) if base_phone else None
                if base_account:
                    license_type = detect_license_type(user_id)
                    user_dir = get_user_dir(user_id, license_type)
                    config_path = os.path.join(user_dir, "config.json")
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                    api_id = config.get("api_id")
                    api_hash = config.get("api_hash")
                    session_name = base_account.get("name") or base_account.get("phone")
                    client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                    folders_map = await list_folders(client) if client else {}
                    # folders_map: {1: {id, title}, 2: {...}, ...}
                    if folders_map:
                        # –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Ä—è–¥–æ–∫
                        for i in range(1, len(folders_map) + 1):
                            title = folders_map.get(i, {}).get('title')
                            if title:
                                folder_titles.append(title)
            except Exception:
                folder_titles = []

            for idx, phone in enumerate(selected_accounts):
                account = next((acc for acc in accounts_all if acc.get('phone') == phone), None)
                if account:
                    nickname = account.get('username') or account.get('name') or account.get('phone')
                    nickname_display = f"@{str(nickname).lstrip('@')}"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±–æ—Ä—É F1-F5
                    folder_offset = int(folder_set[1]) - 1  # F1=0, F2=1, F3=2, F4=3, F5=4
                    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    folder_index = idx + folder_offset
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏
                    if folder_titles:
                        real_title = folder_titles[folder_index % len(folder_titles)]
                        text_parts.append(f"{nickname_display}: {real_title}")
                    else:
                        text_parts.append(f"{nickname_display}: F{(folder_index % 5) + 1}")
            text_parts.append("")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é
            selected_folder = state.get("selected_folder")
            if selected_folder:
                text_parts.append("-–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞:")
                accounts = load_user_accounts(user_id)
                phone = selected_accounts[0] if selected_accounts else None
                account = next((acc for acc in accounts if acc.get('phone') == phone), None) if phone else None
                nickname = (account.get('username') or account.get('name') or account.get('phone')) if account else ""
                nickname_display = f"@{str(nickname).lstrip('@')}" if nickname else ""
                text_parts.append(f"{nickname_display}: F{selected_folder}")
                text_parts.append("")
            else:
                # –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –Ω–∏ folder_set, –Ω–∏ selected_folder –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º folder_set_idx –∏–ª–∏ F1
                base_index = state.get("folder_set_idx") if isinstance(state.get("folder_set_idx"), int) else 0
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
                accounts_all = load_user_accounts(user_id)
                folder_titles = []
                try:
                    base_phone = selected_accounts[0] if selected_accounts else None
                    base_account = next((acc for acc in accounts_all if acc.get('phone') == base_phone), None) if base_phone else None
                    if base_account:
                        license_type = detect_license_type(user_id)
                        user_dir = get_user_dir(user_id, license_type)
                        config_path = os.path.join(user_dir, "config.json")
                        with open(config_path, "r", encoding="utf-8") as f:
                            config = json.load(f)
                        api_id = config.get("api_id")
                        api_hash = config.get("api_hash")
                        session_name = base_account.get("name") or base_account.get("phone")
                        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                        folders_map = await list_folders(client) if client else {}
                        if folders_map:
                            for i in range(1, len(folders_map) + 1):
                                title = folders_map.get(i, {}).get('title')
                                if title:
                                    folder_titles.append(title)
                except Exception:
                    folder_titles = []
                text_parts.append("-–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞:")
                accounts = accounts_all
                for idx, phone in enumerate(selected_accounts):
                    account = next((acc for acc in accounts if acc.get('phone') == phone), None)
                    if account:
                        nickname = account.get('username') or account.get('name') or account.get('phone')
                        nickname_display = f"@{str(nickname).lstrip('@')}"
                        folder_index = base_index + idx
                        if folder_titles:
                            real_title = folder_titles[folder_index % len(folder_titles)]
                            text_parts.append(f"{nickname_display}: {real_title}")
                        else:
                            text_parts.append(f"{nickname_display}: F{folder_index + 1}")
                text_parts.append("")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    logging_enabled = state.get("logging_enabled", True)
    text_parts.append("-–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π:")
    text_parts.append("–î–∞" if logging_enabled else "–ù–µ—Ç")
    text_parts.append("")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ø–∞–ø–∫–∞—Ö
    ignore_folders = state.get("ignore_folders", {})
    has_ignore_folders = False
    if ignore_folders:
        for account_phone, folder_ids in ignore_folders.items():
            if folder_ids:
                has_ignore_folders = True
                break
    
    text_parts.append("-–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –ø–∞–ø–∫–∞—Ö:")
    if has_ignore_folders:
        for account_phone, folder_ids in ignore_folders.items():
            if folder_ids:
                accounts = load_user_accounts(user_id)
                account = next((acc for acc in accounts if acc.get('phone') == account_phone), None)
                if account:
                    nickname = (f"@{account['username']}" if account.get('username') else (account.get('name') or account.get('phone')))
                    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                    license_type = detect_license_type(user_id)
                    user_dir = get_user_dir(user_id, license_type)
                    config_path = os.path.join(user_dir, "config.json")
                    folder_names = []
                    try:
                        with open(config_path, "r", encoding="utf-8") as f:
                            config = json.load(f)
                        api_id = config.get("api_id")
                        api_hash = config.get("api_hash")
                        session_name = account.get('name') or account.get('phone')
                        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                        
                        if client:
                            for folder_id in folder_ids:
                                folder_name = await get_folder_name_by_id(client, folder_id)
                                folder_names.append(folder_name)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                            for folder_id in folder_ids:
                                folder_names.append(f"Folder_{folder_id}")
                    except Exception:
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                        for folder_id in folder_ids:
                            folder_names.append(f"Folder_{folder_id}")
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                    folder_list = ", ".join(folder_names)
                    text_parts.append(f"{nickname}: {folder_list}")
    else:
        text_parts.append("–ù–µ—Ç")
    text_parts.append("")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —á–∞—Ç–∞—Ö
    ignore_chats = state.get("ignore_chats", {})
    has_ignore_chats = False
    if ignore_chats:
        for account_phone, folders in ignore_chats.items():
            for folder_id, chat_ids in folders.items():
                if chat_ids:
                    has_ignore_chats = True
                    break
            if has_ignore_chats:
                break
    
    text_parts.append("-–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —á–∞—Ç–∞—Ö:")
    if has_ignore_chats:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        all_chat_names = []
        account_chat_mapping = {}  # {nickname: [chat_names]}
        
        for account_phone, folders in ignore_chats.items():
            accounts = load_user_accounts(user_id)
            account = next((acc for acc in accounts if acc.get('phone') == account_phone), None)
            if account:
                nickname = (f"@{account['username']}" if account.get('username') else (account.get('name') or account.get('phone')))
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                license_type = detect_license_type(user_id)
                user_dir = get_user_dir(user_id, license_type)
                config_path = os.path.join(user_dir, "config.json")
                chat_names = []
                try:
                    with open(config_path, "r", encoding="utf-8") as f:
                        config = json.load(f)
                    api_id = config.get("api_id")
                    api_hash = config.get("api_hash")
                    session_name = account.get('name') or account.get('phone')
                    client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
                    
                    if client:
                        for folder_id, chat_ids in folders.items():
                            if chat_ids:
                                for chat_id in chat_ids:
                                    chat_name = await get_chat_name_by_id(client, chat_id)
                                    chat_names.append(chat_name)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                        for folder_id, chat_ids in folders.items():
                            if chat_ids:
                                for chat_id in chat_ids:
                                    chat_names.append(f"Chat_{chat_id}")
                except Exception:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                    for folder_id, chat_ids in folders.items():
                        if chat_ids:
                            for chat_id in chat_ids:
                                chat_names.append(f"Chat_{chat_id}")
                
                if chat_names:
                    account_chat_mapping[nickname] = chat_names
                    all_chat_names.extend(chat_names)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        current_text = "\n".join(text_parts)
        current_length = calculate_text_length_with_buttons(current_text)
        
        # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ
        MAX_LENGTH = 4096
        if current_length > MAX_LENGTH:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            truncated_chat_names = truncate_chat_names_dynamically(all_chat_names, MAX_LENGTH, current_length)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            truncated_index = 0
            for nickname, original_chat_names in account_chat_mapping.items():
                truncated_for_account = truncated_chat_names[truncated_index:truncated_index + len(original_chat_names)]
                truncated_index += len(original_chat_names)
                
                text_parts.append(f"{nickname}:")
                for chat_name in truncated_for_account:
                    text_parts.append(chat_name)
        else:
            # –ï—Å–ª–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –±–∞–∑–æ–≤—ã–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º
            for nickname, chat_names in account_chat_mapping.items():
                text_parts.append(f"{nickname}:")
                for chat_name in chat_names:
                    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
                    if isinstance(chat_name, str) and len(chat_name) > 20:
                        chat_name_display = chat_name[:20] + "..."
                    else:
                        chat_name_display = chat_name
                    text_parts.append(chat_name_display)
    else:
        text_parts.append("–ù–µ—Ç")
    text_parts.append("")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–µ–ø–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Å–∫—Ä–µ–ø–∫–∞–º–∏
    if len(text_parts) > 0 and text_parts[-1] != "":
        text_parts.append("")
    text_parts.append("üìå     üìå     üìå     üìå     üìå     üìå     üìå")
    
    return "\n".join(text_parts)


def generate_summary_text(user_id=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        state = load_resume_state(user_id=user_id)
        if not state or "accounts" not in state:
            return "–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω."
        now = int(time.time())
        # –ü–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É phone -> username –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ username –≤ resume_state
        phone_to_username = {}
        try:
            cfg = load_config(user_id)
            for acc_cfg in (cfg.get('accounts') or []):
                phone_val = acc_cfg.get('phone')
                uname_val = acc_cfg.get('username')
                if phone_val and uname_val:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –±–µ–∑ '@'
                    phone_to_username[phone_val] = uname_val[1:] if isinstance(uname_val, str) and uname_val.startswith('@') else uname_val
        except Exception:
            pass
        def _name_as_username(acc):
            uname = acc.get('username')
            if not uname and acc.get('phone') in phone_to_username:
                uname = phone_to_username.get(acc.get('phone'))
            if isinstance(uname, str) and uname.strip():
                uname = uname[1:] if uname.startswith('@') else uname
                return f"@{uname}"
            # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ë–ï–ó '@'
            phone = acc.get('phone', '') or ''
            return phone
        limits_list = [
            f"{_name_as_username(acc)} - {acc.get('message_count', 0)}/30"
            for acc in state["accounts"]
            if (not acc.get("break_until_timestamp")) and acc.get("message_count", 0) < 30
        ]
        breaks_list = [
            f"{_name_as_username(acc)} - {(acc['break_until_timestamp'] - now) // 3600:02d} {(acc['break_until_timestamp'] - now) % 3600 // 60:02d} {(acc['break_until_timestamp'] - now) % 60:02d}"
            for acc in state["accounts"]
            if acc.get("break_until_timestamp") and acc["break_until_timestamp"] > now
        ]
        summary_parts = []
        if limits_list and breaks_list:
            summary_parts.append("LIMITS:")
            summary_parts.append("")
            summary_parts.extend(limits_list)
            summary_parts.append("")
            summary_parts.append("")
            summary_parts.append("")
            summary_parts.append("BREAKS:")
            summary_parts.append("")
            summary_parts.extend(breaks_list)
        elif limits_list:
            summary_parts.append("LIMITS:")
            summary_parts.append("")
            summary_parts.extend(limits_list)
        elif breaks_list:
            summary_parts.append("BREAKS:")
            summary_parts.append("")
            summary_parts.extend(breaks_list)
        else:
            return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏."
        return "\n".join(summary_parts)
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}"

    
# –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –ø–∞—É–∑
def print_timers(timers_dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""




# –í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
async def countdown_timer(seconds, nickname, timers, selected_account=None, user_id=None, break_started_ts=None):
    """–¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞"""
    try:
        original_seconds = seconds  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
        if isinstance(break_started_ts, int) and break_started_ts > 0:
            start_time = break_started_ts
        else:
            start_time = int(asyncio.get_event_loop().time())
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ç–æ—á–∫—É –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–º —á–∞—Å–∞–º
        # –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —á–∞—Å—ã
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–≥–æ –∫–∞–∂–¥—ã–π —á–∞—Å (3600+ —Å–µ–∫—É–Ω–¥), –∞ –Ω–µ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ elapsed_hours
        current_time = int(asyncio.get_event_loop().time())
        elapsed_time = current_time - start_time
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_hour_logged –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥ –ø—Ä–∏—à–µ–ª —á–µ—Ä–µ–∑ —á–∞—Å
        last_hour_logged = (elapsed_time // 3600) - 1
        
        while seconds:
            mins, secs = divmod(seconds, 60)
            hours, mins = divmod(mins, 60)
            timer = f"{hours:02d}:{mins:02d}:{secs:02d}"
            timers[nickname] = timer  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            # –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
            # print_timers(timers)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
            
            # --- –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π —á–∞—Å –≤ Telegram ---
            current_time = int(asyncio.get_event_loop().time())
            elapsed_time = current_time - start_time
            elapsed_hours = elapsed_time // 3600
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à—ë–ª –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π —á–∞—Å (3600+ —Å–µ–∫—É–Ω–¥) —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞
            if user_id and elapsed_time >= 3600 and elapsed_hours > last_hour_logged:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                hh = f"{int(hours):02d}"
                mm = f"{int(mins):02d}"
                ss = f"{int(secs):02d}"
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                display_name = get_display_name(selected_account) if selected_account else nickname
                message = f"{display_name}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {hh}:{mm}:{ss} üü°"
                
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                await log_to_telegram(user_id, message, "mailing")
                
                last_hour_logged = elapsed_hours
            
            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É ---
            if selected_account:
                update_account_resume_state(
                    selected_account['phone'],
                    break_seconds_left=seconds,
                    break_started_ts=start_time,
                    user_id=user_id
                )
            await asyncio.sleep(1)
            seconds -= 1
        timers.pop(nickname, None)  # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        # –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
        # print_timers(timers)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
        # --- –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—á–∏—â–∞–µ–º –ø–æ–ª—è ---
        if selected_account:
            update_account_resume_state(
                selected_account['phone'],
                break_seconds_left=0,
                break_until_timestamp=0,
                user_id=user_id
            )
    except asyncio.CancelledError:
        # –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°—Ç–æ–ø)
        print(f"üõë –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ—Ä—ã–≤–∞ –¥–ª—è {nickname} –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        timers.pop(nickname, None)  # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        if selected_account:
            update_account_resume_state(
                selected_account['phone'],
                break_seconds_left=0,
                break_until_timestamp=0,
                user_id=user_id
            )
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ


        
async def select_accounts(available_accounts):
    accounts_with_nicknames = await get_active_sessions_with_nicknames(available_accounts)
    while True:
        print_separator()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç(—ã):")
        for i, acc in enumerate(available_accounts, 1):
            nickname = acc.get('nickname', '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ')
            print(print_in_white(f"{i}. {nickname}"))
        print("0. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã: ").strip()
        if choice == "0" or choice.lower() == "exit":
            return []

        try:
            selected_indices = []
            for part in choice.split(","):
                part = part.strip()
                if "-" in part:  # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω
                    start, end = map(int, part.split("-"))
                    if start > end:
                        print("–ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ü–∞.")
                        break
                    selected_indices.extend(range(start, end + 1))
                else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —á–∏—Å–ª–æ
                    selected_indices.append(int(part))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            if all(1 <= idx <= len(available_accounts) for idx in selected_indices):
                return [available_accounts[idx - 1] for idx in selected_indices]
            else:
                print("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ–≤–µ—Ä–Ω—ã.")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏, –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.")


async def select_template(selected_account):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    while True:
        print(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account['nickname']}:")
        print("1. Ru")
        print("2. Eng")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: ").strip()
        if choice == "1":
            return selected_account["template1"]
        if choice == "2":
            return selected_account["template2"]
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")

async def list_folders(client):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –ø–∞–ø–æ–∫"""
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
    if not client.is_connected() or not await client.is_user_authorized():
        print("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        try:
            if client.is_connected():
                await client.disconnect()
            await asyncio.sleep(5)
            await client.connect()
            
            if not await client.is_user_authorized():
                print(print_in_red("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram. –û–∂–∏–¥–∞–Ω–∏–µ..."))
                await asyncio.sleep(10)
                return {}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –û–∂–∏–¥–∞–Ω–∏–µ...")
            await asyncio.sleep(10)
            return {}
    # --- –ö–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ---
    try:
        result = await client(functions.messages.GetDialogFiltersRequest())
        folders = result.filters
    except Exception as e:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã UI –ø–æ–∫–∞–∑–∞–ª –ø–æ–Ω—è—Ç–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
        return {}

    folder_dict = {}
    valid_folders = []

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–≤–æ–¥—è title –∫ —Å—Ç—Ä–æ–∫–µ
    for folder in folders:
        raw_title = getattr(folder, 'title', None)
        title_str = ""
        if isinstance(raw_title, str):
            title_str = raw_title.strip()
        elif hasattr(raw_title, 'text'):
            # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ title –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º text
            title_str = getattr(raw_title, 'text', '')
            title_str = title_str.strip() if isinstance(title_str, str) else ''
        elif raw_title is not None:
            title_str = str(raw_title).strip()

        if title_str:
            folder_id = getattr(folder, 'id', 'default')
            valid_folders.append((folder_id, title_str))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–µ—Ä–Ω—É–ª API (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    for idx, (fid, title) in enumerate(valid_folders, 1):
        folder_dict[idx] = { 'id': fid, 'title': title }

    return folder_dict

async def get_active_sessions_with_nicknames(accounts):
    for account in accounts:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ name –¥–ª—è –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
        session_name = account.get('name') or account.get('phone')
        session_file = os.path.join(sessions_dir, f"{session_name}.session")
        if os.path.exists(session_file):
            client = TelegramClient(session_file, account['api_id'], account['api_hash'])
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
            if not client.is_connected() or not await client.is_user_authorized():
                try:
                    if client.is_connected():
                        await client.disconnect()
                    await asyncio.sleep(5)
                    await client.connect()
                    
                    if not await client.is_user_authorized():
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç {session_name}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                        continue
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {session_name}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue
            # --- –ö–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ---
            await client.connect()
            if await client.is_user_authorized():
                me = await client.get_me()
                account['nickname'] = (f"@{me.username}" if getattr(me, 'username', None) else (me.first_name or me.phone))
                account['last_login'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            await client.disconnect()
    return accounts
async def authenticate_client(selected_account):
    api_id = selected_account["api_id"]
    api_hash = selected_account["api_hash"]
    phone = selected_account["phone"]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ name –¥–ª—è –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
    session_name = selected_account.get('name') or selected_account.get('phone')
    session_file = os.path.join(sessions_dir, f"{session_name}.session")
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    client = TelegramClient(
        session_file, 
        api_id, 
        api_hash,
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        connection_retries=3,
        retry_delay=1,
        timeout=30,
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        auto_reconnect=False
    )

    max_attempts = 3
    attempt = 0
    
    while attempt < max_attempts:
        try:
            await client.connect()
            if not await client.is_user_authorized():
                try:
                    await client.send_code_request(phone)
                    code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
                    await client.sign_in(phone, code)
                    me = await client.get_me()
                    selected_account['nickname'] = (f"@{me.username}" if getattr(me, 'username', None) else (me.first_name or me.phone))
                    selected_account['last_login'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                except SessionPasswordNeededError:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA
                    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ").strip()
                    try:
                        await client.sign_in(password=password)
                        me = await client.get_me()
                        selected_account['nickname'] = (f"@{me.username}" if getattr(me, 'username', None) else (me.first_name or me.phone))
                        selected_account['last_login'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    except PasswordHashInvalidError:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å 2FA –¥–ª—è {phone}")
                        await client.disconnect()
                        return None
                except AuthRestartError:
                    print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone}")
                    await client.disconnect()
                    await asyncio.sleep(2)
                    attempt += 1
                    continue
                except Exception as e:
                    error_msg = str(e).lower()
                    if "api_id/api_hash combination is invalid" in error_msg:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API –¥–∞–Ω–Ω—ã–µ –¥–ª—è {phone}")
                    elif "auth_key" in error_msg or "nonce" in error_msg:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ auth_key - –æ–Ω–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                        print(f"‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone}, –ø–æ–≤—Ç–æ—Ä...")
                        await asyncio.sleep(2)
                        attempt += 1
                        continue
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone}: {e}")
                    
                    await client.disconnect()
                    await asyncio.sleep(2)
                    attempt += 1
                    continue
            else:
                me = await client.get_me()
                selected_account['nickname'] = (f"@{me.username}" if getattr(me, 'username', None) else (me.first_name or me.phone))
                selected_account['last_login'] = datetime.now().strftime("%Y-%–º-%–¥ %H:%M:%S")
            return client
        except OSError as e:
            if "Cannot allocate memory" in str(e):
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è {phone}: {e}")
                return None
            else:
                print(f"‚ö†Ô∏è  –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {phone}: {e}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(2)
                attempt += 1
                
        except Exception as e:
            error_msg = str(e).lower()
            if "auth_key" in error_msg or "nonce" in error_msg:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ auth_key
                print(f"‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–ª—é—á–∞ –¥–ª—è {phone}, –ø–æ–≤—Ç–æ—Ä...")
                await asyncio.sleep(2)
                attempt += 1
                continue
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {phone}: {e}")
                await asyncio.sleep(2)
                attempt += 1
    
    # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å {phone} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return None






async def select_folder(folder_dict):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
    while True:
        for idx, folder in folder_dict.items():
            print(f"{idx}. {folder['title']}")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏: ").strip()
        try:
            choice = int(choice)
            if 1 <= choice <= len(folder_dict):
                return folder_dict[choice]
            else:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏: {choice}")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def get_chats_in_folder(client, folder_id, logging_enabled=True):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ"""
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
    if not client.is_connected() or not await client.is_user_authorized():
        print("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        try:
            if client.is_connected():
                await client.disconnect()
            await asyncio.sleep(5)
            await client.connect()
            
            if not await client.is_user_authorized():
                print(print_in_red("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram. –û–∂–∏–¥–∞–Ω–∏–µ..."))
                await asyncio.sleep(10)
                return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –û–∂–∏–¥–∞–Ω–∏–µ...")
            await asyncio.sleep(10)
            return []
    # --- –ö–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ---
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —á–∞—Ç–æ–≤
    await client.get_dialogs()

    result = await client(functions.messages.GetDialogFiltersRequest())
    folders = result.filters
    peer_ids = []

    for folder in folders:
        if isinstance(folder, DialogFilter) and folder.id == folder_id:
            for peer in folder.include_peers:
                if hasattr(peer, 'chat_id'):
                    peer_ids.append(peer.chat_id)
                elif hasattr(peer, 'channel_id'):
                    peer_ids.append(peer.channel_id)
                elif hasattr(peer, 'user_id'):
                    peer_ids.append(peer.user_id)

    chats = []
    if peer_ids:
        for peer_id in peer_ids:
            try:
                await client.get_input_entity(peer_id)
                chat = await client.get_entity(peer_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
                chats.append(chat)
            except Exception as e:
                if logging_enabled:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —Å ID {peer_id}: {e}")
    return chats

def save_ignore_settings(user_id, ignore_folders=None, ignore_chats=None, filename=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ resume_process.json"""
    if filename is None:
        user_dir = get_user_dir(user_id, detect_license_type(user_id))
        filename = os.path.join(user_dir, "resume_process.json")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception:
            data = {}
    else:
        data = {}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    if ignore_folders is not None:
        data["ignore_folders"] = ignore_folders
    if ignore_chats is not None:
        data["ignore_chats"] = ignore_chats
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_ignore_settings(user_id, filename=None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ resume_process.json"""
    if filename is None:
        user_dir = get_user_dir(user_id, detect_license_type(user_id))
        filename = os.path.join(user_dir, "resume_process.json")
    
    if not os.path.exists(filename):
        return {"ignore_folders": {}, "ignore_chats": {}}
    
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
            return {
                "ignore_folders": data.get("ignore_folders", {}),
                "ignore_chats": data.get("ignore_chats", {})
            }
    except Exception:
        return {"ignore_folders": {}, "ignore_chats": {}}

def filter_folders_by_ignore(folders, ignore_folders, account_phone):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞–ø–æ–∫ —Å —É—á–µ—Ç–æ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö"""
    if not ignore_folders or account_phone not in ignore_folders:
        return folders
    
    ignored_folder_ids = ignore_folders[account_phone]
    filtered_folders = {}
    
    for idx, folder in folders.items():
        if folder['id'] not in ignored_folder_ids:
            filtered_folders[idx] = folder
    
    return filtered_folders

def filter_chats_by_ignore(chats, ignore_chats, account_phone, folder_id):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö"""
    if not ignore_chats or account_phone not in ignore_chats:
        return chats
    
    account_ignore_chats = ignore_chats[account_phone]
    if str(folder_id) not in account_ignore_chats:
        return chats
    
    ignored_chat_ids = account_ignore_chats[str(folder_id)]
    filtered_chats = []
    
    for chat in chats:
        if chat.id not in ignored_chat_ids:
            filtered_chats.append(chat)
    
    return filtered_chats

def _shorten(text: str, max_len: int = 250) -> str:
    if not isinstance(text, str):
        text = str(text)
    if max_len <= 3:
        return text[:max_len]
    return text if len(text) <= max_len else (text[: max_len - 1] + "‚Ä¶")

async def show_folder_selection_for_account(call, user_id, account_phone):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        accounts = load_user_accounts(user_id)
        account = None
        for acc in accounts:
            if acc.get('phone') == account_phone:
                account = acc
                break
        
        if not account:
            await call.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        session_name = account.get('name') or account.get('phone')
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        
        if not client:
            await call.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {session_name}.", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
        folders = await list_folders(client)
        if not folders:
            try:
                await call.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è {session_name}.", show_alert=True)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
                pass
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        state = mailing_states.get(user_id, {})
        ignore_folders = state.get("ignore_folders", {})
        account_ignore_folders = ignore_folders.get(account_phone, [])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for folder in folders.values():
            mark = " ‚úÖ" if folder['id'] in account_ignore_folders else ""
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=f"{folder['title']}{mark}", 
                callback_data=f"ignore_folder_{account_phone}_{folder['id']}"
            )])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç—ã—à–µ–∫
        try:
            _st = mailing_states.get(user_id, {})
            _idx = int(_st.get("current_account_index", 0))
        except Exception:
            _idx = 0
        
        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        nav_row = []
        if _idx > 0:
            nav_row.append(InlineKeyboardButton(text="–ü—Ä–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨áÔ∏è", callback_data=f"back_to_prev_folder_account_{account_phone}"))
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π
        next_text = "–°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è" if _idx == 0 else "–°–ª–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è"
        nav_row.append(InlineKeyboardButton(text=next_text, callback_data=f"next_folder_account_{account_phone}"))
        
        if nav_row:
            markup.inline_keyboard.append(nav_row)
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="to_ignore_chats_question")])
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —É—Ä–æ–≤–Ω—é (–≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –∏–≥–Ω–æ—Ä –ø–∞–ø–æ–∫)
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")])
        
        await delete_and_send_image(
            call.message,
            "mailing.png",
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {(('@' + account['username']) if account.get('username') else session_name)}:",
            reply_markup=markup,
            user_id=user_id
        )
        
    except Exception as e:
        try:
            await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
            pass
async def update_folder_selection_keyboard(call, user_id, account_phone):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏"""
    try:
        print(f"üîß DEBUG: update_folder_selection_keyboard –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, account_phone={account_phone}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        accounts = load_user_accounts(user_id)
        account = None
        for acc in accounts:
            if acc.get('phone') == account_phone:
                account = acc
                break
        
        if not account:
            print(f"‚ùå DEBUG: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {account_phone}")
            return
        
        print(f"‚úÖ DEBUG: –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω: {account.get('name')}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        session_name = account.get('name') or account.get('phone')
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        
        if not client:
            print(f"‚ùå DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è {session_name}")
            return
        
        print(f"‚úÖ DEBUG: –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {session_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
        folders = await list_folders(client)
        if not folders:
            print(f"‚ùå DEBUG: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è {session_name}")
            return
        
        print(f"‚úÖ DEBUG: –ü–æ–ª—É—á–µ–Ω–æ {len(folders)} –ø–∞–ø–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        state = mailing_states.get(user_id, {})
        ignore_folders = state.get("ignore_folders", {})
        account_ignore_folders = ignore_folders.get(account_phone, [])
        
        print(f"üîß DEBUG: –¢–µ–∫—É—â–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è {account_phone}: {account_ignore_folders}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for folder in folders.values():
            mark = " ‚úÖ" if folder['id'] in account_ignore_folders else ""
            print(f"üîß DEBUG: –ü–∞–ø–∫–∞ {folder['title']} (ID: {folder['id']}): {'‚úÖ' if folder['id'] in account_ignore_folders else '‚ùå'}")
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=f"{folder['title']}{mark}", 
                callback_data=f"ignore_folder_{account_phone}_{folder['id']}"
            )])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç—ã—à–µ–∫
        try:
            _st = mailing_states.get(user_id, {})
            _idx = int(_st.get("current_account_index", 0))
        except Exception:
            _idx = 0
        
        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        nav_row = []
        if _idx > 0:
            nav_row.append(InlineKeyboardButton(text="–ü—Ä–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨áÔ∏è", callback_data=f"back_to_prev_folder_account_{account_phone}"))
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π
        next_text = "–°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è" if _idx == 0 else "–°–ª–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è"
        nav_row.append(InlineKeyboardButton(text=next_text, callback_data=f"next_folder_account_{account_phone}"))
        
        if nav_row:
            markup.inline_keyboard.append(nav_row)
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="to_ignore_chats_question")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_folders_back")])
        
        print(f"üîß DEBUG: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(markup.inline_keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await call.message.edit_reply_markup(reply_markup=markup)
            print(f"‚úÖ DEBUG: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–ø–æ–∫: {e}")
        import traceback
        traceback.print_exc()

async def update_chat_selection_keyboard(call, user_id, account_phone, folder_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        accounts = load_user_accounts(user_id)
        account = None
        for acc in accounts:
            if acc.get('phone') == account_phone:
                account = acc
                break
        
        if not account:
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        session_name = account.get('name') or account.get('phone')
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        
        if not client:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –≤ –ø–∞–ø–∫–µ
        chats = await get_chats_in_folder(client, folder_id)
        if not chats:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        state = mailing_states.get(user_id, {})
        ignore_chats = state.get("ignore_chats", {})
        account_ignore_chats = ignore_chats.get(account_phone, {})
        folder_ignore_chats = account_ignore_chats.get(str(folder_id), [])
        chat_pages = state.get("chat_pages", {})
        account_pages = chat_pages.get(account_phone, {})
        current_page = int(account_pages.get(str(folder_id), 0))
        page_size = 20
        start_index = current_page * page_size
        end_index = start_index + page_size
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
        try:
            _idx = int(state.get("current_account_index", 0))
        except Exception:
            _idx = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[]) 
        visible_chats = chats[start_index:end_index]
        for i, chat in enumerate(visible_chats, start=start_index + 1):  # –°–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
            chat_title = getattr(chat, 'title', None) or getattr(chat, 'username', None) or str(chat.id)
            chat_title = _shorten(chat_title, 22)
            mark = " ‚úÖ" if chat.id in folder_ignore_chats else ""
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=f"{i}. {chat_title}{mark}", 
                callback_data=f"ignore_chat_{account_phone}_{folder_id}_{chat.id}"
            )])
        
        nav_row = []
        if current_page > 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            prev_text = "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è" if end_index >= len(chats) else "–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è"
            nav_row.append(InlineKeyboardButton(text=prev_text, callback_data=f"more_chats_{account_phone}_{folder_id}_{current_page - 1}"))
        else:
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏
            nav_row.append(InlineKeyboardButton(
                text="–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è",
                callback_data=f"back_to_chat_folders_{account_phone}"
            ))
        if end_index < len(chats):
            # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 1 –≤—Å–µ–≥–¥–∞ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–∞–ª–µ–µ ‚Äî –ø–æ –ø—Ä–µ–∂–Ω–µ–π –ª–æ–≥–∏–∫–µ
            next_page_text = "–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è" if current_page == 0 else ("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è" if _idx == 0 else "–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è")
            nav_row.append(InlineKeyboardButton(text=next_page_text, callback_data=f"more_chats_{account_phone}_{folder_id}_{current_page + 1}"))
        if nav_row:
            markup.inline_keyboard.append(nav_row)
        
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data=f"next_chat_folder_{account_phone}_{folder_id}")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data=f"back_to_chat_folders_{account_phone}")])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await call.message.edit_reply_markup(reply_markup=markup)
        except Exception as e:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if "message is not modified" in str(e):
                pass
            else:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–æ–≤: {e}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Ç–æ–≤: {e}")

async def update_mailing_accounts_keyboard(call, user_id, selected_accounts):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏"""
    try:
        print(f"üîß DEBUG: update_mailing_accounts_keyboard –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, selected_accounts={selected_accounts}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = load_user_accounts(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for acc in accounts:
            nickname = (f"@{acc['username']}" if acc.get('username') else (acc.get('name') or acc.get('phone')))
            mark = " ‚úÖ" if acc.get('phone') in selected_accounts else ""
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=f"{nickname}{mark}", 
                callback_data=f"mailing_acc_{acc.get('phone')}"
            )])
        
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="mailing_select_all")])
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã 1 –∞–∫–∫–∞—É–Ω—Ç
        if selected_accounts:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="mailing_next")])
        else:
            markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="mailing_next", disabled=True)])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="message_mailing")])
        
        print(f"üîß DEBUG: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å {len(markup.inline_keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await call.message.edit_reply_markup(reply_markup=markup)
            print(f"‚úÖ DEBUG: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        import traceback
        traceback.print_exc()

async def update_postman_accounts_keyboard(call, user_id, selected_accounts):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—á—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏"""
    try:
        print(f"üîß DEBUG: update_postman_accounts_keyboard –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, selected_accounts={selected_accounts}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = load_user_accounts(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ–∫–∞–∑–µ)
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        for acc in accounts:
            label = (f"@{acc['username']}" if acc.get("username") else (acc.get("name") or acc.get("phone")))
            mark = " ‚úÖ" if acc.get("phone") in selected_accounts else ""
            label_fixed = f"{label: <5}"  # 5 ‚Äî –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            markup.inline_keyboard.append([InlineKeyboardButton(text=f"{label_fixed}{mark}", callback_data=f"postman_acc_{acc.get('phone')}")])
        
        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" (–ø–æ—Å–ª–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ–∫–∞–∑–µ)
        all_selected = len(selected_accounts) == len(accounts)
        markup.inline_keyboard.append([InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" if all_selected else "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            callback_data="postman_select_all"
        )])
        
        # –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ–∫–∞–∑–µ)
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="postman_next", disabled=not selected_accounts)])
        
        # –ò –Ω–∞–∫–æ–Ω–µ—Ü –∫–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è" (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –ø–æ–∫–∞–∑–µ)
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="postman")])
        
        print(f"üîß DEBUG: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—á—Ç—ã —Å {len(markup.inline_keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await call.message.edit_reply_markup(reply_markup=markup)
            print(f"‚úÖ DEBUG: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—á—Ç—ã: {e}")
            
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—á—Ç—ã: {e}")
        import traceback
        traceback.print_exc()

async def update_autoresponder_accounts_keyboard(call, user_id, selected_accounts):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏"""
    try:
        print(f"üîß DEBUG: update_autoresponder_accounts_keyboard –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}, selected_accounts={selected_accounts}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        markup = get_autoresponder_accounts_menu(user_id, "activate")
        
        print(f"üîß DEBUG: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å {len(markup.inline_keyboard)} –∫–Ω–æ–ø–∫–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await call.message.edit_reply_markup(reply_markup=markup)
            print(f"‚úÖ DEBUG: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")
            
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def show_folder_selection_for_chats(call, user_id, account_phone):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –≤ –Ω–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        accounts = load_user_accounts(user_id)
        account = None
        for acc in accounts:
            if acc.get('phone') == account_phone:
                account = acc
                break
        
        if not account:
            try:
                await call.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
                pass
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        session_name = account.get('name') or account.get('phone')
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        
        if not client:
            try:
                await call.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {session_name}.", show_alert=True)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
                pass
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
        folders = await list_folders(client)
        if not folders:
            try:
                await call.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è {session_name}.", show_alert=True)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
                pass
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        for folder in folders.values():
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=folder['title'], 
                callback_data=f"select_chat_folder_{account_phone}_{folder['id']}"
            )])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç—ã—à–µ–∫
        try:
            _st = mailing_states.get(user_id, {})
            _idx = int(_st.get("current_account_index", 0))
        except Exception:
            _idx = 0
        
        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        nav_row = []
        if _idx > 0:
            nav_row.append(InlineKeyboardButton(text="–ü—Ä–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨áÔ∏è", callback_data=f"back_to_prev_account_chats_{account_phone}"))
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π
        next_text = "–°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è" if _idx == 0 else "–°–ª–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è"
        nav_row.append(InlineKeyboardButton(text=next_text, callback_data=f"next_chat_account_{account_phone}"))
        
        if nav_row:
            markup.inline_keyboard.append(nav_row)
        
        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="to_final_settings")])
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —É—Ä–æ–≤–Ω—é (–≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –∏–≥–Ω–æ—Ä —á–∞—Ç–æ–≤)
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="ignore_chats_back")])
        
        await delete_and_send_image(
            call.message,
            "mailing.png",
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è —á–∞—Ç—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {(('@' + account['username']) if account.get('username') else session_name)}:",
            reply_markup=markup,
            user_id=user_id
        )
        
    except Exception as e:
        try:
            await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
            pass

async def show_chat_selection_for_folder(call, user_id, account_phone, folder_id, existing_message=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Ç–æ–≤ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ"""
    try:
        # –°–Ω–∏–º–æ–∫ —Ç–æ–∫–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ –ø–æ —Ö–æ–¥—É –æ–Ω –∏–∑–º–µ–Ω–∏—Ç—Å—è ‚Äî –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –î–∞–ª–µ–µ/–í–µ—Ä–Ω—É—Ç—å—Å—è
        start_token = None
        try:
            start_token = int(mailing_states.get(user_id, {}).get("chat_load_token", 0))
        except Exception:
            start_token = 0
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        accounts = load_user_accounts(user_id)
        account = None
        for acc in accounts:
            if acc.get('phone') == account_phone:
                account = acc
                break
        
        if not account:
            await call.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        license_type = detect_license_type(user_id)
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        session_name = account.get('name') or account.get('phone')
        client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
        
        if not client:
            await call.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {session_name}.", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞)
        try:
            state = mailing_states.get(user_id, {})
            if "last_folder_for_account" not in state:
                state["last_folder_for_account"] = {}
            state["last_folder_for_account"][account_phone] = str(folder_id)
            mailing_states[user_id] = state
            try:
                save_mailing_parameters(user_id)
            except Exception:
                pass
        except Exception:
            pass

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –≤ –ø–∞–ø–∫–µ
        chats = await get_chats_in_folder(client, folder_id)

        # –ï—Å–ª–∏ –∑–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–î–∞–ª–µ–µ/–í–µ—Ä–Ω—É—Ç—å—Å—è¬ª, –æ—Ç–º–µ–Ω—è–µ–º –≤—ã–≤–æ–¥ —ç—Ç–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        try:
            current_token = int(mailing_states.get(user_id, {}).get("chat_load_token", 0))
        except Exception:
            current_token = start_token
        if current_token != start_token:
            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–∫—Ä–∞–Ω
            return
        if not chats:
            try:
                await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ.", show_alert=True)
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
                pass
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        state = mailing_states.get(user_id, {})
        ignore_chats = state.get("ignore_chats", {})
        account_ignore_chats = ignore_chats.get(account_phone, {})
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –¥–ª—è folder_id
        folder_ignore_chats = account_ignore_chats.get(str(folder_id), [])
        if "chat_pages" not in state:
            state["chat_pages"] = {}
        if account_phone not in state["chat_pages"]:
            state["chat_pages"][account_phone] = {}
        current_page = int(state["chat_pages"][account_phone].get(str(folder_id), 0))
        page_size = 20
        start_index = current_page * page_size
        end_index = start_index + page_size
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
        try:
            _st = mailing_states.get(user_id, {})
            _idx = int(_st.get("current_account_index", 0))
        except Exception:
            _idx = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        visible_chats = chats[start_index:end_index]
        for i, chat in enumerate(visible_chats, start=start_index + 1):  # –°–∫–≤–æ–∑–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
            chat_title = getattr(chat, 'title', None) or getattr(chat, 'username', None) or str(chat.id)
            chat_title = _shorten(chat_title, 22)
            mark = " ‚úÖ" if chat.id in folder_ignore_chats else ""
            markup.inline_keyboard.append([InlineKeyboardButton(
                text=f"{i}. {chat_title}{mark}", 
                callback_data=f"ignore_chat_{account_phone}_{folder_id}_{chat.id}"
            )])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É: —Å–ª–µ–≤–∞ "–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞", —Å–ø—Ä–∞–≤–∞ "–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        nav_row = []
        if current_page > 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            prev_text = "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è" if end_index >= len(chats) else "–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è"
            nav_row.append(InlineKeyboardButton(
                text=prev_text,
                callback_data=f"more_chats_{account_phone}_{folder_id}_{current_page - 1}"
            ))
        else:
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏
            nav_row.append(InlineKeyboardButton(
                text="–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚¨ÖÔ∏è",
                callback_data=f"back_to_chat_folders_{account_phone}"
            ))
        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if end_index < len(chats):
            if current_page == 0:
                next_page_text = "–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è"
            else:
                # –î–ª—è –Ω–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω—é—é –ª–æ–≥–∏–∫—É —Ç–µ–∫—Å—Ç–∞
                next_page_text = "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è" if _idx == 0 else "–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è"
            nav_row.append(InlineKeyboardButton(
                text=next_page_text,
                callback_data=f"more_chats_{account_phone}_{folder_id}_{current_page + 1}"
            ))
        if nav_row:
            markup.inline_keyboard.append(nav_row)
        
        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        nav_row_accounts = []
        if _idx > 0:
            nav_row_accounts.append(InlineKeyboardButton(text="–ü—Ä–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨áÔ∏è", callback_data=f"back_to_prev_account_chats_{account_phone}"))
        
        # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π
        next_text = "–°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è" if _idx == 0 else "–°–ª–µ–¥. –∞–∫–∫–∞—É–Ω—Ç ‚¨ÜÔ∏è"
        nav_row_accounts.append(InlineKeyboardButton(text=next_text, callback_data=f"next_chat_account_{account_phone}"))
        
        if nav_row_accounts:
            markup.inline_keyboard.append(nav_row_accounts)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è"
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="to_final_settings")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="to_ignore_chats_question")])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—É—é –º–µ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        account_label = (f"@{account['username']}" if account.get('username') else (account.get('name') or account.get('phone')))
        title_text = (
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}\n\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ {account_label}:"
        )
        await delete_and_send_image(
            (existing_message or call.message),
            "mailing.png",
            title_text,
            reply_markup=markup,
            user_id=user_id
        )
        
    except Exception as e:
        try:
            await call.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback
            pass

def migrate_accounts(accounts):
    changed = False
    for acc in accounts:
        if "name" not in acc or not acc["name"]:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–º—è –∏–∑ username –∏–ª–∏ phone
            acc["name"] = acc.get("username") or acc.get("phone")
            changed = True
    return changed



# 1. –†–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def update_account_resume_state(
    phone,
    template_index=None,
    folder=None,
    chat_index=None,
    break_seconds_left=None,
    break_until_timestamp=0,
    break_started_ts=None,
    message_count=None,
    username=None,
    filename=None,
    user_id=None
):
    if filename is None:
        if user_id is None:
            filename = resume_state_file
        else:
            user_dir = get_user_dir(user_id, detect_license_type(user_id))
            filename = os.path.join(user_dir, "resume_process.json")
    
    state = load_resume_state(filename, user_id)
    if not state:
        return
    for acc in state["accounts"]:
        if acc["phone"] == phone:
            if template_index is not None:
                acc["template_index"] = template_index
            if folder is not None:
                acc["folder"] = folder
            if chat_index is not None:
                acc["chat_index"] = chat_index
            if break_seconds_left is not None:
                acc["break_seconds_left"] = break_seconds_left
            if break_until_timestamp and break_until_timestamp > 0:
                acc["break_until_timestamp"] = break_until_timestamp
            if break_started_ts is not None:
                acc["break_started_ts"] = break_started_ts
            if message_count is not None:
                acc["message_count"] = message_count
            if username is not None:
                acc["username"] = username
    save_resume_state(state, filename, user_id)

async def send_messages(client, chats, message_template, nickname, start_index=0, message_count=0, timers=None, logging_enabled=True, selected_account=None, user_id=None, minimized=False):
    # üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê message_count –ò–ó –§–ê–ô–õ–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if selected_account and user_id:
        resume_state = load_resume_state(user_id=user_id)
        if resume_state and "accounts" in resume_state:
            for acc in resume_state["accounts"]:
                if acc.get("phone") == selected_account.get("phone"):
                    file_message_count = acc.get("message_count", 0)
                    if file_message_count != message_count:
                        print(f"üî• –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú message_count –¥–ª—è {selected_account.get('phone')}: {message_count} ‚Üí {file_message_count} (–∏–∑ —Ñ–∞–π–ª–∞)")
                        message_count = file_message_count
                    break
    if timers is None:
        timers = {}

    while True:
        try:
            for i in range(start_index, len(chats)):
                chat = chats[i]
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    session_name = selected_account.get('name') if selected_account else nickname
                    if not await ensure_client_connected(client, session_name, user_id):
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                        await asyncio.sleep(10)
                        continue

                    await client.send_message(chat, message_template)
                    message_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if user_id:
                        increment_user_stat(user_id, "sent_messages", 1)
                        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                        log_mailing_activity(user_id, "message_sent", increment=1)
                    
                    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è/—Å–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏
                    try:
                        _ms = mailing_states.get(user_id, {}) if user_id is not None else {}
                        _logging_enabled = bool(_ms.get("logging_enabled", logging_enabled))
                        _minimized = bool(_ms.get("minimized", minimized))
                    except Exception:
                        _logging_enabled = logging_enabled
                        _minimized = minimized
                    if _logging_enabled and not _minimized:
                        if user_id:
                            await log_to_telegram(user_id, f"{nickname}: {chat.title if hasattr(chat, 'title') else chat.username} / –£—Å–ø–µ—à–Ω–æ üü¢ / {message_count}", "mailing")
                        else:
                            print(f"{print_in_white(nickname)}: {chat.title if hasattr(chat, 'title') else chat.username} / {print_in_green(f'–£—Å–ø–µ—à–Ω–æ üü¢ / {message_count}')}", flush=True)

                    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ö–ê–ñ–î–û–ô —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö ---
                    if selected_account:
                        update_account_resume_state(selected_account['phone'], chat_index=i, message_count=message_count, user_id=user_id)
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {selected_account.get('phone')} ‚Üí {message_count}/30")

                    delay = random.randint(13, 15)
                    timers[nickname] = delay

                    while delay > 0:
                        for ms in range(10, 0, -1):
                            timers[nickname] = f"{delay - 1}.{ms}" if ms < 10 else f"{delay}.0"
                            print_timers(timers)
                            await asyncio.sleep(0.1)
                        delay -= 1

                    timers.pop(nickname, None)
                    print_timers(timers)

                    if message_count >= 30:
                        return message_count, i + 1
                except Exception as e:
                    message_count += 1
                    
                    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ—Ä–∏ —Å—á–µ—Ç—á–∏–∫–∞ ---
                    if selected_account:
                        update_account_resume_state(selected_account['phone'], chat_index=i, message_count=message_count, user_id=user_id)
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–æ—à–∏–±–∫–∞): {selected_account.get('phone')} ‚Üí {message_count}/30")
                    
                    try:
                        _ms = mailing_states.get(user_id, {}) if user_id is not None else {}
                        _logging_enabled = bool(_ms.get("logging_enabled", logging_enabled))
                        _minimized = bool(_ms.get("minimized", minimized))
                    except Exception:
                        _logging_enabled = logging_enabled
                        _minimized = minimized
                    if _logging_enabled and not _minimized:
                        if user_id:
                            await log_to_telegram(user_id, f"{nickname}: {chat.title if hasattr(chat, 'title') else chat.username} / –ù–µ—É–¥–∞—á–Ω–æ üî¥ / {message_count}", "mailing")
                        else:
                            print(f"{print_in_white(nickname)}: {print_in_yellow(chat.title if hasattr(chat, 'title') else chat.username)} / {print_in_yellow(f'–ù–µ—É–¥–∞—á–Ω–æ üî¥ / {message_count}')}", flush=True)
                    if message_count >= 30:
                        return message_count, i + 1

            return message_count, len(chats)
        except ConnectionError:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            session_name = selected_account.get('name') if selected_account else nickname
            await ensure_client_connected(client, session_name, user_id)
        except RPCError as e:
            if user_id:
                await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ RPC: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", "mailing")
            else:
                print(f"–û—à–∏–±–∫–∞ RPC: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ RPC –æ—à–∏–±–∫–∞—Ö
            session_name = selected_account.get('name') if selected_account else nickname
            await ensure_client_connected(client, session_name, user_id)
        except Exception as e:
            if user_id:
                await log_to_telegram(user_id, f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", "mailing")
            else:
                print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö
            session_name = selected_account.get('name') if selected_account else nickname
            await ensure_client_connected(client, session_name, user_id)


async def main_flow(selected_account, client, template_list, template_index, selected_folder, timers, logging_enabled, start_index=0, message_count=0, alternate_templates_enabled=True, user_id=None, minimized=False):
    # üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê message_count –ò–ó –§–ê–ô–õ–ê
    if selected_account and user_id:
        resume_state = load_resume_state(user_id=user_id)
        if resume_state and "accounts" in resume_state:
            for acc in resume_state["accounts"]:
                if acc.get("phone") == selected_account.get("phone"):
                    file_message_count = acc.get("message_count", 0)
                    if file_message_count != message_count:
                        print(f"üî• main_flow –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú message_count –¥–ª—è {selected_account.get('phone')}: {message_count} ‚Üí {file_message_count} (–∏–∑ —Ñ–∞–π–ª–∞)")
                        message_count = file_message_count
                    break
    
    session_message_count = message_count  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    while True:
        try:
            if user_id is not None and not is_license_valid(user_id):
                await handle_access_expired(user_id)
                return
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if selected_account and selected_account.get('name'):
                session_name = selected_account.get('name')
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è id –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    session_name = f"client_{id(client)}"
                except:
                    session_name = "unknown_client"
            
            if not await ensure_client_connected(client, session_name, user_id):
                await asyncio.sleep(10)
                continue
            await client.get_dialogs()
            folder_dict = await list_folders(client)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥–Ω–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            try:
                ignore_settings = load_ignore_settings(user_id) if user_id else {"ignore_folders": {}, "ignore_chats": {}}
            except Exception:
                ignore_settings = {"ignore_folders": {}, "ignore_chats": {}}
            ignore_folders = ignore_settings.get("ignore_folders", {})
            filtered_folder_dict = filter_folders_by_ignore(folder_dict, ignore_folders, selected_account.get('phone'))
            folder_dict = filtered_folder_dict or {}
            folder_keys = list(folder_dict.keys())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if selected_folder and 'folder_index' in selected_folder:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ folder_index –≤–∞–ª–∏–¥–Ω—ã–π
                    if selected_folder['folder_index'] < len(folder_keys):
                        folder_key = folder_keys[selected_folder['folder_index']]
                        selected_folder = folder_dict[folder_key]
                        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ –≤ main_flow: {selected_folder}")
                    else:
                        error_msg = f"–û—à–∏–±–∫–∞: folder_index {selected_folder['folder_index']} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫"
                        if user_id:
                            await log_to_telegram(user_id, error_msg, "mailing")
                        else:
                            print(error_msg)
                        return
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–∫–∏ –≤ main_flow: {e}"
                    if user_id:
                        await log_to_telegram(user_id, error_msg, "mailing")
                    else:
                        print(error_msg)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–∞–ø–∫–∏ –µ—Å—Ç—å id
            if not selected_folder or 'id' not in selected_folder:
                error_msg = f"–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç id –≤ main_flow: {selected_folder}"
                if user_id:
                    await log_to_telegram(user_id, error_msg, "mailing")
                else:
                    print(error_msg)
                return
            
            folder_index = next((i for i, key in enumerate(folder_keys) if folder_dict[key]['id'] == selected_folder['id']), None)
            if folder_index is None:
                error_msg = f"–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å ID {selected_folder['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                if user_id:
                    await log_to_telegram(user_id, error_msg, "mailing")
                else:
                    print(error_msg)
                return

            session_message_count = message_count
            chats = []

            while True:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –≤—Å—Ç—Ä–æ–µ–Ω–∞ –≤ ensure_client_connected
                if not await ensure_client_connected(client, session_name, user_id):
                    await asyncio.sleep(10)
                    continue

                selected_folder = folder_dict[folder_keys[folder_index]]
                if not chats:
                    chats = await get_chats_in_folder(client, selected_folder['id'], logging_enabled=logging_enabled)
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–≥–Ω–æ—Ä —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
                    try:
                        ignore_chats = ignore_settings.get("ignore_chats", {})
                        chats = filter_chats_by_ignore(chats, ignore_chats, selected_account.get('phone'), selected_folder['id'])
                    except Exception:
                        pass
                if not chats:
                    if user_id:
                        await log_to_telegram(user_id, f"–í –ø–∞–ø–∫–µ \"{selected_folder['title']}\" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ.", "mailing")
                    else:
                        sys.stdout.write("\033[2K\033[0G")
                        sys.stdout.flush()
                        print(f"–í –ø–∞–ø–∫–µ \"{selected_folder['title']}\" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ.")
                    folder_index = (folder_index + 1) % len(folder_keys)
                    start_index = 0
                    chats = []
                    continue

                remaining_chats = chats[start_index:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ template_list –Ω–µ –ø—É—Å—Ç–æ–π –∏ template_index –≤–∞–ª–∏–¥–Ω—ã–π
                if not template_list or len(template_list) == 0:
                    error_msg = f"–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    if user_id:
                        await log_to_telegram(user_id, error_msg, "mailing")
                    else:
                        print(error_msg)
                    return
                
                if template_index >= len(template_list):
                    template_index = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
                
                message_template = template_list[template_index]

                # --- –ü–µ—Ä–µ–¥–∞—ë–º selected_account –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
                # –î–ª—è –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º username –±–µ–∑ @ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ)
                nickname = (selected_account.get('username') or selected_account.get('name') or selected_account.get('phone'))
                session_message_count, start_index = await send_messages(
                    client, chats, message_template, nickname, start_index, session_message_count, timers, logging_enabled, selected_account=selected_account, user_id=user_id, minimized=minimized
                )

                update_account_resume_state(selected_account['phone'], chat_index=start_index, break_seconds_left=0, user_id=user_id)

                if session_message_count >= 30:
                    nickname = (selected_account.get('username') or selected_account.get('name') or selected_account.get('phone'))
                    # --- –¢–∞–π–º–µ—Ä –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Ç 8—á3–º–Ω –¥–æ 8—á5–º–Ω  ---
                    break_time_seconds = random.randint(8 * 3600 + 3 * 60, 8 * 3600 + 5 * 60)
                    now_ts = int(time.time())
                    break_until_timestamp = now_ts + break_time_seconds
                    update_account_resume_state(
                        selected_account['phone'],
                        chat_index=start_index,
                        break_seconds_left=break_time_seconds,
                        break_until_timestamp=break_until_timestamp,
                        break_started_ts=now_ts,
                        user_id=user_id
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–µ—Ä–µ—Ä—ã–≤–∞
                    hours = break_time_seconds // 3600
                    minutes = (break_time_seconds % 3600) // 60
                    seconds = break_time_seconds % 60
                    time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
                    display_name = get_display_name(selected_account)
                    message = f"{display_name}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_str} üü°"
                    if user_id:
                        await log_to_telegram(user_id, message, "mailing")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è countdown_timer —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
                    task_name = f"break_timer_{selected_account.get('phone', nickname)}"
                    task = await start_task(
                        user_id, 
                        task_name, 
                        countdown_timer(break_time_seconds, nickname, timers, selected_account=selected_account, user_id=user_id, break_started_ts=now_ts)
                    )
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
                    await task
                    update_account_resume_state(selected_account['phone'], chat_index=start_index, break_seconds_left=0, break_until_timestamp=0, user_id=user_id)
                    # --- –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–†–û–°: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º message_count –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ---
                    if session_message_count >= 30:
                        print(f"üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account.get('phone')}: –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª 30/30 + –ø–µ—Ä–µ—Ä—ã–≤")
                        session_message_count = 0
                        update_account_resume_state(selected_account['phone'], message_count=0, user_id=user_id)
                    else:
                        print(f"üõ°Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account.get('phone')}: {session_message_count}/30 (–Ω–µ–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª)")
                    remaining_chats = chats[start_index:]
                    if remaining_chats:
                        nickname = (selected_account.get('username') or selected_account.get('name') or selected_account.get('phone'))
                        if user_id:
                            chat_list = "\n".join([f"{i}. {chat.title if hasattr(chat, 'title') else (chat.username or chat.first_name)}" for i, chat in enumerate(remaining_chats, start=start_index + 1)])
                            #await log_to_telegram(user_id, f"\"{selected_folder['title']}\" - {nickname}:\n{chat_list}", "mailing")
                        else:
                            print(f"\n\"{selected_folder['title']}\" - {nickname}:")
                            for i, chat in enumerate(remaining_chats, start=start_index + 1):
                                chat_title = chat.title if hasattr(chat, 'title') else (chat.username or chat.first_name)
                                print(f"{i}. {chat_title}")
                    else:
                        folder_index = (folder_index + 1) % len(folder_keys)
                        # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–µ –∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–∏ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if folder_index == 0 and alternate_templates_enabled:
                            template_index = (template_index + 1) % len(template_list)
                            update_account_resume_state(selected_account['phone'], template_index=template_index, user_id=user_id)
                        start_index = 0
                        chats = []
                        continue
                    continue

                if start_index >= len(chats):
                    sys.stdout.write("\033[2K\033[0G")
                    sys.stdout.flush()
                    folder_index = (folder_index + 1) % len(folder_keys)
                    if folder_index == 0:
                        if alternate_templates_enabled:
                            template_index = (template_index + 1) % len(template_list)
                            update_account_resume_state(selected_account['phone'], template_index=template_index, user_id=user_id)
                        # –ï—Å–ª–∏ alternate_templates_enabled == False, template_index –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è!
                    selected_folder = folder_dict[folder_keys[folder_index]]
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º folder_index –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–∞–ø–∫–∏
                    folder_for_save = {"folder_index": folder_index, "title": selected_folder["title"]}
                    update_account_resume_state(selected_account['phone'], folder=folder_for_save, user_id=user_id)
                    start_index = 0
                    chats = []
                    nickname = (selected_account.get('username') or selected_account.get('name') or selected_account.get('phone'))
                    try:
                        _ms = mailing_states.get(user_id, {}) if user_id is not None else {}
                        _logging_enabled = bool(_ms.get("logging_enabled", logging_enabled))
                        _minimized = bool(_ms.get("minimized", minimized))
                    except Exception:
                        _logging_enabled = logging_enabled
                        _minimized = minimized
                    if user_id and _logging_enabled and not _minimized:
                        await log_to_telegram(user_id, f'{nickname}: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–∞–ø–∫–µ "{selected_folder["title"]}" üóÇ', "mailing")
                    else:
                        sys.stdout.write("\033[2K\033[0G")
                        sys.stdout.flush()
                    try:
                        _ms = mailing_states.get(user_id, {}) if user_id is not None else {}
                        _logging_enabled = bool(_ms.get("logging_enabled", logging_enabled))
                        _minimized = bool(_ms.get("minimized", minimized))
                    except Exception:
                        _logging_enabled = logging_enabled
                        _minimized = minimized
                    if _logging_enabled and not _minimized:
                        print(f'\n{nickname}: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–∞–ø–∫–µ "{selected_folder["title"]}" üóÇ')
                        print()
                    continue

        except ConnectionError:
            if user_id:
                await log_to_telegram(user_id, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...", "mailing")
            else:
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            try:
                if client.is_connected():
                    await client.disconnect()
                await asyncio.sleep(5)
                await client.connect()
            except Exception as e:
                if user_id:
                    await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", "mailing")
                else:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                await asyncio.sleep(10)
        except RPCError as e:
            # üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –≤ main_flow
            if selected_account and user_id and session_message_count > 0:
                update_account_resume_state(
                    selected_account['phone'], 
                    chat_index=start_index, 
                    message_count=session_message_count, 
                    user_id=user_id
                )
                print(f"üõ°Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ main_flow –ø–µ—Ä–µ–¥ RPC –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º: {selected_account.get('phone')} ‚Üí {session_message_count}/30")
            
            if user_id:
                await log_to_telegram(user_id, f"–û—à–∏–±–∫–∞ RPC: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", "mailing")
            else:
                print(f"–û—à–∏–±–∫–∞ RPC: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)
        except Exception as e:
            if user_id:
                await log_to_telegram(user_id, f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", "mailing")
            else:
                print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)
        
        


async def main_flow_resume(selected_account, client, template_list, template_index, selected_folder, timers, start_index, break_seconds_left, logging_enabled=True, alternate_templates_enabled=True, user_id=None, ignore_breaks=False, minimized=False):
    print(f"üîÑ main_flow_resume: –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    print(f"üîÑ main_flow_resume: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - template_index={template_index}, start_index={start_index}")
    
    state = load_resume_state(user_id=user_id)
    acc_state = None
    if state:
        acc_state = next((a for a in state["accounts"] if a["phone"] == selected_account["phone"]), None)
        print(f"üîÑ main_flow_resume: –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {acc_state is not None}")
    if acc_state:
        break_until_timestamp = acc_state.get("break_until_timestamp")
        message_count = acc_state.get("message_count", 0)
    else:
        break_until_timestamp = 0
        message_count = 0

    now = int(time.time())
    
    # --- –ï—Å–ª–∏ –ø–µ—Ä–µ—Ä—ã–≤ –±—ã–ª –Ω–∞—á–∞—Ç –∏ –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä—ã–≤—ã ---
    if not ignore_breaks and break_until_timestamp and break_until_timestamp > 0:
        left = break_until_timestamp - now
        if left > 0:
            nickname = (selected_account.get('username') or selected_account.get('name') or selected_account.get('phone'))
            account_phone = selected_account.get("phone")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –¥–ª—è —á–∞—Å–æ–≤—ã—Ö –ª–æ–≥–æ–≤
            acc_break_started_ts = None
            # –ü–æ–ª—É—á–∞–µ–º break_started_ts –∏–∑ —Ñ–∞–π–ª–∞
            resume_state_for_break = load_resume_state(user_id=user_id)
            if resume_state_for_break and "accounts" in resume_state_for_break:
                for acc in resume_state_for_break["accounts"]:
                    if acc.get("phone") == account_phone:
                        if acc.get("break_started_ts"):
                            acc_break_started_ts = int(acc["break_started_ts"])
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤—ã—á–∏—Å–ª–∏–º –Ω–∞–∑–∞–¥ –æ—Ç break_until_timestamp
                            planned_duration = acc.get("break_seconds_left", left)
                            acc_break_started_ts = break_until_timestamp - planned_duration
                        break
            
            if acc_break_started_ts is None:
                acc_break_started_ts = break_until_timestamp - left
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è countdown_timer —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
            task_name = f"break_timer_{selected_account.get('phone', nickname)}"
            task = await start_task(
                user_id, 
                task_name, 
                countdown_timer(left, nickname, timers, selected_account=selected_account, user_id=user_id, break_started_ts=acc_break_started_ts)
            )
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
            await task
            update_account_resume_state(selected_account['phone'], message_count=0, break_seconds_left=0, break_until_timestamp=0, user_id=user_id)
            message_count = 0
            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é - –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            return
        else:
            update_account_resume_state(selected_account['phone'], break_seconds_left=0, break_until_timestamp=0, user_id=user_id)

    # --- –ï—Å–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç –∏ –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä—ã–≤—ã ---
    elif not ignore_breaks and message_count >= 30:
        print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {selected_account.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ({message_count}/30), –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤")
        break_time_seconds = random.randint(8 * 3600 + 3 * 60, 8 * 3600 + 5 * 60)
        break_until_timestamp = now + break_time_seconds
        update_account_resume_state(
            selected_account['phone'],
            break_seconds_left=break_time_seconds,
            break_until_timestamp=break_until_timestamp,
            user_id=user_id
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–µ—Ä–µ—Ä—ã–≤–∞
        hours = break_time_seconds // 3600
        minutes = (break_time_seconds % 3600) // 60
        seconds = break_time_seconds % 60
        time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        display_name = get_display_name(selected_account)
        message = f"{display_name}: –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_str} üü°"
        if user_id:
            await log_to_telegram(user_id, message, "mailing")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
        now_ts = int(time.time())
        update_account_resume_state(
            selected_account['phone'],
            break_started_ts=now_ts,
            user_id=user_id
        )
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è countdown_timer —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        task_name = f"break_timer_{selected_account.get('phone', nickname)}"
        task = await start_task(
            user_id, 
            task_name, 
            countdown_timer(break_time_seconds, nickname, timers, selected_account=selected_account, user_id=user_id, break_started_ts=now_ts)
        )
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
        await task
        update_account_resume_state(selected_account['phone'], message_count=0, break_seconds_left=0, break_until_timestamp=0, user_id=user_id)
        message_count = 0
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é - –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        return

    # --- –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ---
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ template_list –Ω–µ –ø—É—Å—Ç–æ–π –∏ template_index –≤–∞–ª–∏–¥–Ω—ã–π
    if not template_list or len(template_list) == 0:
        error_msg = f"–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø—É—Å—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        if user_id:
            await log_to_telegram(user_id, error_msg, "mailing")
        else:
            print(error_msg)
        return
    
    if template_index >= len(template_list):
        template_index = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏
    if selected_folder and 'folder_index' in selected_folder:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–≥–Ω–æ—Ä–∞
            folder_dict = await list_folders(client)
            try:
                ignore_settings = load_ignore_settings(user_id) if user_id else {"ignore_folders": {}, "ignore_chats": {}}
            except Exception:
                ignore_settings = {"ignore_folders": {}, "ignore_chats": {}}
            ignore_folders = ignore_settings.get("ignore_folders", {})
            folder_dict = filter_folders_by_ignore(folder_dict, ignore_folders, selected_account.get('phone')) or {}
            folder_keys = list(folder_dict.keys())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ folder_index –≤–∞–ª–∏–¥–Ω—ã–π
            if selected_folder['folder_index'] < len(folder_keys):
                folder_key = folder_keys[selected_folder['folder_index']]
                selected_folder = folder_dict[folder_key]
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏: {selected_folder}")
            else:
                error_msg = f"–û—à–∏–±–∫–∞: folder_index {selected_folder['folder_index']} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫"
                if user_id:
                    await log_to_telegram(user_id, error_msg, "mailing")
                else:
                    print(error_msg)
                return
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–∫–∏: {e}"
            if user_id:
                await log_to_telegram(user_id, error_msg, "mailing")
            else:
                print(error_msg)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–∞–ø–∫–∏ –µ—Å—Ç—å id
    if not selected_folder or 'id' not in selected_folder:
        error_msg = f"–û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç id: {selected_folder}"
        if user_id:
            await log_to_telegram(user_id, error_msg, "mailing")
        else:
            print(error_msg)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if selected_account and selected_account.get('name'):
        session_name = selected_account.get('name')
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è id –∫–ª–∏–µ–Ω—Ç–∞
        try:
            session_name = f"client_{id(client)}"
        except:
            session_name = "unknown_client"
    
    if not await ensure_client_connected(client, session_name, user_id):
        await asyncio.sleep(10)
        return

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º main_flow
    if message_count >= 30 and not ignore_breaks:
        print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {selected_account.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —É–∂–µ –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ ({message_count}/30), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
        if user_id and not minimized:
            nickname = (selected_account.get('username') or selected_account.get('name') or selected_account.get('phone'))
            await log_to_telegram(user_id, f"{nickname}: –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({message_count}/30), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "mailing")
        return
    
    print(f"üîÑ main_flow_resume: –∑–∞–ø—É—Å–∫–∞–µ–º main_flow –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Å message_count={message_count}")
    
    await main_flow(
        selected_account, client, template_list, template_index, selected_folder, timers,
        logging_enabled=logging_enabled, start_index=start_index, message_count=message_count,
        
        alternate_templates_enabled=alternate_templates_enabled, user_id=user_id, minimized=minimized
    )
async def main(user_id=None, license_type=None):
    global sessions_dir, resume_state_file, config_path
    if user_id is None or license_type is None:
        if len(sys.argv) > 2:
            user_id = sys.argv[1]
            license_type = sys.argv[2]
        else:
            print("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã user_id –∏ license_type!")
            return
    user_dir = get_user_dir(user_id, license_type)
    config_path = os.path.join(user_dir, "config.json")
    resume_state_file = os.path.join(user_dir, "resume_process.json")
    sessions_dir = os.path.join(get_user_subdir(user_id, "bot", license_type), "sessions")
    os.makedirs(sessions_dir, exist_ok=True)

    if not os.path.exists(config_path):
        print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with open(config_path, "r", encoding="utf-8") as f:
        config = json.load(f)

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º api_id –∏ api_hash –∏–∑ –∫–æ—Ä–Ω—è –∫–æ–Ω—Ñ–∏–≥–∞ ---
    global_api_id = config.get("api_id")
    global_api_hash = config.get("api_hash")

    accounts = config.get("accounts", [])
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ —É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –µ—Å—Ç—å –ø–æ–ª–µ name
    def _migrate_accounts_local(accs):
        changed = False
        for acc in accs:
            if "name" not in acc or not acc.get("name"):
                acc["name"] = acc.get("username") or acc.get("phone")
                changed = True
        return changed

    if _migrate_accounts_local(accounts):
        config["accounts"] = accounts
    #   with open(config_path, "w", encoding="utf-8") as f:
        #   json.dump(config, f, ensure_ascii=False, indent=2)

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º api_id –∏ api_hash –≤ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç ---
    for acc in accounts:
        if "api_id" not in acc:
            acc["api_id"] = global_api_id
        if "api_hash" not in acc:
            acc["api_hash"] = global_api_hash

    available_accounts = [
        acc for acc in accounts
        if all(k in acc for k in ["api_id", "api_hash", "phone"])
    ]

    selected_accounts = await select_accounts(available_accounts)
    if not selected_accounts:
        return

    # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –∑–∞–ø—Ä–æ—Å Last summary ---
        print_separator()
    print("Last summary:\n1. –î–∞\n2. –ù–µ—Ç")
    summary_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
    if summary_choice == "1":
        state = load_resume_state(resume_state_file)
        now = int(time.time())
        if state and "accounts" in state:
            limits_list = [
                f"{acc.get('nickname', acc.get('phone', ''))} - {acc.get('message_count', 0)}/30"
                for acc in state["accounts"]
                if (not acc.get("break_until_timestamp")) and acc.get("message_count", 0) < 30
            ]
            breaks_list = [
                f"{acc.get('nickname', acc.get('phone', ''))} - \033[91m{(acc['break_until_timestamp'] - now) // 3600:02d} {(acc['break_until_timestamp'] - now) % 3600 // 60:02d} {(acc['break_until_timestamp'] - now) % 60:02d}\033[0m"
                for acc in state["accounts"]
                if acc.get("break_until_timestamp") and acc["break_until_timestamp"] > now
            ]

            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å ---
            if limits_list and breaks_list:
                print_separator()
                print("LIMITS:")
                print()
                for line in limits_list:
                    print(line)
                print()
                print()
                print()
                print("BREAKS:")
                print()
                for line in breaks_list:
                    print(line)
            elif limits_list:
                print_separator()
                print("LIMITS:")
                print()
                for line in limits_list:
                    print(line)
            elif breaks_list:
                print_separator()
                print("BREAKS:")
                print()
                for line in breaks_list:
                    print(line)
    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ Last summary ---

    mode_choice = None
    while True:
        print_separator()
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        print("1. Custom configuration")
        print("2. Select configuration")
        print("3. Resume process")
        mode_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞: ").strip()
        if mode_choice in {"1", "2", "3"}:
            if mode_choice == "3":
                state = load_resume_state(resume_state_file)
                if not state:
                    print("–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
                    continue
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")

    # 1. Custom configuration 
    if mode_choice == "1":
        timers = {}
        authorized_clients = {}
        templates = {}
        template_indices = {}
        folders = {}

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ---
        print_separator()
        print("–í–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤?:\n1. –î–∞\n2. –ù–µ—Ç")
        alternate_templates_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        alternate_templates_enabled = alternate_templates_choice == "1"
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for idx, account in enumerate(selected_accounts, start=1):
            client = await authenticate_client(account)
            if client:
                authorized_clients[account['phone']] = client
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account['phone']}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

        print_separator()

        # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for idx, account in enumerate(selected_accounts, start=1):
            if account['phone'] not in authorized_clients:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã

            template_list = get_templates_for_account(account)
            print(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('nickname', account['phone'])} / {idx}:")
            for i, template in enumerate(template_list, 1):
                print(f"{i}. {template.splitlines()[0][:50]}{'...' if len(template) > 50 else ''}")

            while True:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: ").strip()
                if choice.isdigit() and 1 <= int(choice) <= len(template_list):
                    templates[account['phone']] = template_list
                    template_indices[account['phone']] = int(choice) - 1  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    break
                else:
                    print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(template_list)}")
            # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if idx != len(selected_accounts):
                print()
                print()
                print()

        print_separator()

        # –í—ã–±–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for idx, account in enumerate(selected_accounts, start=1):
            if account['phone'] not in authorized_clients:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã

            client = authorized_clients[account['phone']]
            print(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('nickname', account['phone'])} / {idx}:")
            folder_dict = await list_folders(client)
            selected_folder = await select_folder(folder_dict)
            folders[account['phone']] = selected_folder
            if idx != len(selected_accounts):
                print()
                print()
                print()

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
        logging_enabled = True
        while True:
            print_separator()
            print('–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π? : \n1. –î–∞\n2. –ù–µ—Ç\n')
            log_choice = input('–í–∞—à –≤—ã–±–æ—Ä? : ').strip()
            if log_choice == "1":
                logging_enabled = True
                break
            elif log_choice == "2":
                logging_enabled = False
                break
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

        # –ó–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã start
        while True:
            print_separator()
            command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start: ").strip().lower()
            if command == "start":
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'start' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")

        print_separator()  

        # –í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for account in selected_accounts:
            if account['phone'] in folders:
                selected_folder = folders[account['phone']]
                nickname = account.get('nickname', account['phone'])
                print(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É "{selected_folder["title"]}" - {nickname}')
                
        print_separator()
        
        # –í—ã–≤–æ–¥–∏–º —á–∞—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        chats_per_account = {}
        for idx, account in enumerate(selected_accounts):
            if account['phone'] in folders and account['phone'] in authorized_clients:
                client = authorized_clients[account['phone']]
                selected_folder = folders[account['phone']]
                chats = await get_chats_in_folder(client, selected_folder['id'], logging_enabled=logging_enabled)
                chats_per_account[account['phone']] = chats

                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                output_lines = [f'"{idx+1}" - {account.get("nickname", account["phone"])}:']
                for i, chat in enumerate(chats, 1):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–ª–∏ username
                    if hasattr(chat, "title") and chat.title:
                        chat_name = chat.title
                    elif hasattr(chat, "username") and chat.username:
                        chat_name = chat.username
                    elif hasattr(chat, "first_name") and chat.first_name:
                        chat_name = chat.first_name
                    else:
                        chat_name = str(chat.id)
                    output_lines.append(f"{i}. {chat_name}")
                print('\n'.join(output_lines))  # <--- –í–µ—Å—å –≤—ã–≤–æ–¥ –æ–¥–Ω–∏–º print

                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
                if idx != len(selected_accounts) - 1:
                    print()

        print_separator()

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Resume process ---
        resume_state = {
            "accounts": [],
            "logging_enabled": logging_enabled,
            "alternate_templates_enabled": alternate_templates_enabled,
            "sync_break_finished": False  # <-- –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
        }
        for account in selected_accounts:
            phone = account['phone']
            nickname = account.get('nickname', phone)
            template_index = template_indices.get(phone, 0)
            folder = folders.get(phone, {})
            resume_state["accounts"].append({
                "phone": phone,
                "nickname": nickname,
                "username": account.get('username', ''),
                "template_index": template_index,
                "folder": folder,
                "chat_index": 0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
                "break_seconds_left": 0,  # –ù–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
                "break_until_timestamp": 0,
                "message_count": 0
            })
        save_resume_state(resume_state, resume_state_file)
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        tasks = []
        for account in selected_accounts:
            if account['phone'] not in authorized_clients:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã

            client = authorized_clients[account['phone']]
            template_list = templates[account['phone']]
            template_index = template_indices[account['phone']]
            selected_folder = folders[account['phone']]

            # --- –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ---
            tasks.append(main_flow(
                account, client, template_list, template_index, selected_folder, timers, logging_enabled,
                alternate_templates_enabled=alternate_templates_enabled, user_id=user_id
            ))

        await asyncio.gather(*tasks)

    # 2. Select configuration 
    if mode_choice == "2":
        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ---
        print_separator()
        print("–í–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤?:\n1. –î–∞\n2. –ù–µ—Ç")
        alternate_templates_choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        alternate_templates_enabled = alternate_templates_choice == "1"
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

        while True:
            print_separator()
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            print("1. T1")
            print("2. T2")
            t_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: ").strip()
            if t_choice in {"1", "2"}:
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

        while True:
            print_separator()
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:")
            print("1. F1")
            print("2. F2")
            print("3. F3")
            print("4. F4")
            print("5. F5")
            f_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–±–æ—Ä–∞ –ø–∞–ø–æ–∫: ").strip()
            if f_choice in {"1", "2", "3", "4", "5"}:
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")

        timers = {}
        authorized_clients = {}
        templates = {}
        template_indices = {}
        folders = {}

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for idx, account in enumerate(selected_accounts, start=1):
            client = await authenticate_client(account)
            if client:
                authorized_clients[account['phone']] = client
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account['phone']}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤
        for idx, account in enumerate(selected_accounts):
            template_list = get_templates_for_account(account)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω (0 - template1, 1 - template2)
            if t_choice == "1":
                template_index = idx % 2  # 0,1,0,1...
            else:
                template_index = (idx + 1) % 2  # 1,0,1,0...
            templates[account['phone']] = template_list
            template_indices[account['phone']] = template_index

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫
        for idx, account in enumerate(selected_accounts):
            if account['phone'] not in authorized_clients:
                continue
            client = authorized_clients[account['phone']]
            folder_dict = await list_folders(client)
            folder_keys = list(folder_dict.keys())
            if not folder_keys:
                print(f"–ù–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.get('nickname', account['phone'])}")
                continue
            # –°–º–µ—â–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–∞–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±–æ—Ä—É F1-F5
            folder_offset = int(f_choice) - 1
            folder_index = (idx + folder_offset) % len(folder_keys)
            selected_folder = folder_dict[folder_keys[folder_index]]
            folders[account['phone']] = selected_folder

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
        logging_enabled = True
        while True:
            print_separator()
            print('–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π? : \n1. –î–∞\n2. –ù–µ—Ç\n')
            log_choice = input('–í–∞—à –≤—ã–±–æ—Ä? : ').strip()
            if log_choice == "1":
                logging_enabled = True
                break
            elif log_choice == "2":
                logging_enabled = False
                break
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

        # –ó–∞–ø—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã start
        while True:
            print_separator()
            command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É start: ").strip().lower()
            if command == "start":
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'start' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")

        print_separator()        

        # –í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for account in selected_accounts:
            if account['phone'] in folders:
                selected_folder = folders[account['phone']]
                nickname = account.get('nickname', account['phone'])
                print(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–ø–∫—É "{selected_folder["title"]}" - {nickname}')

        print_separator()

        # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –≤—ã–≤–æ–¥–∏–º —á–∞—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
        chats_per_account = {}
        for idx, account in enumerate(selected_accounts):
            if account['phone'] in folders and account['phone'] in authorized_clients:
                client = authorized_clients[account['phone']]
                selected_folder = folders[account['phone']]
                chats = await get_chats_in_folder(client, selected_folder['id'], logging_enabled=logging_enabled)
                chats_per_account[account['phone']] = chats

                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                output_lines = [f'"{idx+1}" - {account.get("nickname", account["phone"])}:']
                for i, chat in enumerate(chats, 1):
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–ª–∏ username
                    if hasattr(chat, "title") and chat.title:
                        chat_name = chat.title
                    elif hasattr(chat, "username") and chat.username:
                        chat_name = chat.username
                    elif hasattr(chat, "first_name") and chat.first_name:
                        chat_name = chat.first_name
                    else:
                        chat_name = str(chat.id)
                    output_lines.append(f"{i}. {chat_name}")
                print('\n'.join(output_lines))  # <--- –í–µ—Å—å –≤—ã–≤–æ–¥ –æ–¥–Ω–∏–º print

                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç
                if idx != len(selected_accounts) - 1:
                    print()

        print_separator()

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Resume process ---
    resume_state = {
        "accounts": [],
        "logging_enabled": logging_enabled,
            "alternate_templates_enabled": alternate_templates_enabled,
        "sync_break_finished": False  # <-- –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
    }
    for account in selected_accounts:
        phone = account['phone']
        nickname = account.get('nickname', phone)
        template_index = template_indices.get(phone, 0)
        folder = folders.get(phone, {})
        resume_state["accounts"].append({
            "phone": phone,
            "nickname": nickname,
            "template_index": template_index,
            "folder": folder,
            "chat_index": 0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
            "break_seconds_left": 0,  # –ù–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
            "break_until_timestamp": 0,
            "break_started_ts": 0,
            "message_count": 0
        })
        save_resume_state(resume_state, resume_state_file)
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        tasks = []
        for account in selected_accounts:
            if account['phone'] not in authorized_clients:
                continue

            client = authorized_clients[account['phone']]
            template_list = templates[account['phone']]
            template_index = template_indices[account['phone']]
            selected_folder = folders[account['phone']]

            # --- –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ ---
            tasks.append(main_flow(
                account, client, template_list, template_index, selected_folder, timers, logging_enabled,
                alternate_templates_enabled=alternate_templates_enabled, user_id=user_id
            ))

        if tasks:
            await asyncio.gather(*tasks)
        return
    



        logging_enabled = True
        while True:
            print('–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π? : \n1. –î–∞\n2. –ù–µ—Ç\n')
            log_choice = input('–í–∞—à –≤—ã–±–æ—Ä? : ').strip()
            if log_choice == "1":
                logging_enabled = True
                break
            elif log_choice == "2":
                logging_enabled = False
                break
            else:
                print("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---

    # 3. Resume process
    if mode_choice == "3":
        state = load_resume_state(resume_state_file)
        if not state:
            print("–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
            return

        timers = {}
        authorized_clients = {}
        tasks = []

        logging_enabled = state.get("logging_enabled", True)
        alternate_templates_enabled = state.get("alternate_templates_enabled", True)
        sync_break_finished = state.get("sync_break_finished", False)  # <-- –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£

        print_separator()

        now = int(time.time())
        accounts = state["accounts"]

        # –ü–†–ï–î–û–•–†–ê–ù–ò–¢–ï–õ–¨ 1
        active_breaks = [
            acc.get("break_until_timestamp")
            for acc in accounts
            if acc.get("break_until_timestamp") and acc["break_until_timestamp"] > now
        ]
        break_start_times = [
            acc["break_until_timestamp"] - acc["break_seconds_left"]
            for acc in accounts
            if acc.get("break_until_timestamp") and acc.get("break_seconds_left")
        ]
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º limits_list –∏ breaks_list ---
        limits_list = [
            f"{acc['nickname']} - {acc.get('message_count', 0)}/30"
            for acc in accounts
            if (not acc.get("break_until_timestamp")) and acc.get("message_count", 0) < 30
        ]
        breaks_list = [
            f"{acc['nickname']} - " + print_in_red(
                "{:02d} {:02d} {:02d}".format(
                    (acc['break_until_timestamp'] - now) // 3600,
                    ((acc['break_until_timestamp'] - now) % 3600) // 60,
                    (acc['break_until_timestamp'] - now) % 60,
                )
            )
            for acc in accounts
            if acc.get("break_until_timestamp") and acc["break_until_timestamp"] > now
        ]
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –Ω–∞—á–∞–ª—Å—è –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        if active_breaks and break_start_times and (now - min(break_start_times) > 1 * 60):
            if limits_list:
                print("LIMITS:")
                print()
                for line in limits_list:
                    print(line)
                print()
                print()
                print()
            if breaks_list:
                print("BREAKS:")
                print()
                for line in breaks_list:
                    print(line)
            print_separator()
            # 3. –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
            print("–í—ã–±—Ä–∞—Ç—å:")
            print("1. Wait the break")
            print("2. Force continue")
            print("3. Refresh all state")
            action = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            if action == "2":
                print()
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
            elif action == "3":
                print()
                for acc in accounts:
                    acc["message_count"] = 0
                    acc["break_seconds_left"] = 0
                    acc["break_until_timestamp"] = 0
                save_resume_state(state, resume_state_file)
            else:
                # 1 –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ ‚Äî –∂–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
                max_break_until = max(active_breaks)
                wait_seconds = max_break_until - now
                print()
                for acc in accounts:
                    nickname = acc.get('nickname', acc.get('name', acc.get('phone', 'Unknown')))
                    timers[nickname] = wait_seconds
                while wait_seconds > 0:
                    mins, secs = divmod(wait_seconds, 60)
                    hours, mins = divmod(mins, 60)
                    timer = f"{hours:02d}:{mins:02d}:{secs:02d}"
                    for acc in accounts:
                        nickname = acc.get('nickname', acc.get('name', acc.get('phone', 'Unknown')))
                        timers[nickname] = timer
                    print_timers(timers)
                    await asyncio.sleep(1)
                    wait_seconds -= 1
                timers.clear()
                print_timers(timers)
                for acc in accounts:
                    acc["message_count"] = 0
                    acc["break_seconds_left"] = 0
                    acc["break_until_timestamp"] = 0
                save_resume_state(state, resume_state_file)
        

        # –ü–†–ï–î–û–•–†–ê–ù–ò–¢–ï–õ–¨ 2
        now = int(time.time())
        any_break_finished = any(
            acc.get("break_until_timestamp") and acc["break_until_timestamp"] < now
            for acc in accounts
        )
        any_not_on_break_and_not_max = any(
            (not acc.get("break_until_timestamp")) and acc.get("message_count", 0) < 30
            for acc in accounts
        )
        # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —É –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
        if any_break_finished and any_not_on_break_and_not_max:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ...")
            for acc in accounts:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ 30/30 –ò –µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤ –∏—Å—Ç–µ–∫
                if (acc.get("message_count", 0) >= 30 and 
                    acc.get("break_until_timestamp") and 
                    acc["break_until_timestamp"] < now):
                    print(f"üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc.get('phone')}: –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 30/30")
                    acc["message_count"] = 0
                    acc["break_seconds_left"] = 0
                    acc["break_until_timestamp"] = 0
                else:
                    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
                    print(f"üõ°Ô∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {acc.get('phone')}: {acc.get('message_count', 0)}/30")
            save_resume_state(state, resume_state_file)

        # --- –í —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª—è–π sync_break_finished ---
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –ø–µ—Ä–µ—Ä—ã–≤, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º sync_break_finished = True
        # (–ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ –¥–æ–±—Ä–∞–≤—à–∏–π –ª–∏–º–∏—Ç)
        if any_break_finished and any_not_on_break_and_not_max:
            state["sync_break_finished"] = True
            save_resume_state(state, resume_state_file)
        elif not any_break_finished:
            state["sync_break_finished"] = False
            save_resume_state(state, resume_state_file)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for acc_state in state["accounts"]:
            account = next((a for a in available_accounts if a["phone"] == acc_state["phone"]), None)
            if not account:
                print(f"–ê–∫–∫–∞—É–Ω—Ç {acc_state['phone']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
                continue

            client = await authenticate_client(account)
            if not client:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account['phone']}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue
            
            authorized_clients[account['phone']] = client

            template_list = get_templates_from_config(load_config(user_id), account.get('phone'))
            template_index = acc_state.get("template_index", 0)
            selected_folder = acc_state.get("folder", {})
            chat_index = acc_state.get("chat_index", 0)
            start_index = chat_index + 1
            break_seconds_left = acc_state.get("break_seconds_left", 0)

            tasks.append(
                main_flow_resume(
                    account, client, template_list, template_index, selected_folder, timers, start_index, break_seconds_left,
                    logging_enabled=logging_enabled,
                    alternate_templates_enabled=alternate_templates_enabled, user_id=user_id
                )
            )

        if tasks:
            await asyncio.gather(*tasks)
        return


async def handle_incoming_messages(client, postman_client, group_id, selected_account, stop_event=None, notify_username=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
    """
    print(">>> handle_incoming_messages: —Å—Ç–∞—Ä—Ç")
    last_sent = {}
    last_postman_sent_time = [0]
    private_recipient = notify_username
    nickname = selected_account.get('nickname', selected_account.get('name', 'Unknown'))

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    async def message_handler(event):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏–º
            if event.out:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏—á–Ω—ã–º (direct message)
            if not event.is_private:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥

            sender_id = event.sender_id
            message_text = event.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            sender = await event.get_sender()
            # --- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ ---
            if getattr(sender, "bot", False):
                return
            sender_username = f"@{sender.username}" if sender.username else f"no username"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if sender_id in last_sent:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 15 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if time.time() - last_sent[sender_id] < 15:
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 15 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞
            if time.time() - last_postman_sent_time[0] < 15:
                return

            # –õ–æ–≥ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_time = datetime.now().strftime("%H:%M")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
            formatted_message_group = (
                f"\n-------------------------\n"
                f"{nickname} | {current_time}\n"
                f"-------------------------\n\n\n"
                f"\n{message_text}\n\n\n\n"
                f"-------------------------\n"
                f"@luxurydynasty\n"
                f"-------------------------\n"
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            formatted_message_private = (
                f"\n-------------------------\n"
                f"{nickname} | {current_time}\n"
                f"-------------------------\n\n\n"
                f"\n{message_text}\n\n\n\n"
                f"-------------------------\n"
                f"{sender_username}\n"
                f"-------------------------\n"
            )

            print(formatted_message_group)

            # –ü–æ—á—Ç–∞–ª—å–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            if group_id:
                await postman_client.send_message(group_id, formatted_message_group)

            # –ü–æ—á—Ç–∞–ª—å–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞
            postman_session_name = f"postman_{id(postman_client)}"
            if not await ensure_client_connected(postman_client, postman_session_name):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç–∞–ª—å–æ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.")
                return
            try:
                await postman_client.send_message(private_recipient, formatted_message_private)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {private_recipient}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            user_id_for_stats = None
            for uid, clients_dict in active_clients.items():
                for sess_name, cl in clients_dict.items():
                    if cl == client:
                        user_id_for_stats = uid
                        break
                if user_id_for_stats:
                    break
            
            if user_id_for_stats:
                increment_user_stat(user_id_for_stats, "received_messages", 1)
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—á—Ç–æ–π
                log_mailbox_activity(user_id_for_stats, "message_received", increment=1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_sent[sender_id] = time.time()
            last_postman_sent_time[0] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ù–∞—Ö–æ–¥–∏–º user_id –∏ session_name –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    user_id = None
    session_name = selected_account.get('name')
    
    # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ –∫–ª–∏–µ–Ω—Ç—É
    for uid, clients_dict in active_clients.items():
        for sess_name, cl in clients_dict.items():
            if cl == client:
                user_id = uid
                break
        if user_id:
            break
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if user_id and session_name:
        await add_event_handler(user_id, session_name, events.NewMessage, message_handler)
    
    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    while True:
        if stop_event and stop_event.is_set():
            print(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ mailboxer –¥–ª—è {nickname}")
            break
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not await ensure_client_connected(client, session_name, user_id):
                await asyncio.sleep(10)
                continue
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {nickname}: {e}")
            await asyncio.sleep(10)
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if user_id and session_name:
        await remove_event_handlers(user_id, session_name)
    
    print(f"Mailboxer –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –¥–ª—è {nickname}.")
async def run_autoresponder(user_id, selected_accounts):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        if not is_license_valid(user_id):
            await handle_access_expired(user_id)
            return
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        log_autoresponder_activity(user_id, "launch")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        if user_id not in autoresponder_states:
            autoresponder_states[user_id] = {}
        
        autoresponder_states[user_id]["active"] = True
        autoresponder_states[user_id]["selected_accounts"] = selected_accounts
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º (—Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
        
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π
        user_config = load_user_accounts(user_id)
        if not user_config:
            await log_to_telegram(user_id, "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "autoresponder")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = get_user_dir(user_id)
        config_path = os.path.join(user_dir, "config.json")
        if not os.path.exists(config_path):
            await log_to_telegram(user_id, "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", "autoresponder")
            return
        
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
            api_id = config.get("api_id")
            api_hash = config.get("api_hash")
            
            if not api_id or not api_hash:
                await log_to_telegram(user_id, "‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "autoresponder")
                return
        except Exception as e:
            await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "autoresponder")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_accounts = get_active_accounts_by_sessions(user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts_to_use = []
        for acc in all_accounts:
            if isinstance(acc, dict) and acc.get("phone") in selected_accounts:
                accounts_to_use.append(acc)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        tasks = []
        for account in accounts_to_use:
            task = asyncio.create_task(
                run_autoresponder_for_account(user_id, account, api_id, api_hash)
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, return_exceptions=True)
        
    except Exception as e:
        await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–µ: {e}", "autoresponder")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å active = False, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º selected_accounts
        if user_id in autoresponder_states:
            autoresponder_states[user_id]["active"] = False
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å selected_accounts, –Ω–æ active = False
            update_service_state("autoresponder_states", user_id, autoresponder_states[user_id])
    finally:
        # –í finally –±–ª–æ–∫–µ –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ stop_autoresponder –ø—Ä–∏ —è–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        pass

async def run_autoresponder_for_account(user_id, account, api_id, api_hash):
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    if not isinstance(account, dict):
        await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞: account –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {account}", "autoresponder")
        return
    
    phone = account.get("phone")
    session_name = account.get("name")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º name –∫–∞–∫ session_name
    nickname = account.get("username") or session_name or phone
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = await get_or_create_client(user_id, session_name, api_id, api_hash)
        if not client:
            await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {nickname}", "autoresponder")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not await ensure_client_connected(client, session_name, user_id):
            await log_to_telegram(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {nickname}", "autoresponder")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        template = get_autoresponder_template(user_id, phone)
        if not template:
            await log_to_telegram(user_id, f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {nickname}", "autoresponder")
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        async def autoresponder_handler(event):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
                if not autoresponder_states.get(user_id, {}).get("active", False):
                    return
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if event.out:
                    return
                
                # –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
                if not event.is_private:
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    chat_type = "–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª"
                    if hasattr(event, 'chat_id') and hasattr(event, 'sender_id'):
                        if event.chat_id != event.sender_id:
                            chat_type = "–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª"
                        else:
                            chat_type = "–ª–∏—á–Ω—ã–π —á–∞—Ç"
                    #await log_to_telegram(user_id, f"üîç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_type} (–Ω–µ –ª–∏—á–Ω–æ–µ)", "autoresponder")
                    return
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
                if hasattr(event, 'chat_id') and hasattr(event, 'sender_id'):
                    if event.chat_id != event.sender_id:
                       #await log_to_telegram(user_id, f"üîç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ (chat_id != sender_id)", "autoresponder")
                        return  # –≠—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender = await event.get_sender()
                if not sender:
                    return
                
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª—ã
                if sender.bot or hasattr(sender, 'broadcast'):
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if not hasattr(sender, 'id'):
                    return
                
                sender_id = sender.id
                current_time = time.time()
                
                # –ê–Ω—Ç–∏—Å–ø–∞–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–¥–∞–≤–Ω–æ —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                if user_id not in autoresponder_last_response:
                    autoresponder_last_response[user_id] = {}
                if phone not in autoresponder_last_response[user_id]:
                    autoresponder_last_response[user_id][phone] = {}
                
                last_response_time = autoresponder_last_response[user_id][phone].get(sender_id, 0)
                if current_time - last_response_time < 10:  # 10 —Å–µ–∫—É–Ω–¥ –∞–Ω—Ç–∏—Å–ø–∞–º
                    return
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if not autoresponder_states.get(user_id, {}).get("active", False):
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
                await event.reply(template)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
                increment_user_stat(user_id, "autoresponder_messages", 1)
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
                log_autoresponder_activity(user_id, "message_responded", increment=1)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                autoresponder_last_response[user_id][phone][sender_id] = current_time
                
                # –õ–æ–≥–∏—Ä—É–µ–º
                sender_name = getattr(sender, 'username', None) or getattr(sender, 'first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                #await log_to_telegram(user_id, f"üì§ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sender_name} —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {nickname}", "autoresponder")
                
            except Exception as e:
                await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞ –¥–ª—è {nickname}: {e}", "autoresponder")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await add_event_handler(user_id, session_name, events.NewMessage, autoresponder_handler)
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω
        while autoresponder_states.get(user_id, {}).get("active", False):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏/—Ç—Ä–∏–∞–ª–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            if not is_license_valid(user_id):
                await handle_access_expired(user_id)
                break
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not await ensure_client_connected(client, session_name, user_id):
                await asyncio.sleep(10)
                continue
            
            await asyncio.sleep(1)
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await remove_event_handlers(user_id, session_name)
        #await log_to_telegram(user_id, f"üõë –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {nickname}", "autoresponder")
        
    except Exception as e:
        await log_to_telegram(user_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è {nickname}: {e}", "autoresponder")

async def stop_autoresponder(user_id):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    try:
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ autoresponder_stop
        # –î–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
        await asyncio.sleep(0)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
        await stop_task(user_id, "autoresponder")
        
        #await log_to_telegram(user_id, "üõë –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "autoresponder")
        
    except Exception as e:
        await log_to_telegram(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}", "autoresponder")

async def handle_custom_folder_selection(call, user_id, folder_name):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –≤ —Ä–µ–∂–∏–º–µ custom"""
    if user_id not in mailing_states:
        await call.answer("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    state = mailing_states[user_id]
    selected_phones = state.get("selected_accounts", [])
    current_index = state.get("current_account_index", 0)
    
    if current_index >= len(selected_phones):
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    all_accounts = load_user_accounts(user_id)
    selected_accounts = [acc for acc in all_accounts if acc.get("phone") in selected_phones]
    
    if current_index >= len(selected_accounts):
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞.", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    current_account = selected_accounts[current_index]
    account_phone = current_account.get("phone")
    # –ï—Å–ª–∏ –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É (IDX_n), –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è
    if isinstance(folder_name, str) and folder_name.startswith("IDX_"):
        try:
            idx = int(folder_name.replace("IDX_", ""))
        except ValueError:
            idx = 0
        folder_title = None
        try:
            folders = state.get("last_folder_list", {})
            # last_folder_list –∏–º–µ–µ—Ç –∫–ª—é—á–∏ 1..N; idx 0-–±–∞–∑–æ–≤—ã–π
            if folders and (idx + 1) in folders:
                folder_title = folders[idx + 1].get('title')
        except Exception:
            folder_title = None
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º IDX_n, –Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∫–ª–∞–¥—ë–º —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è —Ä—è–¥–æ–º
        state["account_folders"][account_phone] = folder_name
        if folder_title:
            if "account_folder_titles" not in state:
                state["account_folder_titles"] = {}
            state["account_folder_titles"][account_phone] = folder_title
    else:
        state["account_folders"][account_phone] = folder_name
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏–ª–∏ –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
    current_index += 1
    state["current_account_index"] = current_index
    
    if current_index < len(selected_accounts):
        # –ï—Å—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        next_account = selected_accounts[current_index]
        account_nickname = next_account.get("username") or next_account.get("name") or next_account.get("phone")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        templates = get_templates_from_config(load_config(user_id), next_account.get('phone'))

        markup = InlineKeyboardMarkup(inline_keyboard=[])
        if templates:
            for idx, t in enumerate(templates):
                markup.inline_keyboard.append([
                    InlineKeyboardButton(text=truncate_preview(t), callback_data=f"custom_template_idx_{idx}")
                ])
        else:
            template1 = next_account.get("template1", "...")
            template2 = next_account.get("template2", "...")
            markup.inline_keyboard.append([InlineKeyboardButton(text=truncate_preview(template1), callback_data="custom_template_idx_0")])
            markup.inline_keyboard.append([InlineKeyboardButton(text=truncate_preview(template2), callback_data="custom_template_idx_1")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_nickname}:",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise
    else:
        # –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
        state["step"] = "select_logging"
        
        markup = InlineKeyboardMarkup(inline_keyboard=[])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–î–∞", callback_data="mailing_logging_yes")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–ù–µ—Ç", callback_data="mailing_logging_no")])
        markup.inline_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è üîô", callback_data="mailing_mode_custom")])
        
        try:
            await delete_and_send_image(
                call.message,
                "mailing.png",
                "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π?",
                reply_markup=markup,
                user_id=user_id
            )
        except TelegramAPIError as e:
            if "message is not modified" not in str(e):
                raise


async def run_mailboxer(user_id, license_type, selected_accounts, postman_account, group_id, notify_username, stop_event=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ mailboxer –∫–∞–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑ –±–æ—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ .session —Ñ–∞–π–ª–æ–≤.
    """
    print("Mailboxer —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")
    clients = []
    postman_client = None
    tasks = []
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø–æ—á—Ç—ã
        log_mailbox_activity(user_id, "launch")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á—Ç—ã
        if user_id not in postman_states:
            postman_states[user_id] = {}
        
        postman_states[user_id]["active"] = True
        postman_states[user_id]["selected_accounts"] = [acc.get("phone") for acc in selected_accounts]
        postman_states[user_id]["selected_postman"] = postman_account.get("phone")
        postman_states[user_id]["notify_username"] = notify_username
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª
        update_service_state("postman_states", user_id, postman_states[user_id])
        
        # –ü–æ–ª—É—á–∞–µ–º api_id –∏ api_hash –∏–∑ config.json
        user_dir = get_user_dir(user_id, license_type)
        config_path = os.path.join(user_dir, "config.json")
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)
        api_id = config.get("api_id")
        api_hash = config.get("api_hash")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {len(selected_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        for acc in selected_accounts:
            session_name = acc["name"]
            print(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {session_name} ({acc.get('phone')})...")
            client = await get_or_create_client(user_id, session_name, api_id, api_hash, license_type)
            if client is None:
                print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫.")
                continue
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –¥–ª—è {session_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                me = await client.get_me()
                acc['nickname'] = me.username or me.first_name or me.phone or acc.get('name') or acc.get('phone')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {session_name}: {e}")
                acc['nickname'] = acc.get('name') or acc.get('phone')
            
            clients.append((client, acc))

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞-–ø–æ—á—Ç–∞–ª—å–æ–Ω–∞
        postman_session_name = postman_account["name"]
        postman_client = await get_or_create_client(user_id, postman_session_name, api_id, api_hash, license_type)
        if postman_client is None:
            print(f"–ü–æ—á—Ç–∞–ª—å–æ–Ω {postman_session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. Mailboxer –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        tasks = []
        for client, acc in clients:
            task = asyncio.create_task(
                handle_incoming_messages(client, postman_client, group_id, acc, stop_event, notify_username)
            )
            tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop_event –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            while stop_event is None or not stop_event.is_set():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏/—Ç—Ä–∏–∞–ª–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                if not is_license_valid(user_id):
                    await handle_access_expired(user_id)
                    break
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏
                done_tasks = [task for task in tasks if task.done()]
                if len(done_tasks) == len(tasks):
                    break
                
                # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(1)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ mailboxer: {e}")
        
        # –ú—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∞–µ–º: –ø–æ–¥–∞—ë–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∂–¥—ë–º –∑–∞–¥–∞—á–∏
        if stop_event is not None:
            stop_event.set()
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait(tasks, timeout=5)
        except Exception:
            pass
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
        for task in tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
    except Exception as e:
        print("Mailboxer –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ –æ—à–∏–±–∫–µ", e)
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—á—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if user_id in postman_states:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞, –Ω–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if not postman_states[user_id].get("_restored", False):
                postman_states[user_id]["active"] = False
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
                update_service_state("postman_states", user_id, None)
            else:
                # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                postman_states[user_id].pop("_restored", None)
        # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á Telethon
        try:
            for client, _acc in clients or []:
                try:
                    await client.disconnect()
                except Exception:
                    pass
            if postman_client is not None:
                try:
                    await postman_client.disconnect()
                except Exception:
                    pass
        except Exception:
            pass
        print("Mailboxer –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (settings.json)

def get_user_settings_file_path(user_id, license_type=None):
    """–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É settings.json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        # if not license_type:
        #     license_type = detect_license_type(user_id)
        #     if license_type:
        #         user_states[f"{user_id}_license_type"] = license_type
    user_dir = get_user_dir(user_id, license_type, create_dir=False)
    return os.path.join(user_dir, "settings.json")

def load_user_settings(user_id, license_type=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç settings.json –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç legacy language.json (language only)."""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        # if not license_type:
        #     license_type = detect_license_type(user_id)
        #     if license_type:
        #         user_states[f"{user_id}_license_type"] = license_type
    
    try:
        settings_file = get_user_settings_file_path(user_id, license_type)
        if os.path.exists(settings_file):
            with open(settings_file, "r", encoding="utf-8") as f:
                return json.load(f)
        # Legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–∞
        legacy_language_file = os.path.join(os.path.dirname(settings_file), "language.json")
        if os.path.exists(legacy_language_file):
            with open(legacy_language_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                return {"language": data.get("language", "ru")}
    except Exception:
        pass
    return {}

def update_user_settings(user_id, updates: dict, license_type=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç (merge) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ settings.json."""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
        # if not license_type:
        #     license_type = detect_license_type(user_id)
        #     if license_type:
        #         user_states[f"{user_id}_license_type"] = license_type
    
    try:
        settings_file = get_user_settings_file_path(user_id, license_type)
        os.makedirs(os.path.dirname(settings_file), exist_ok=True)
        current = {}
        if os.path.exists(settings_file):
            try:
                with open(settings_file, "r", encoding="utf-8") as f:
                    current = json.load(f) or {}
            except Exception:
                current = {}
        current.update(updates or {})
        with open(settings_file, "w", encoding="utf-8") as f:
            json.dump(current, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è settings.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# ---- Autosubscribe limit in settings.json ----
def get_user_autosub_limit(user_id) -> int:
    try:
        settings = load_user_settings(user_id)
        value = settings.get("autosubscribe_limit", 0)
        # –†–æ–±–∞—Å—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞ –∏–∑ settings.json
        try:
            if isinstance(value, (int, float)):
                return int(value)
            if isinstance(value, str):
                s = value.strip()
                import re as _re
                m = _re.search(r"-?\d+", s)
                return int(m.group(0)) if m else 0
            return 0
        except Exception:
            return 0
    except Exception:
        return 0

def increment_user_autosub_limit(user_id, increment_by: int = 1) -> int:
    try:
        current = get_user_autosub_limit(user_id)
        safe_increment = int(increment_by)
        # –ñ—ë—Å—Ç–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫ 5/5 –¥–ª—è trial
        try:
            license_type = detect_license_type(user_id)
        except Exception:
            license_type = None
        if (str(license_type).endswith("trial") or str(license_type) == "trial") and current >= 5:
            return 5
        new_value = max(0, int(current) + safe_increment)
        if str(license_type).endswith("trial") or str(license_type) == "trial":
            new_value = min(5, new_value)
        update_user_settings(user_id, {"autosubscribe_limit": new_value})
        # –î—É–±–ª–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ freetrial.json –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ-–ª–æ–≥–∏–Ω–µ
        try:
            if str(license_type).endswith("trial") or str(license_type) == "trial":
                ft = load_freetrial()
                rec = ft.get(str(user_id)) or {}
                rec["autosubscribe_limit"] = new_value
                ft[str(user_id)] = rec
                save_freetrial(ft)
        except Exception:
            pass
        return new_value
    except Exception:
        return get_user_autosub_limit(user_id)

def get_user_reconnect_file_path(user_id, license_type=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É reconnect_state.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    user_dir = get_user_dir(user_id, license_type, create_dir=False)
    return os.path.join(user_dir, "reconnect_state.json")

def save_user_language_individual(user_id, language, license_type=None):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —è–∑—ã–∫ —á–µ—Ä–µ–∑ settings.json"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    return update_user_settings(user_id, {"language": language}, license_type)

def load_user_language_individual(user_id, license_type=None):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —á–∏—Ç–∞–µ—Ç —è–∑—ã–∫ –∏–∑ settings.json (–∏–ª–∏ –∏–∑ –≥–ª–æ–±–∞–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ)."""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    settings = load_user_settings(user_id, license_type)
    return settings.get("language", user_languages.get(user_id, "ru"))

def save_user_reconnect_state_individual(user_id, state_data, license_type=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ reconnect –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    try:
        reconnect_file = get_user_reconnect_file_path(user_id, license_type)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(reconnect_file), exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
        with open(reconnect_file, "w", encoding="utf-8") as f:
            json.dump(state_data, f, ensure_ascii=False, indent=2)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if license_type:
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_reconnect_file = os.path.join(user_base_dir, str(user_id), "reconnect_state.json")
            
            if os.path.exists(old_reconnect_file):
                try:
                    os.remove(old_reconnect_file)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª reconnect_state.json: {old_reconnect_file}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {e}")
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è reconnect_state.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def load_user_reconnect_state_individual(user_id, license_type=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ reconnect –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if license_type is None:
        license_type = user_states.get(f"{user_id}_license_type")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º
        if not license_type:
            license_type = detect_license_type(user_id)
            if license_type:
                user_states[f"{user_id}_license_type"] = license_type
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
        reconnect_file = get_user_reconnect_file_path(user_id, license_type)
        
        if os.path.exists(reconnect_file):
            with open(reconnect_file, "r", encoding="utf-8") as f:
                return json.load(f)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ, –∏—â–µ–º –≤ –ø–∞–ø–∫–µ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞
        if license_type:
            root = get_project_root()
            user_base_dir = os.path.join(root, "user")
            old_reconnect_file = os.path.join(user_base_dir, str(user_id), "reconnect_state.json")
            
            if os.path.exists(old_reconnect_file):
                print(f"üîÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª reconnect_state.json –≤ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–µ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é...")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
                with open(old_reconnect_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
                save_user_reconnect_state_individual(user_id, data, license_type)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(old_reconnect_file)
                    print(f"‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª reconnect_state.json —É–¥–∞–ª–µ–Ω: {old_reconnect_file}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {e}")
                
                return data
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ reconnect_state.json –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    return None

# ==================== –°–ò–°–¢–ï–ú–ê PUSH-–£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

def load_notifications():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ notifications.json"""
    try:
        with open("notifications.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ notifications.json: {e}")
        return {"notifications": []}

def save_notifications(notifications_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ notifications.json"""
    try:
        with open("notifications.json", "w", encoding="utf-8") as f:
            json.dump(notifications_data, f, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è notifications.json: {e}")
        return False

def get_user_saved_hours(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X —á–∞—Å–æ–≤ Y –º–∏–Ω—É—Ç' —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–ø–∫–∏
        user_license_type = None
        user_dir = "user"
        if os.path.exists(user_dir):
            for folder in os.listdir(user_dir):
                if folder.startswith(f"{user_id}_"):
                    user_license_type = folder.split("_")[1]
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞–ø–∫–µ, –ø—Ä–æ–±—É–µ–º –∏–∑ user_states
        if not user_license_type:
            user_license_type = user_states.get(f"{user_id}_license_type")
            if not user_license_type:
                user_license_type = detect_license_type(user_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—á–µ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        count_file = f"user/{user_id}_{user_license_type}/count.json"
        total_seconds = 0
        if os.path.exists(count_file):
            with open(count_file, "r", encoding="utf-8") as f:
                count_data = json.load(f)
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            sent_messages = count_data.get("sent_messages", 0)
            received_messages = count_data.get("received_messages", 0)
            autoresponder_messages = count_data.get("autoresponder_messages", 0)
            
            # –§–æ—Ä–º—É–ª–∞: —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞—Å—Å—ã–ª–∫–∞) = 10 —Å–µ–∫—É–Ω–¥ –∫–∞–∂–¥–æ–µ
            total_seconds = sent_messages * 10  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        saved_hours = total_seconds // 3600
        saved_minutes = (total_seconds % 3600) // 60
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è
        def pluralize_hours(hours: int) -> str:
            n = abs(int(hours))
            if 11 <= (n % 100) <= 14:
                return "—á–∞—Å–æ–≤"
            last = n % 10
            if last == 1:
                return "—á–∞—Å"
            if 2 <= last <= 4:
                return "—á–∞—Å–∞"
            return "—á–∞—Å–æ–≤"

        def pluralize_minutes(minutes: int) -> str:
            n = abs(int(minutes))
            if 11 <= (n % 100) <= 14:
                return "–º–∏–Ω—É—Ç"
            last = n % 10
            if last == 1:
                return "–º–∏–Ω—É—Ç–∞"
            if 2 <= last <= 4:
                return "–º–∏–Ω—É—Ç—ã"
            return "–º–∏–Ω—É—Ç"
        
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã
        if saved_hours == 0:
            return f"{saved_minutes} {pluralize_minutes(saved_minutes)}"
        else:
            return f"{saved_hours} {pluralize_hours(saved_hours)} {saved_minutes} {pluralize_minutes(saved_minutes)}"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è saved_hours –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "0 –º–∏–Ω—É—Ç"

def get_user_days_left(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'X –¥–Ω–µ–π Y —á–∞—Å–æ–≤' —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
    try:
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–Ω–µ–π
        def pluralize_days(days: int) -> str:
            n = abs(int(days))
            if 11 <= (n % 100) <= 14:
                return "–¥–Ω–µ–π"
            last = n % 10
            if last == 1:
                return "–¥–µ–Ω—å"
            if 2 <= last <= 4:
                return "–¥–Ω—è"
            return "–¥–Ω–µ–π"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤
        def pluralize_hours(hours: int) -> str:
            n = abs(int(hours))
            if 11 <= (n % 100) <= 14:
                return "—á–∞—Å–æ–≤"
            last = n % 10
            if last == 1:
                return "—á–∞—Å"
            if 2 <= last <= 4:
                return "—á–∞—Å–∞"
            return "—á–∞—Å–æ–≤"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –º–∏–Ω—É—Ç
        def pluralize_minutes(minutes: int) -> str:
            n = abs(int(minutes))
            if 11 <= (n % 100) <= 14:
                return "–º–∏–Ω—É—Ç"
            last = n % 10
            if last == 1:
                return "–º–∏–Ω—É—Ç–∞"
            if 2 <= last <= 4:
                return "–º–∏–Ω—É—Ç—ã"
            return "–º–∏–Ω—É—Ç"
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º Free Trial (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º)
        try:
            with open("freetrial.json", "r", encoding="utf-8") as f:
                freetrial_data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            freetrial_data = {}
        
        if str(user_id) in freetrial_data:
            trial_data = freetrial_data[str(user_id)]
            activated_at = trial_data.get("activated_at", 0)
            
            # Trial –¥–ª–∏—Ç—Å—è 24 —á–∞—Å–∞
            trial_end = activated_at + (24 * 3600)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            current_time = int(time.time())
            time_left = trial_end - current_time
            
            if time_left <= 0:
                return "0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤"
            
            # –î–ª—è Free Trial –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã (–±–µ–∑ –¥–Ω–µ–π)
            hours_left = int(time_left // 3600)
            minutes_left = int((time_left % 3600) // 60)
            
            if hours_left == 0:
                return f"{minutes_left} {pluralize_minutes(minutes_left)}"
            else:
                return f"{hours_left} {pluralize_hours(hours_left)} {minutes_left} {pluralize_minutes(minutes_left)}"
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ Free Trial, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
        try:
            with open(LICENSE_FILE, "r", encoding="utf-8") as f:
                licenses = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            licenses = {}
        
        if str(user_id) in licenses:
            license_data = licenses[str(user_id)]
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å end_date ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ activated_at + LICENSE_DURATION_DAYS
            end_dt = None
            try:
                if "end_date" in license_data:
                    end_dt = datetime.fromisoformat(license_data["end_date"].replace("Z", "+00:00"))
            except Exception:
                end_dt = None
            
            if end_dt is None:
                activated_at_ts = int(license_data.get("activated_at", 0))
                if activated_at_ts > 0:
                    # –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (+72 —á–∞—Å–∞), –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω—å—à–µ
                    end_ts = activated_at_ts + LICENSE_DURATION_DAYS * 24 * 3600 + get_referral_bonus_seconds(user_id)
                    end_dt = datetime.fromtimestamp(end_ts, tz=timezone.utc)
                else:
                    return "0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤"
            
            if end_dt is not None:
                current_date = datetime.now(timezone.utc)
                time_diff = end_dt - current_date
                if time_diff.total_seconds() <= 0:
                    return "0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤"
                total_days = int(time_diff.total_seconds() // (24 * 3600))
                remaining_hours = int((time_diff.total_seconds() % (24 * 3600)) // 3600)
                return f"{total_days} {pluralize_days(total_days)} {remaining_hours} {pluralize_hours(remaining_hours)}"
        
        return "0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤"
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è days_left –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "0 –¥–Ω–µ–π 0 —á–∞—Å–æ–≤"

def personalize_message(message, user_id):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º {saved_hours} –Ω–∞ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö
        if "{saved_hours}" in message:
            saved_hours = get_user_saved_hours(user_id)
            message = message.replace("{saved_hours}", saved_hours)
        
        # –ó–∞–º–µ–Ω—è–µ–º {days_left} –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –¥–Ω—è—Ö –∏ —á–∞—Å–∞—Ö
        if "{days_left}" in message:
            days_left = get_user_days_left(user_id)
            message = message.replace("{days_left}", days_left)
        
        return message
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return message

def should_send_notification(template, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º target_audience
        target_audience = template.get("target_audience", "all")
        if target_audience != "all":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–ø–∫–∏
            user_license_type = None
            user_dir = "user"
            if os.path.exists(user_dir):
                for folder in os.listdir(user_dir):
                    if folder.startswith(f"{user_id}_"):
                        user_license_type = folder.split("_")[1]
                        break
            
            if not user_license_type:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ user_states
                user_license_type = user_states.get(f"{user_id}_license_type")
                if not user_license_type:
                    user_license_type = detect_license_type(user_id)
            
            if user_license_type and user_license_type not in target_audience.split(", "):
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {user_license_type} vs {target_audience}")
                return False
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def send_push_notification(user_id, template):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        print(f"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        print(f"üìù –¢–µ–∫—Å—Ç: {template['message']}")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        personalized_message = personalize_message(template["message"], user_id)
        print(f"üìù –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {personalized_message}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        keyboard = None
        if "buttons" in template and template["buttons"]:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for button in template["buttons"]:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=button["text"], url=button["url"])
                ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if template.get("image") and template["image"] != "null":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            print(f"üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {template['image']}")
            photo = FSInputFile(template["image"])
            await bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=personalized_message,
                reply_markup=keyboard
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await bot.send_message(
                chat_id=user_id,
                text=personalized_message,
                reply_markup=keyboard
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        template["analytics"]["delivered_count"] += 1
        
        print(f"‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

async def push_notification_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    print("üîî –°–∏—Å—Ç–µ–º–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    last_modified_time = 0
    last_notifications_data = None
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª notifications.json
            current_modified_time = os.path.getmtime("notifications.json")
            
            if current_modified_time > last_modified_time or last_notifications_data is None:
                #print("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ notifications.json")
                last_modified_time = current_modified_time
                last_notifications_data = load_notifications()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–ø–∫–∏ user/
                all_users = []
                user_dir = "user"
                if os.path.exists(user_dir):
                    for folder in os.listdir(user_dir):
                        if "_" in folder:  # –§–æ—Ä–º–∞—Ç: user_id_license_type
                            user_id = folder.split("_")[0]
                            try:
                                all_users.append(int(user_id))
                            except ValueError:
                                continue
                
                #print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                for notification_group in last_notifications_data.get("notifications", []):
                    for template_name, template in notification_group.items():
                        if template_name.startswith("template") and template.get("title") != "null":
                            #print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω: {template_name}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                            schedule = template.get("schedule", {})
                            should_send_now = False
                            
                            if schedule.get("random", False):
                                # –°–ª—É—á–∞–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                                period = schedule.get("period", "1-7")
                                if period != "null":
                                    should_send_now = True  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                            else:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
                                target_date = schedule.get("date")
                                if target_date and target_date != "null":
                                    try:
                                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "13.08.2025, 00:35 GMT+3"
                                        date_str = target_date.split(",")[0]  # "13.08.2025"
                                        time_str = target_date.split(",")[1].split("GMT")[0].strip()  # " 00:35 "
                                        
                                        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
                                        from datetime import datetime
                                        target_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –º–∏–Ω—É—Ç—É)
                                        current_datetime = datetime.now()
                                        current_minute = current_datetime.strftime('%d.%m.%Y %H:%M')
                                        target_minute = target_datetime.strftime('%d.%m.%Y %H:%M')
                                        
                                        if current_minute == target_minute:
                                            should_send_now = True
                                            #print(f"‚è∞ –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {target_minute}")
                                        elif current_datetime > target_datetime:
                                            #print(f"‚è≠Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—à–ª–æ: {target_minute} (—Ç–µ–∫—É—â–µ–µ: {current_minute})")
                                            pass
                                        else:
                                            #print(f"‚è≥ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ: {target_minute} (—Ç–µ–∫—É—â–µ–µ: {current_minute})")
                                            pass
                                        
                                    except Exception as e:
                                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
                                        should_send_now = True  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                            
                            if should_send_now:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                if not template.get("is_sent", False):
                                    print(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {template_name}")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                    for user_id in all_users:
                                        if should_send_notification(template, user_id):
                                            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                            await send_push_notification(user_id, template)
                                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                                            await asyncio.sleep(1)
                                    
                                    # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                                    template["is_sent"] = True
                                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {template_name} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")
                                else:
                                    print(f"‚è≠Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {template_name} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                save_notifications(last_notifications_data)
                #print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

# ==================== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ PUSH-–£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        print(f"\nReceived SIGINT signal")
        # –°–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ asyncio.run()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
    import signal
    signal.signal(signal.SIGINT, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ—Ä–æ–≤
    async def main():
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        setup_telethon_logging()
        
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ—Ä–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        try:
            await check_internet_connection()
            print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DNS (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ 8.8.8.8 –∏–ª–∏ 1.1.1.1)")
            print("   - –§–∞–π—Ä–≤–æ–ª/–∞–Ω—Ç–∏–≤–∏—Ä—É—Å")
            print("   - VPN (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
            return
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        load_reconnect_state()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        global user_languages
        user_languages.update(load_user_languages())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        logger_task = asyncio.create_task(telegram_logger())
        auto_save_task = asyncio.create_task(auto_save_states())
        access_guard_task = asyncio.create_task(periodic_access_guard())
        bug_scheduler_task = asyncio.create_task(bug_message_scheduler())
        push_notifications_task = asyncio.create_task(push_notification_scheduler())
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞")
        print("‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–æ")
        print("‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ")
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö –∞–∫—Ç–∏–≤–µ–Ω")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–µ–Ω")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º aiogram –±–æ—Ç–∞
            print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await dp.start_polling(bot, skip_updates=True)
        except TelegramConflictError as e:
            print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–µ—Å—Å–∏–∏ Telegram: {e}")
            print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
            print("   - Telegram API –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é")
            print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
            print("   - –ò–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –¥—Ä—É–≥–∏–º —Ç–æ–∫–µ–Ω–æ–º")
        except TelegramNetworkError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram: {e}")
            print("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å api.telegram.org")
            print("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Telegram –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å DNS")
            print("   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        finally:
            print("üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º...")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
            save_reconnect_state()
            save_user_languages()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            await stop_all_auto_resume_tasks()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
            for user_id in list(active_tasks.keys()):
                for task_name in list(active_tasks[user_id].keys()):
                    task = active_tasks[user_id][task_name]
                    if not task.done():
                        print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É {task_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        task.cancel()
                        try:
                            await task
                        except asyncio.CancelledError:
                            pass
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
            print("üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
            for user_id in list(active_clients.keys()):
                await disconnect_all_clients(user_id)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            auto_save_task.cancel()
            access_guard_task.cancel()
            bug_scheduler_task.cancel()
            push_notifications_task.cancel()
            await log_queue.put(None)
            
            try:
                await logger_task
                await auto_save_task
                await access_guard_task
                await bug_scheduler_task
                await push_notifications_task
            except asyncio.CancelledError:
                pass
            
            print("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
import asyncio
asyncio.run(main())